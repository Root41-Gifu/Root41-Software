
UART-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003354  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003480  08003480  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003488  08003488  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  0800349c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800349c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a2f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ca  00000000  00000000  00029a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb5a  00000000  00000000  0002c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c96  00000000  00000000  0003bc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ebf8  00000000  00000000  000458b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a44b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001844  00000000  00000000  000a4504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033fc 	.word	0x080033fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080033fc 	.word	0x080033fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	gUartReceived = 1;
 80004a4:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <HAL_UART_RxCpltCallback+0x18>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	20000028 	.word	0x20000028

080004b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b0c0      	sub	sp, #256	; 0x100
 80004bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004be:	f000 f99f 	bl	8000800 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c2:	f000 f819 	bl	80004f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c6:	f000 f8b3 	bl	8000630 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ca:	f000 f881 	bl	80005d0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_UART_Receive_IT(&huart2, buffer, 1);
 80004ce:	0039      	movs	r1, r7
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <main+0x38>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fc69 	bl	8001dac <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart2, buffer, 1);
 80004da:	0039      	movs	r1, r7
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <main+0x38>)
 80004de:	2201      	movs	r2, #1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fbe3 	bl	8001cac <HAL_UART_Transmit_IT>

		gUartReceived = 0;
 80004e6:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <main+0x3c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, buffer, 1);
 80004ec:	e7ef      	b.n	80004ce <main+0x16>
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	2000002c 	.word	0x2000002c
 80004f4:	20000028 	.word	0x20000028

080004f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b099      	sub	sp, #100	; 0x64
 80004fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004fe:	242c      	movs	r4, #44	; 0x2c
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2334      	movs	r3, #52	; 0x34
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 ff6f 	bl	80033ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800050e:	2318      	movs	r3, #24
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 ff67 	bl	80033ec <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800051e:	003b      	movs	r3, r7
 8000520:	0018      	movs	r0, r3
 8000522:	2318      	movs	r3, #24
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f002 ff60 	bl	80033ec <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a26      	ldr	r2, [pc, #152]	; (80005cc <SystemClock_Config+0xd4>)
 8000532:	401a      	ands	r2, r3
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <SystemClock_Config+0xd0>)
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2210      	movs	r2, #16
 8000544:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	22a0      	movs	r2, #160	; 0xa0
 8000556:	0212      	lsls	r2, r2, #8
 8000558:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000560:	187b      	adds	r3, r7, r1
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fc88 	bl	8000e78 <HAL_RCC_OscConfig>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x78>
		Error_Handler();
 800056c:	f000 f876 	bl	800065c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000570:	2118      	movs	r1, #24
 8000572:	187b      	adds	r3, r7, r1
 8000574:	220f      	movs	r2, #15
 8000576:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2100      	movs	r1, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f000 ffeb 	bl	8001570 <HAL_RCC_ClockConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xaa>
		Error_Handler();
 800059e:	f000 f85d 	bl	800065c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2202      	movs	r2, #2
 80005a6:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fa01 	bl	80019b8 <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc6>
		Error_Handler();
 80005ba:	f000 f84f 	bl	800065c <Error_Handler>
	}
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b019      	add	sp, #100	; 0x64
 80005c4:	bd90      	pop	{r4, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40007000 	.word	0x40007000
 80005cc:	ffffe7ff 	.word	0xffffe7ff

080005d0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	22e1      	movs	r2, #225	; 0xe1
 80005de:	0252      	lsls	r2, r2, #9
 80005e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	0018      	movs	r0, r3
 8000616:	f001 faf5 	bl	8001c04 <HAL_UART_Init>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800061e:	f000 f81d 	bl	800065c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000002c 	.word	0x2000002c
 800062c:	40004400 	.word	0x40004400

08000630 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_GPIO_Init+0x28>)
 8000638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_GPIO_Init+0x28>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <MX_GPIO_Init+0x28>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <HAL_MspInit+0x24>)
 800066e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_MspInit+0x24>)
 8000672:	2101      	movs	r1, #1
 8000674:	430a      	orrs	r2, r1
 8000676:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <HAL_MspInit+0x24>)
 800067a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_MspInit+0x24>)
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	0549      	lsls	r1, r1, #21
 8000682:	430a      	orrs	r2, r1
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000

08000690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b089      	sub	sp, #36	; 0x24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	240c      	movs	r4, #12
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	2314      	movs	r3, #20
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f002 fea2 	bl	80033ec <memset>
  if(huart->Instance==USART2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <HAL_UART_MspInit+0x90>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d131      	bne.n	8000716 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b2:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <HAL_UART_MspInit+0x94>)
 80006b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_UART_MspInit+0x94>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0289      	lsls	r1, r1, #10
 80006bc:	430a      	orrs	r2, r1
 80006be:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_UART_MspInit+0x94>)
 80006c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_UART_MspInit+0x94>)
 80006c6:	2101      	movs	r1, #1
 80006c8:	430a      	orrs	r2, r1
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_UART_MspInit+0x94>)
 80006ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d0:	2201      	movs	r2, #1
 80006d2:	4013      	ands	r3, r2
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006d8:	0021      	movs	r1, r4
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	220c      	movs	r2, #12
 80006de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2202      	movs	r2, #2
 80006e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2203      	movs	r2, #3
 80006f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2204      	movs	r2, #4
 80006f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	187a      	adds	r2, r7, r1
 80006fa:	23a0      	movs	r3, #160	; 0xa0
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fa53 	bl	8000bac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	201c      	movs	r0, #28
 800070c:	f000 f994 	bl	8000a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000710:	201c      	movs	r0, #28
 8000712:	f000 f9a6 	bl	8000a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b009      	add	sp, #36	; 0x24
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40004400 	.word	0x40004400
 8000724:	40021000 	.word	0x40021000

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f8ac 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <USART2_IRQHandler+0x14>)
 800075e:	0018      	movs	r0, r3
 8000760:	f001 fb8c 	bl	8001e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	2000002c 	.word	0x2000002c

08000770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800077e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000782:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000784:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <LoopForever+0xa>)
    CMP R1, R2
 8000788:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800078a:	d105      	bne.n	8000798 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800078c:	4812      	ldr	r0, [pc, #72]	; (80007d8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800078e:	4913      	ldr	r1, [pc, #76]	; (80007dc <LoopForever+0x12>)
    STR R1, [R0]
 8000790:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000792:	4813      	ldr	r0, [pc, #76]	; (80007e0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000794:	4913      	ldr	r1, [pc, #76]	; (80007e4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000796:	6001      	str	r1, [r0, #0]

08000798 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	4813      	ldr	r0, [pc, #76]	; (80007e8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800079a:	4914      	ldr	r1, [pc, #80]	; (80007ec <LoopForever+0x22>)
  ldr r2, =_sidata
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <LoopForever+0x26>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80007b0:	4c11      	ldr	r4, [pc, #68]	; (80007f8 <LoopForever+0x2e>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007be:	f7ff ffd7 	bl	8000770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007c2:	f002 fdef 	bl	80033a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007c6:	f7ff fe77 	bl	80004b8 <main>

080007ca <LoopForever>:

LoopForever:
    b LoopForever
 80007ca:	e7fe      	b.n	80007ca <LoopForever>
   ldr   r0, =_estack
 80007cc:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80007d0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80007d4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80007d8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80007dc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80007e0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80007e4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f0:	08003490 	.word	0x08003490
  ldr r2, =_sbss
 80007f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f8:	200000b4 	.word	0x200000b4

080007fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_IRQHandler>
	...

08000800 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_Init+0x3c>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_Init+0x3c>)
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	430a      	orrs	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000818:	2003      	movs	r0, #3
 800081a:	f000 f811 	bl	8000840 <HAL_InitTick>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d003      	beq.n	800082a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	e001      	b.n	800082e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800082a:	f7ff ff1d 	bl	8000668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
}
 8000832:	0018      	movs	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_InitTick+0x5c>)
 800084a:	681c      	ldr	r4, [r3, #0]
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <HAL_InitTick+0x60>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	0019      	movs	r1, r3
 8000852:	23fa      	movs	r3, #250	; 0xfa
 8000854:	0098      	lsls	r0, r3, #2
 8000856:	f7ff fc57 	bl	8000108 <__udivsi3>
 800085a:	0003      	movs	r3, r0
 800085c:	0019      	movs	r1, r3
 800085e:	0020      	movs	r0, r4
 8000860:	f7ff fc52 	bl	8000108 <__udivsi3>
 8000864:	0003      	movs	r3, r0
 8000866:	0018      	movs	r0, r3
 8000868:	f000 f90b 	bl	8000a82 <HAL_SYSTICK_Config>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	e00f      	b.n	8000894 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b03      	cmp	r3, #3
 8000878:	d80b      	bhi.n	8000892 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	2301      	movs	r3, #1
 800087e:	425b      	negs	r3, r3
 8000880:	2200      	movs	r2, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f8d8 	bl	8000a38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_InitTick+0x64>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	b003      	add	sp, #12
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	001a      	movs	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	18d2      	adds	r2, r2, r3
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_IncTick+0x20>)
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	20000008 	.word	0x20000008
 80008c8:	200000b0 	.word	0x200000b0

080008cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200000b0 	.word	0x200000b0

080008e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	0002      	movs	r2, r0
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b7f      	cmp	r3, #127	; 0x7f
 80008f2:	d809      	bhi.n	8000908 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	001a      	movs	r2, r3
 80008fa:	231f      	movs	r3, #31
 80008fc:	401a      	ands	r2, r3
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_EnableIRQ+0x30>)
 8000900:	2101      	movs	r1, #1
 8000902:	4091      	lsls	r1, r2
 8000904:	000a      	movs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
  }
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b002      	add	sp, #8
 800090e:	bd80      	pop	{r7, pc}
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	0002      	movs	r2, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b7f      	cmp	r3, #127	; 0x7f
 8000928:	d828      	bhi.n	800097c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092a:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <__NVIC_SetPriority+0xd4>)
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b25b      	sxtb	r3, r3
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	33c0      	adds	r3, #192	; 0xc0
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	589b      	ldr	r3, [r3, r2]
 800093a:	1dfa      	adds	r2, r7, #7
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	0011      	movs	r1, r2
 8000940:	2203      	movs	r2, #3
 8000942:	400a      	ands	r2, r1
 8000944:	00d2      	lsls	r2, r2, #3
 8000946:	21ff      	movs	r1, #255	; 0xff
 8000948:	4091      	lsls	r1, r2
 800094a:	000a      	movs	r2, r1
 800094c:	43d2      	mvns	r2, r2
 800094e:	401a      	ands	r2, r3
 8000950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	019b      	lsls	r3, r3, #6
 8000956:	22ff      	movs	r2, #255	; 0xff
 8000958:	401a      	ands	r2, r3
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	0018      	movs	r0, r3
 8000960:	2303      	movs	r3, #3
 8000962:	4003      	ands	r3, r0
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000968:	481f      	ldr	r0, [pc, #124]	; (80009e8 <__NVIC_SetPriority+0xd4>)
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	430a      	orrs	r2, r1
 8000974:	33c0      	adds	r3, #192	; 0xc0
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800097a:	e031      	b.n	80009e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <__NVIC_SetPriority+0xd8>)
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	0019      	movs	r1, r3
 8000984:	230f      	movs	r3, #15
 8000986:	400b      	ands	r3, r1
 8000988:	3b08      	subs	r3, #8
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	3306      	adds	r3, #6
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	18d3      	adds	r3, r2, r3
 8000992:	3304      	adds	r3, #4
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	1dfa      	adds	r2, r7, #7
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	0011      	movs	r1, r2
 800099c:	2203      	movs	r2, #3
 800099e:	400a      	ands	r2, r1
 80009a0:	00d2      	lsls	r2, r2, #3
 80009a2:	21ff      	movs	r1, #255	; 0xff
 80009a4:	4091      	lsls	r1, r2
 80009a6:	000a      	movs	r2, r1
 80009a8:	43d2      	mvns	r2, r2
 80009aa:	401a      	ands	r2, r3
 80009ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	019b      	lsls	r3, r3, #6
 80009b2:	22ff      	movs	r2, #255	; 0xff
 80009b4:	401a      	ands	r2, r3
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	0018      	movs	r0, r3
 80009bc:	2303      	movs	r3, #3
 80009be:	4003      	ands	r3, r0
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <__NVIC_SetPriority+0xd8>)
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	001c      	movs	r4, r3
 80009cc:	230f      	movs	r3, #15
 80009ce:	4023      	ands	r3, r4
 80009d0:	3b08      	subs	r3, #8
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	430a      	orrs	r2, r1
 80009d6:	3306      	adds	r3, #6
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	18c3      	adds	r3, r0, r3
 80009dc:	3304      	adds	r3, #4
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b003      	add	sp, #12
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	1e5a      	subs	r2, r3, #1
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	045b      	lsls	r3, r3, #17
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d301      	bcc.n	8000a08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a04:	2301      	movs	r3, #1
 8000a06:	e010      	b.n	8000a2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <SysTick_Config+0x44>)
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a10:	2301      	movs	r3, #1
 8000a12:	425b      	negs	r3, r3
 8000a14:	2103      	movs	r1, #3
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff ff7c 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x44>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x44>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	210f      	movs	r1, #15
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	1c02      	adds	r2, r0, #0
 8000a48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff ff5d 	bl	8000914 <__NVIC_SetPriority>
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b004      	add	sp, #16
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	0002      	movs	r2, r0
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff ff33 	bl	80008e0 <__NVIC_EnableIRQ>
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff ffaf 	bl	80009f0 <SysTick_Config>
 8000a92:	0003      	movs	r3, r0
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2225      	movs	r2, #37	; 0x25
 8000ab0:	5c9b      	ldrb	r3, [r3, r2]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d008      	beq.n	8000aca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2204      	movs	r2, #4
 8000abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2224      	movs	r2, #36	; 0x24
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e024      	b.n	8000b14 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	438a      	bics	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	438a      	bics	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	221c      	movs	r2, #28
 8000af0:	401a      	ands	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	2101      	movs	r1, #1
 8000af8:	4091      	lsls	r1, r2
 8000afa:	000a      	movs	r2, r1
 8000afc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2225      	movs	r2, #37	; 0x25
 8000b02:	2101      	movs	r1, #1
 8000b04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2224      	movs	r2, #36	; 0x24
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	5499      	strb	r1, [r3, r2]

    return status;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b004      	add	sp, #16
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b24:	210f      	movs	r1, #15
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2225      	movs	r2, #37	; 0x25
 8000b30:	5c9b      	ldrb	r3, [r3, r2]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d006      	beq.n	8000b46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e02a      	b.n	8000b9c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	210e      	movs	r1, #14
 8000b52:	438a      	bics	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	438a      	bics	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	221c      	movs	r2, #28
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	2101      	movs	r1, #1
 8000b74:	4091      	lsls	r1, r2
 8000b76:	000a      	movs	r2, r1
 8000b78:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2225      	movs	r2, #37	; 0x25
 8000b7e:	2101      	movs	r1, #1
 8000b80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2224      	movs	r2, #36	; 0x24
 8000b86:	2100      	movs	r1, #0
 8000b88:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d004      	beq.n	8000b9c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	0010      	movs	r0, r2
 8000b9a:	4798      	blx	r3
    }
  }
  return status;
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	781b      	ldrb	r3, [r3, #0]
}
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bc2:	e143      	b.n	8000e4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d100      	bne.n	8000bdc <HAL_GPIO_Init+0x30>
 8000bda:	e134      	b.n	8000e46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2203      	movs	r2, #3
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d005      	beq.n	8000bf4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2203      	movs	r2, #3
 8000bee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d130      	bne.n	8000c56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	409a      	lsls	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	43da      	mvns	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	409a      	lsls	r2, r3
 8000c16:	0013      	movs	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	091b      	lsrs	r3, r3, #4
 8000c40:	2201      	movs	r2, #1
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d017      	beq.n	8000c92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2203      	movs	r2, #3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d123      	bne.n	8000ce6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	08da      	lsrs	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	58d3      	ldr	r3, [r2, r3]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2207      	movs	r2, #7
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691a      	ldr	r2, [r3, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2107      	movs	r1, #7
 8000cca:	400b      	ands	r3, r1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	6939      	ldr	r1, [r7, #16]
 8000ce4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2203      	movs	r2, #3
 8000d04:	401a      	ands	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	23c0      	movs	r3, #192	; 0xc0
 8000d20:	029b      	lsls	r3, r3, #10
 8000d22:	4013      	ands	r3, r2
 8000d24:	d100      	bne.n	8000d28 <HAL_GPIO_Init+0x17c>
 8000d26:	e08e      	b.n	8000e46 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d28:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <HAL_GPIO_Init+0x2b8>)
 8000d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	; (8000e64 <HAL_GPIO_Init+0x2b8>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	430a      	orrs	r2, r1
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d34:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	589b      	ldr	r3, [r3, r2]
 8000d40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2203      	movs	r2, #3
 8000d46:	4013      	ands	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	23a0      	movs	r3, #160	; 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d00d      	beq.n	8000d7e <HAL_GPIO_Init+0x1d2>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <HAL_GPIO_Init+0x2c0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x1ce>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a40      	ldr	r2, [pc, #256]	; (8000e70 <HAL_GPIO_Init+0x2c4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_GPIO_Init+0x1ca>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e004      	b.n	8000d80 <HAL_GPIO_Init+0x1d4>
 8000d76:	2306      	movs	r3, #6
 8000d78:	e002      	b.n	8000d80 <HAL_GPIO_Init+0x1d4>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <HAL_GPIO_Init+0x1d4>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	2103      	movs	r1, #3
 8000d84:	400a      	ands	r2, r1
 8000d86:	0092      	lsls	r2, r2, #2
 8000d88:	4093      	lsls	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d90:	4935      	ldr	r1, [pc, #212]	; (8000e68 <HAL_GPIO_Init+0x2bc>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d9e:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	43da      	mvns	r2, r3
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	025b      	lsls	r3, r3, #9
 8000db6:	4013      	ands	r3, r2
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	029b      	lsls	r3, r3, #10
 8000de0:	4013      	ands	r3, r2
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	035b      	lsls	r3, r3, #13
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	039b      	lsls	r3, r3, #14
 8000e34:	4013      	ands	r3, r2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_GPIO_Init+0x2c8>)
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	40da      	lsrs	r2, r3
 8000e54:	1e13      	subs	r3, r2, #0
 8000e56:	d000      	beq.n	8000e5a <HAL_GPIO_Init+0x2ae>
 8000e58:	e6b4      	b.n	8000bc4 <HAL_GPIO_Init+0x18>
  }
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b006      	add	sp, #24
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	50000400 	.word	0x50000400
 8000e70:	50000800 	.word	0x50000800
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f000 fb6c 	bl	8001564 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e8c:	4bc8      	ldr	r3, [pc, #800]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	220c      	movs	r2, #12
 8000e92:	4013      	ands	r3, r2
 8000e94:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e96:	4bc6      	ldr	r3, [pc, #792]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_OscConfig+0x36>
 8000eac:	e07d      	b.n	8000faa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d007      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b0c      	cmp	r3, #12
 8000eb8:	d112      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x68>
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d10d      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec4:	4bba      	ldr	r3, [pc, #744]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	029b      	lsls	r3, r3, #10
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d100      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5a>
 8000ed0:	e06a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x130>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d166      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f000 fb42 	bl	8001564 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d107      	bne.n	8000efc <HAL_RCC_OscConfig+0x84>
 8000eec:	4bb0      	ldr	r3, [pc, #704]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4baf      	ldr	r3, [pc, #700]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e027      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	23a0      	movs	r3, #160	; 0xa0
 8000f02:	02db      	lsls	r3, r3, #11
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d10e      	bne.n	8000f26 <HAL_RCC_OscConfig+0xae>
 8000f08:	4ba9      	ldr	r3, [pc, #676]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4ba8      	ldr	r3, [pc, #672]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	02c9      	lsls	r1, r1, #11
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	4ba6      	ldr	r3, [pc, #664]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4ba5      	ldr	r3, [pc, #660]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0249      	lsls	r1, r1, #9
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e012      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f26:	4ba2      	ldr	r3, [pc, #648]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4ba1      	ldr	r3, [pc, #644]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f2c:	49a1      	ldr	r1, [pc, #644]	; (80011b4 <HAL_RCC_OscConfig+0x33c>)
 8000f2e:	400a      	ands	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	4b9f      	ldr	r3, [pc, #636]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4b9b      	ldr	r3, [pc, #620]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b9a      	ldr	r3, [pc, #616]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f46:	499c      	ldr	r1, [pc, #624]	; (80011b8 <HAL_RCC_OscConfig+0x340>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d014      	beq.n	8000f7e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fcba 	bl	80008cc <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fcb5 	bl	80008cc <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b64      	cmp	r3, #100	; 0x64
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e2f9      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f70:	4b8f      	ldr	r3, [pc, #572]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	029b      	lsls	r3, r3, #10
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0xe6>
 8000f7c:	e015      	b.n	8000faa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fca5 	bl	80008cc <HAL_GetTick>
 8000f82:	0003      	movs	r3, r0
 8000f84:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fca0 	bl	80008cc <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e2e4      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f9a:	4b85      	ldr	r3, [pc, #532]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x110>
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d100      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x13e>
 8000fb4:	e099      	b.n	80010ea <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d009      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000fc4:	4b7a      	ldr	r3, [pc, #488]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b79      	ldr	r3, [pc, #484]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000fca:	2120      	movs	r1, #32
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	4393      	bics	r3, r2
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d005      	beq.n	8000fea <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	2b0c      	cmp	r3, #12
 8000fe2:	d13e      	bne.n	8001062 <HAL_RCC_OscConfig+0x1ea>
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d13b      	bne.n	8001062 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000fea:	4b71      	ldr	r3, [pc, #452]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d004      	beq.n	8000ffe <HAL_RCC_OscConfig+0x186>
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e2b2      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b6c      	ldr	r3, [pc, #432]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a6e      	ldr	r2, [pc, #440]	; (80011bc <HAL_RCC_OscConfig+0x344>)
 8001004:	4013      	ands	r3, r2
 8001006:	0019      	movs	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	021a      	lsls	r2, r3, #8
 800100e:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001010:	430a      	orrs	r2, r1
 8001012:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001014:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2209      	movs	r2, #9
 800101a:	4393      	bics	r3, r2
 800101c:	0019      	movs	r1, r3
 800101e:	4b64      	ldr	r3, [pc, #400]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001026:	f000 fbeb 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 800102a:	0001      	movs	r1, r0
 800102c:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	220f      	movs	r2, #15
 8001034:	4013      	ands	r3, r2
 8001036:	4a62      	ldr	r2, [pc, #392]	; (80011c0 <HAL_RCC_OscConfig+0x348>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	000a      	movs	r2, r1
 800103c:	40da      	lsrs	r2, r3
 800103e:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <HAL_RCC_OscConfig+0x34c>)
 8001040:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001042:	4b61      	ldr	r3, [pc, #388]	; (80011c8 <HAL_RCC_OscConfig+0x350>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2513      	movs	r5, #19
 8001048:	197c      	adds	r4, r7, r5
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff fbf8 	bl	8000840 <HAL_InitTick>
 8001050:	0003      	movs	r3, r0
 8001052:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001054:	197b      	adds	r3, r7, r5
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d046      	beq.n	80010ea <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800105c:	197b      	adds	r3, r7, r5
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	e280      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	d027      	beq.n	80010b8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2209      	movs	r2, #9
 800106e:	4393      	bics	r3, r2
 8001070:	0019      	movs	r1, r3
 8001072:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fc27 	bl	80008cc <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fc22 	bl	80008cc <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e266      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001096:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2204      	movs	r2, #4
 800109c:	4013      	ands	r3, r2
 800109e:	d0f1      	beq.n	8001084 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_RCC_OscConfig+0x344>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	0019      	movs	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	021a      	lsls	r2, r3, #8
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010b2:	430a      	orrs	r2, r1
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	e018      	b.n	80010ea <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b8:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010be:	2101      	movs	r1, #1
 80010c0:	438a      	bics	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fc02 	bl	80008cc <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff fbfd 	bl	80008cc <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e241      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010e0:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2204      	movs	r2, #4
 80010e6:	4013      	ands	r3, r2
 80010e8:	d1f1      	bne.n	80010ce <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2210      	movs	r2, #16
 80010f0:	4013      	ands	r3, r2
 80010f2:	d100      	bne.n	80010f6 <HAL_RCC_OscConfig+0x27e>
 80010f4:	e0a1      	b.n	800123a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d140      	bne.n	800117e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010fc:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4013      	ands	r3, r2
 8001106:	d005      	beq.n	8001114 <HAL_RCC_OscConfig+0x29c>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e227      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a2c      	ldr	r2, [pc, #176]	; (80011cc <HAL_RCC_OscConfig+0x354>)
 800111a:	4013      	ands	r3, r2
 800111c:	0019      	movs	r1, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1a      	ldr	r2, [r3, #32]
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001124:	430a      	orrs	r2, r1
 8001126:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	0a19      	lsrs	r1, r3, #8
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	061a      	lsls	r2, r3, #24
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001138:	430a      	orrs	r2, r1
 800113a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	0b5b      	lsrs	r3, r3, #13
 8001142:	3301      	adds	r3, #1
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	0212      	lsls	r2, r2, #8
 8001148:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	210f      	movs	r1, #15
 8001152:	400b      	ands	r3, r1
 8001154:	491a      	ldr	r1, [pc, #104]	; (80011c0 <HAL_RCC_OscConfig+0x348>)
 8001156:	5ccb      	ldrb	r3, [r1, r3]
 8001158:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_RCC_OscConfig+0x34c>)
 800115c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_RCC_OscConfig+0x350>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2513      	movs	r5, #19
 8001164:	197c      	adds	r4, r7, r5
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff fb6a 	bl	8000840 <HAL_InitTick>
 800116c:	0003      	movs	r3, r0
 800116e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001170:	197b      	adds	r3, r7, r5
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d060      	beq.n	800123a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001178:	197b      	adds	r3, r7, r5
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	e1f2      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d03f      	beq.n	8001206 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_RCC_OscConfig+0x338>)
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	0049      	lsls	r1, r1, #1
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fb9a 	bl	80008cc <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800119c:	e018      	b.n	80011d0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119e:	f7ff fb95 	bl	80008cc <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d911      	bls.n	80011d0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1d9      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
 80011b0:	40021000 	.word	0x40021000
 80011b4:	fffeffff 	.word	0xfffeffff
 80011b8:	fffbffff 	.word	0xfffbffff
 80011bc:	ffffe0ff 	.word	0xffffe0ff
 80011c0:	08003414 	.word	0x08003414
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000004 	.word	0x20000004
 80011cc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011d0:	4bc9      	ldr	r3, [pc, #804]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d0e0      	beq.n	800119e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011dc:	4bc6      	ldr	r3, [pc, #792]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4ac6      	ldr	r2, [pc, #792]	; (80014fc <HAL_RCC_OscConfig+0x684>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	0019      	movs	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1a      	ldr	r2, [r3, #32]
 80011ea:	4bc3      	ldr	r3, [pc, #780]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80011ec:	430a      	orrs	r2, r1
 80011ee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f0:	4bc1      	ldr	r3, [pc, #772]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	0a19      	lsrs	r1, r3, #8
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	061a      	lsls	r2, r3, #24
 80011fe:	4bbe      	ldr	r3, [pc, #760]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001200:	430a      	orrs	r2, r1
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	e019      	b.n	800123a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001206:	4bbc      	ldr	r3, [pc, #752]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4bbb      	ldr	r3, [pc, #748]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800120c:	49bc      	ldr	r1, [pc, #752]	; (8001500 <HAL_RCC_OscConfig+0x688>)
 800120e:	400a      	ands	r2, r1
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff fb5b 	bl	80008cc <HAL_GetTick>
 8001216:	0003      	movs	r3, r0
 8001218:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121c:	f7ff fb56 	bl	80008cc <HAL_GetTick>
 8001220:	0002      	movs	r2, r0
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e19a      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800122e:	4bb2      	ldr	r3, [pc, #712]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4013      	ands	r3, r2
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2208      	movs	r2, #8
 8001240:	4013      	ands	r3, r2
 8001242:	d036      	beq.n	80012b2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d019      	beq.n	8001280 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124c:	4baa      	ldr	r3, [pc, #680]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800124e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001250:	4ba9      	ldr	r3, [pc, #676]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001252:	2101      	movs	r1, #1
 8001254:	430a      	orrs	r2, r1
 8001256:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fb38 	bl	80008cc <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff fb33 	bl	80008cc <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e177      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001274:	4ba0      	ldr	r3, [pc, #640]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001278:	2202      	movs	r2, #2
 800127a:	4013      	ands	r3, r2
 800127c:	d0f1      	beq.n	8001262 <HAL_RCC_OscConfig+0x3ea>
 800127e:	e018      	b.n	80012b2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001280:	4b9d      	ldr	r3, [pc, #628]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001284:	4b9c      	ldr	r3, [pc, #624]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001286:	2101      	movs	r1, #1
 8001288:	438a      	bics	r2, r1
 800128a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff fb1e 	bl	80008cc <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff fb19 	bl	80008cc <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e15d      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012a8:	4b93      	ldr	r3, [pc, #588]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80012aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ac:	2202      	movs	r2, #2
 80012ae:	4013      	ands	r3, r2
 80012b0:	d1f1      	bne.n	8001296 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2204      	movs	r2, #4
 80012b8:	4013      	ands	r3, r2
 80012ba:	d100      	bne.n	80012be <HAL_RCC_OscConfig+0x446>
 80012bc:	e0ae      	b.n	800141c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012be:	2023      	movs	r0, #35	; 0x23
 80012c0:	183b      	adds	r3, r7, r0
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c6:	4b8c      	ldr	r3, [pc, #560]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80012c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	055b      	lsls	r3, r3, #21
 80012ce:	4013      	ands	r3, r2
 80012d0:	d109      	bne.n	80012e6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b89      	ldr	r3, [pc, #548]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80012d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d6:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	0549      	lsls	r1, r1, #21
 80012dc:	430a      	orrs	r2, r1
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012e0:	183b      	adds	r3, r7, r0
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b87      	ldr	r3, [pc, #540]	; (8001504 <HAL_RCC_OscConfig+0x68c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d11a      	bne.n	8001328 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b84      	ldr	r3, [pc, #528]	; (8001504 <HAL_RCC_OscConfig+0x68c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b83      	ldr	r3, [pc, #524]	; (8001504 <HAL_RCC_OscConfig+0x68c>)
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	0049      	lsls	r1, r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001300:	f7ff fae4 	bl	80008cc <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fadf 	bl	80008cc <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b64      	cmp	r3, #100	; 0x64
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e123      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b79      	ldr	r3, [pc, #484]	; (8001504 <HAL_RCC_OscConfig+0x68c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	429a      	cmp	r2, r3
 8001332:	d107      	bne.n	8001344 <HAL_RCC_OscConfig+0x4cc>
 8001334:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001338:	4b6f      	ldr	r3, [pc, #444]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	0049      	lsls	r1, r1, #1
 800133e:	430a      	orrs	r2, r1
 8001340:	651a      	str	r2, [r3, #80]	; 0x50
 8001342:	e031      	b.n	80013a8 <HAL_RCC_OscConfig+0x530>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x4ee>
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800134e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001350:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001352:	496b      	ldr	r1, [pc, #428]	; (8001500 <HAL_RCC_OscConfig+0x688>)
 8001354:	400a      	ands	r2, r1
 8001356:	651a      	str	r2, [r3, #80]	; 0x50
 8001358:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800135a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800135c:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800135e:	496a      	ldr	r1, [pc, #424]	; (8001508 <HAL_RCC_OscConfig+0x690>)
 8001360:	400a      	ands	r2, r1
 8001362:	651a      	str	r2, [r3, #80]	; 0x50
 8001364:	e020      	b.n	80013a8 <HAL_RCC_OscConfig+0x530>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	23a0      	movs	r3, #160	; 0xa0
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	429a      	cmp	r2, r3
 8001370:	d10e      	bne.n	8001390 <HAL_RCC_OscConfig+0x518>
 8001372:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001376:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	00c9      	lsls	r1, r1, #3
 800137c:	430a      	orrs	r2, r1
 800137e:	651a      	str	r2, [r3, #80]	; 0x50
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001384:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	0049      	lsls	r1, r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	651a      	str	r2, [r3, #80]	; 0x50
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0x530>
 8001390:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001394:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001396:	495a      	ldr	r1, [pc, #360]	; (8001500 <HAL_RCC_OscConfig+0x688>)
 8001398:	400a      	ands	r2, r1
 800139a:	651a      	str	r2, [r3, #80]	; 0x50
 800139c:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800139e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a0:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80013a2:	4959      	ldr	r1, [pc, #356]	; (8001508 <HAL_RCC_OscConfig+0x690>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d015      	beq.n	80013dc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fa8c 	bl	80008cc <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013b8:	e009      	b.n	80013ce <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fa87 	bl	80008cc <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	4a51      	ldr	r2, [pc, #324]	; (800150c <HAL_RCC_OscConfig+0x694>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e0ca      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80013d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	d0ef      	beq.n	80013ba <HAL_RCC_OscConfig+0x542>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fa76 	bl	80008cc <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013e4:	e009      	b.n	80013fa <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fa71 	bl	80008cc <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	4a46      	ldr	r2, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x694>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0b4      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80013fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d1ef      	bne.n	80013e6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001406:	2323      	movs	r3, #35	; 0x23
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001410:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001416:	493e      	ldr	r1, [pc, #248]	; (8001510 <HAL_RCC_OscConfig+0x698>)
 8001418:	400a      	ands	r2, r1
 800141a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	2b00      	cmp	r3, #0
 8001422:	d100      	bne.n	8001426 <HAL_RCC_OscConfig+0x5ae>
 8001424:	e09d      	b.n	8001562 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d100      	bne.n	800142e <HAL_RCC_OscConfig+0x5b6>
 800142c:	e076      	b.n	800151c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	2b02      	cmp	r3, #2
 8001434:	d145      	bne.n	80014c2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800143c:	4935      	ldr	r1, [pc, #212]	; (8001514 <HAL_RCC_OscConfig+0x69c>)
 800143e:	400a      	ands	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fa43 	bl	80008cc <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fa3e 	bl	80008cc <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e082      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	049b      	lsls	r3, r3, #18
 8001466:	4013      	ands	r3, r2
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_RCC_OscConfig+0x6a0>)
 8001470:	4013      	ands	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	431a      	orrs	r2, r3
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001486:	430a      	orrs	r2, r1
 8001488:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0449      	lsls	r1, r1, #17
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fa18 	bl	80008cc <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fa13 	bl	80008cc <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e057      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	049b      	lsls	r3, r3, #18
 80014bc:	4013      	ands	r3, r2
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x62a>
 80014c0:	e04f      	b.n	8001562 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80014c8:	4912      	ldr	r1, [pc, #72]	; (8001514 <HAL_RCC_OscConfig+0x69c>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff f9fd 	bl	80008cc <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff f9f8 	bl	80008cc <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e03c      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_RCC_OscConfig+0x680>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	049b      	lsls	r3, r3, #18
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x660>
 80014f6:	e034      	b.n	8001562 <HAL_RCC_OscConfig+0x6ea>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	ffff1fff 	.word	0xffff1fff
 8001500:	fffffeff 	.word	0xfffffeff
 8001504:	40007000 	.word	0x40007000
 8001508:	fffffbff 	.word	0xfffffbff
 800150c:	00001388 	.word	0x00001388
 8001510:	efffffff 	.word	0xefffffff
 8001514:	feffffff 	.word	0xfeffffff
 8001518:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_RCC_OscConfig+0x6f4>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	025b      	lsls	r3, r3, #9
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	429a      	cmp	r2, r3
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	23f0      	movs	r3, #240	; 0xf0
 8001542:	039b      	lsls	r3, r3, #14
 8001544:	401a      	ands	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d107      	bne.n	800155e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	23c0      	movs	r3, #192	; 0xc0
 8001552:	041b      	lsls	r3, r3, #16
 8001554:	401a      	ands	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d001      	beq.n	8001562 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b00a      	add	sp, #40	; 0x28
 800156a:	bdb0      	pop	{r4, r5, r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e128      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b96      	ldr	r3, [pc, #600]	; (80017e0 <HAL_RCC_ClockConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	4013      	ands	r3, r2
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d91e      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b93      	ldr	r3, [pc, #588]	; (80017e0 <HAL_RCC_ClockConfig+0x270>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2201      	movs	r2, #1
 8001598:	4393      	bics	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	4b90      	ldr	r3, [pc, #576]	; (80017e0 <HAL_RCC_ClockConfig+0x270>)
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015a4:	f7ff f992 	bl	80008cc <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ae:	f7ff f98d 	bl	80008cc <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4a8a      	ldr	r2, [pc, #552]	; (80017e4 <HAL_RCC_ClockConfig+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e109      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <HAL_RCC_ClockConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4013      	ands	r3, r2
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d1ee      	bne.n	80015ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015da:	4b83      	ldr	r3, [pc, #524]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	22f0      	movs	r2, #240	; 0xf0
 80015e0:	4393      	bics	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	4b7f      	ldr	r3, [pc, #508]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	4013      	ands	r3, r2
 80015f6:	d100      	bne.n	80015fa <HAL_RCC_ClockConfig+0x8a>
 80015f8:	e089      	b.n	800170e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001602:	4b79      	ldr	r3, [pc, #484]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	4013      	ands	r3, r2
 800160c:	d120      	bne.n	8001650 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0e1      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800161a:	4b73      	ldr	r3, [pc, #460]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	049b      	lsls	r3, r3, #18
 8001622:	4013      	ands	r3, r2
 8001624:	d114      	bne.n	8001650 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0d5      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d106      	bne.n	8001640 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2204      	movs	r2, #4
 8001638:	4013      	ands	r3, r2
 800163a:	d109      	bne.n	8001650 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0ca      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001640:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0c2      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001650:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2203      	movs	r2, #3
 8001656:	4393      	bics	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001660:	430a      	orrs	r2, r1
 8001662:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff f932 	bl	80008cc <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d111      	bne.n	8001698 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001674:	e009      	b.n	800168a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001676:	f7ff f929 	bl	80008cc <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x274>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0a5      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800168a:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	220c      	movs	r2, #12
 8001690:	4013      	ands	r3, r2
 8001692:	2b08      	cmp	r3, #8
 8001694:	d1ef      	bne.n	8001676 <HAL_RCC_ClockConfig+0x106>
 8001696:	e03a      	b.n	800170e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d111      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a0:	e009      	b.n	80016b6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a2:	f7ff f913 	bl	80008cc <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a4d      	ldr	r2, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x274>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e08f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b6:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	220c      	movs	r2, #12
 80016bc:	4013      	ands	r3, r2
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d1ef      	bne.n	80016a2 <HAL_RCC_ClockConfig+0x132>
 80016c2:	e024      	b.n	800170e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d11b      	bne.n	8001704 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016cc:	e009      	b.n	80016e2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ce:	f7ff f8fd 	bl	80008cc <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a42      	ldr	r2, [pc, #264]	; (80017e4 <HAL_RCC_ClockConfig+0x274>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e079      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	220c      	movs	r2, #12
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d1ef      	bne.n	80016ce <HAL_RCC_ClockConfig+0x15e>
 80016ee:	e00e      	b.n	800170e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f0:	f7ff f8ec 	bl	80008cc <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <HAL_RCC_ClockConfig+0x274>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e068      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	220c      	movs	r2, #12
 800170a:	4013      	ands	r3, r2
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_ClockConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2201      	movs	r2, #1
 8001714:	4013      	ands	r3, r2
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d21e      	bcs.n	800175a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_RCC_ClockConfig+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4393      	bics	r3, r2
 8001724:	0019      	movs	r1, r3
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_RCC_ClockConfig+0x270>)
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800172e:	f7ff f8cd 	bl	80008cc <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	e009      	b.n	800174c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff f8c8 	bl	80008cc <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <HAL_RCC_ClockConfig+0x274>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e044      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_ClockConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d1ee      	bne.n	8001738 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2204      	movs	r2, #4
 8001760:	4013      	ands	r3, r2
 8001762:	d009      	beq.n	8001778 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <HAL_RCC_ClockConfig+0x27c>)
 800176a:	4013      	ands	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001774:	430a      	orrs	r2, r1
 8001776:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2208      	movs	r2, #8
 800177e:	4013      	ands	r3, r2
 8001780:	d00a      	beq.n	8001798 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_RCC_ClockConfig+0x280>)
 8001788:	4013      	ands	r3, r2
 800178a:	0019      	movs	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	00da      	lsls	r2, r3, #3
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001798:	f000 f832 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 800179c:	0001      	movs	r1, r0
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_RCC_ClockConfig+0x278>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	220f      	movs	r2, #15
 80017a6:	4013      	ands	r3, r2
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <HAL_RCC_ClockConfig+0x284>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	000a      	movs	r2, r1
 80017ae:	40da      	lsrs	r2, r3
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_RCC_ClockConfig+0x288>)
 80017b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_RCC_ClockConfig+0x28c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	250b      	movs	r5, #11
 80017ba:	197c      	adds	r4, r7, r5
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff f83f 	bl	8000840 <HAL_InitTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017c6:	197b      	adds	r3, r7, r5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80017ce:	197b      	adds	r3, r7, r5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b004      	add	sp, #16
 80017dc:	bdb0      	pop	{r4, r5, r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	40022000 	.word	0x40022000
 80017e4:	00001388 	.word	0x00001388
 80017e8:	40021000 	.word	0x40021000
 80017ec:	fffff8ff 	.word	0xfffff8ff
 80017f0:	ffffc7ff 	.word	0xffffc7ff
 80017f4:	08003414 	.word	0x08003414
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b08e      	sub	sp, #56	; 0x38
 8001804:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001806:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_GetSysClockFreq+0x138>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800180c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180e:	230c      	movs	r3, #12
 8001810:	4013      	ands	r3, r2
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d014      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x40>
 8001816:	d900      	bls.n	800181a <HAL_RCC_GetSysClockFreq+0x1a>
 8001818:	e07b      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x112>
 800181a:	2b04      	cmp	r3, #4
 800181c:	d002      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x24>
 800181e:	2b08      	cmp	r3, #8
 8001820:	d00b      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x3a>
 8001822:	e076      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001824:	4b44      	ldr	r3, [pc, #272]	; (8001938 <HAL_RCC_GetSysClockFreq+0x138>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2210      	movs	r2, #16
 800182a:	4013      	ands	r3, r2
 800182c:	d002      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001832:	e07c      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <HAL_RCC_GetSysClockFreq+0x140>)
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001838:	e079      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800183a:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_RCC_GetSysClockFreq+0x144>)
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800183e:	e076      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	0c9a      	lsrs	r2, r3, #18
 8001844:	230f      	movs	r3, #15
 8001846:	401a      	ands	r2, r3
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_GetSysClockFreq+0x148>)
 800184a:	5c9b      	ldrb	r3, [r3, r2]
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	0d9a      	lsrs	r2, r3, #22
 8001852:	2303      	movs	r3, #3
 8001854:	4013      	ands	r3, r2
 8001856:	3301      	adds	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_GetSysClockFreq+0x138>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	4013      	ands	r3, r2
 8001864:	d01a      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	4a35      	ldr	r2, [pc, #212]	; (8001944 <HAL_RCC_GetSysClockFreq+0x144>)
 8001870:	2300      	movs	r3, #0
 8001872:	69b8      	ldr	r0, [r7, #24]
 8001874:	69f9      	ldr	r1, [r7, #28]
 8001876:	f7fe fcf3 	bl	8000260 <__aeabi_lmul>
 800187a:	0002      	movs	r2, r0
 800187c:	000b      	movs	r3, r1
 800187e:	0010      	movs	r0, r2
 8001880:	0019      	movs	r1, r3
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f7fe fcc7 	bl	8000220 <__aeabi_uldivmod>
 8001892:	0002      	movs	r2, r0
 8001894:	000b      	movs	r3, r1
 8001896:	0013      	movs	r3, r2
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
 800189a:	e037      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_GetSysClockFreq+0x138>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2210      	movs	r2, #16
 80018a2:	4013      	ands	r3, r2
 80018a4:	d01a      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_RCC_GetSysClockFreq+0x13c>)
 80018b0:	2300      	movs	r3, #0
 80018b2:	68b8      	ldr	r0, [r7, #8]
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	f7fe fcd3 	bl	8000260 <__aeabi_lmul>
 80018ba:	0002      	movs	r2, r0
 80018bc:	000b      	movs	r3, r1
 80018be:	0010      	movs	r0, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f7fe fca7 	bl	8000220 <__aeabi_uldivmod>
 80018d2:	0002      	movs	r2, r0
 80018d4:	000b      	movs	r3, r1
 80018d6:	0013      	movs	r3, r2
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
 80018da:	e017      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	0018      	movs	r0, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	0019      	movs	r1, r3
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <HAL_RCC_GetSysClockFreq+0x140>)
 80018e6:	2300      	movs	r3, #0
 80018e8:	f7fe fcba 	bl	8000260 <__aeabi_lmul>
 80018ec:	0002      	movs	r2, r0
 80018ee:	000b      	movs	r3, r1
 80018f0:	0010      	movs	r0, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	001c      	movs	r4, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	001d      	movs	r5, r3
 80018fc:	0022      	movs	r2, r4
 80018fe:	002b      	movs	r3, r5
 8001900:	f7fe fc8e 	bl	8000220 <__aeabi_uldivmod>
 8001904:	0002      	movs	r2, r0
 8001906:	000b      	movs	r3, r1
 8001908:	0013      	movs	r3, r2
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001910:	e00d      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_GetSysClockFreq+0x138>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0b5b      	lsrs	r3, r3, #13
 8001918:	2207      	movs	r2, #7
 800191a:	4013      	ands	r3, r2
 800191c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	3301      	adds	r3, #1
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	0212      	lsls	r2, r2, #8
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800192c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b00e      	add	sp, #56	; 0x38
 8001936:	bdb0      	pop	{r4, r5, r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	003d0900 	.word	0x003d0900
 8001940:	00f42400 	.word	0x00f42400
 8001944:	007a1200 	.word	0x007a1200
 8001948:	0800342c 	.word	0x0800342c

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b02      	ldr	r3, [pc, #8]	; (800195c <HAL_RCC_GetHCLKFreq+0x10>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	20000000 	.word	0x20000000

08001960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001964:	f7ff fff2 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001968:	0001      	movs	r1, r0
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	2207      	movs	r2, #7
 8001972:	4013      	ands	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	40d9      	lsrs	r1, r3
 800197a:	000b      	movs	r3, r1
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	40021000 	.word	0x40021000
 8001988:	08003424 	.word	0x08003424

0800198c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001990:	f7ff ffdc 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001994:	0001      	movs	r1, r0
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	0adb      	lsrs	r3, r3, #11
 800199c:	2207      	movs	r2, #7
 800199e:	4013      	ands	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	40d9      	lsrs	r1, r3
 80019a6:	000b      	movs	r3, r1
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08003424 	.word	0x08003424

080019b8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80019c0:	2017      	movs	r0, #23
 80019c2:	183b      	adds	r3, r7, r0
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2220      	movs	r2, #32
 80019ce:	4013      	ands	r3, r2
 80019d0:	d100      	bne.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80019d2:	e0c2      	b.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d4:	4b81      	ldr	r3, [pc, #516]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	055b      	lsls	r3, r3, #21
 80019dc:	4013      	ands	r3, r2
 80019de:	d109      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	4b7e      	ldr	r3, [pc, #504]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e4:	4b7d      	ldr	r3, [pc, #500]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80019e6:	2180      	movs	r1, #128	; 0x80
 80019e8:	0549      	lsls	r1, r1, #21
 80019ea:	430a      	orrs	r2, r1
 80019ec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80019ee:	183b      	adds	r3, r7, r0
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	d11a      	bne.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a00:	4b77      	ldr	r3, [pc, #476]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0049      	lsls	r1, r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0e:	f7fe ff5d 	bl	80008cc <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	e008      	b.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a18:	f7fe ff58 	bl	80008cc <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0d4      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a36:	4b69      	ldr	r3, [pc, #420]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	23c0      	movs	r3, #192	; 0xc0
 8001a3c:	039b      	lsls	r3, r3, #14
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	23c0      	movs	r3, #192	; 0xc0
 8001a48:	039b      	lsls	r3, r3, #14
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d013      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	23c0      	movs	r3, #192	; 0xc0
 8001a58:	029b      	lsls	r3, r3, #10
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	23c0      	movs	r3, #192	; 0xc0
 8001a5e:	029b      	lsls	r3, r3, #10
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d10a      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001a64:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d101      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0ac      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001a7a:	4b58      	ldr	r3, [pc, #352]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	029b      	lsls	r3, r3, #10
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03b      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	23c0      	movs	r3, #192	; 0xc0
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4013      	ands	r3, r2
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d033      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d02e      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aaa:	4a4e      	ldr	r2, [pc, #312]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ab0:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab4:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0309      	lsls	r1, r1, #12
 8001aba:	430a      	orrs	r2, r1
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac2:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ac4:	4948      	ldr	r1, [pc, #288]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001aca:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d014      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7fe fef7 	bl	80008cc <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae2:	e009      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7fe fef2 	bl	80008cc <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a3f      	ldr	r2, [pc, #252]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e06d      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	d0ef      	beq.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	23c0      	movs	r3, #192	; 0xc0
 8001b0a:	029b      	lsls	r3, r3, #10
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	23c0      	movs	r3, #192	; 0xc0
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001b16:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	039b      	lsls	r3, r3, #14
 8001b28:	401a      	ands	r2, r3
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b32:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	23c0      	movs	r3, #192	; 0xc0
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b44:	2317      	movs	r3, #23
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b54:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d009      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	220c      	movs	r2, #12
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b74:	430a      	orrs	r2, r1
 8001b76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d009      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b006      	add	sp, #24
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40007000 	.word	0x40007000
 8001be4:	fffcffff 	.word	0xfffcffff
 8001be8:	fff7ffff 	.word	0xfff7ffff
 8001bec:	00001388 	.word	0x00001388
 8001bf0:	ffcfffff 	.word	0xffcfffff
 8001bf4:	efffffff 	.word	0xefffffff
 8001bf8:	fffff3ff 	.word	0xfffff3ff
 8001bfc:	ffffcfff 	.word	0xffffcfff
 8001c00:	fff3ffff 	.word	0xfff3ffff

08001c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e044      	b.n	8001ca0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2274      	movs	r2, #116	; 0x74
 8001c22:	2100      	movs	r1, #0
 8001c24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7fe fd31 	bl	8000690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2224      	movs	r2, #36	; 0x24
 8001c32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	438a      	bics	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 fc0e 	bl	8002468 <UART_SetConfig>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e024      	b.n	8001ca0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 fe63 	bl	800292c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <HAL_UART_Init+0xa4>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	212a      	movs	r1, #42	; 0x2a
 8001c82:	438a      	bics	r2, r1
 8001c84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f000 fefb 	bl	8002a94 <UART_CheckIdleState>
 8001c9e:	0003      	movs	r3, r0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	ffffb7ff 	.word	0xffffb7ff

08001cac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d000      	beq.n	8001cc4 <HAL_UART_Transmit_IT+0x18>
 8001cc2:	e06a      	b.n	8001d9a <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_UART_Transmit_IT+0x26>
 8001cca:	1dbb      	adds	r3, r7, #6
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e062      	b.n	8001d9c <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d109      	bne.n	8001cf6 <HAL_UART_Transmit_IT+0x4a>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d001      	beq.n	8001cf6 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e052      	b.n	8001d9c <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2274      	movs	r2, #116	; 0x74
 8001cfa:	5c9b      	ldrb	r3, [r3, r2]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_UART_Transmit_IT+0x58>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e04b      	b.n	8001d9c <HAL_UART_Transmit_IT+0xf0>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2274      	movs	r2, #116	; 0x74
 8001d08:	2101      	movs	r1, #1
 8001d0a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1dba      	adds	r2, r7, #6
 8001d16:	2150      	movs	r1, #80	; 0x50
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1dba      	adds	r2, r7, #6
 8001d20:	2152      	movs	r1, #82	; 0x52
 8001d22:	8812      	ldrh	r2, [r2, #0]
 8001d24:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	2100      	movs	r1, #0
 8001d32:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2221      	movs	r2, #33	; 0x21
 8001d38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	015b      	lsls	r3, r3, #5
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d107      	bne.n	8001d56 <HAL_UART_Transmit_IT+0xaa>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_UART_Transmit_IT+0xf8>)
 8001d52:	669a      	str	r2, [r3, #104]	; 0x68
 8001d54:	e002      	b.n	8001d5c <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_UART_Transmit_IT+0xfc>)
 8001d5a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2274      	movs	r2, #116	; 0x74
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d64:	f3ef 8310 	mrs	r3, PRIMASK
 8001d68:	613b      	str	r3, [r7, #16]
  return(result);
 8001d6a:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f383 8810 	msr	PRIMASK, r3
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f383 8810 	msr	PRIMASK, r3
}
 8001d94:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
  }
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b008      	add	sp, #32
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	08002fb1 	.word	0x08002fb1
 8001da8:	08002eff 	.word	0x08002eff

08001dac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	1dbb      	adds	r3, r7, #6
 8001db8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d155      	bne.n	8001e6e <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_UART_Receive_IT+0x24>
 8001dc8:	1dbb      	adds	r3, r7, #6
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e04d      	b.n	8001e70 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	015b      	lsls	r3, r3, #5
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d109      	bne.n	8001df4 <HAL_UART_Receive_IT+0x48>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d001      	beq.n	8001df4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e03d      	b.n	8001e70 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2274      	movs	r2, #116	; 0x74
 8001df8:	5c9b      	ldrb	r3, [r3, r2]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Receive_IT+0x56>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e036      	b.n	8001e70 <HAL_UART_Receive_IT+0xc4>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2274      	movs	r2, #116	; 0x74
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_UART_Receive_IT+0xcc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d020      	beq.n	8001e5c <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	4013      	ands	r3, r2
 8001e26:	d019      	beq.n	8001e5c <HAL_UART_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e28:	f3ef 8310 	mrs	r3, PRIMASK
 8001e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8001e2e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	2301      	movs	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f383 8810 	msr	PRIMASK, r3
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	04c9      	lsls	r1, r1, #19
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f383 8810 	msr	PRIMASK, r3
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e5c:	1dbb      	adds	r3, r7, #6
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f000 ff21 	bl	8002cac <UART_Start_Receive_IT>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	e000      	b.n	8001e70 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
  }
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b008      	add	sp, #32
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40004800 	.word	0x40004800

08001e7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b0ab      	sub	sp, #172	; 0xac
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	22a4      	movs	r2, #164	; 0xa4
 8001e8c:	18b9      	adds	r1, r7, r2
 8001e8e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	20a0      	movs	r0, #160	; 0xa0
 8001e98:	1839      	adds	r1, r7, r0
 8001e9a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	219c      	movs	r1, #156	; 0x9c
 8001ea4:	1879      	adds	r1, r7, r1
 8001ea6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001ea8:	0011      	movs	r1, r2
 8001eaa:	18bb      	adds	r3, r7, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a99      	ldr	r2, [pc, #612]	; (8002114 <HAL_UART_IRQHandler+0x298>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2298      	movs	r2, #152	; 0x98
 8001eb4:	18bc      	adds	r4, r7, r2
 8001eb6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001eb8:	18bb      	adds	r3, r7, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d114      	bne.n	8001eea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d00f      	beq.n	8001eea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001eca:	183b      	adds	r3, r7, r0
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d00a      	beq.n	8001eea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d100      	bne.n	8001ede <HAL_UART_IRQHandler+0x62>
 8001edc:	e298      	b.n	8002410 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	0010      	movs	r0, r2
 8001ee6:	4798      	blx	r3
      }
      return;
 8001ee8:	e292      	b.n	8002410 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001eea:	2398      	movs	r3, #152	; 0x98
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d100      	bne.n	8001ef6 <HAL_UART_IRQHandler+0x7a>
 8001ef4:	e114      	b.n	8002120 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001ef6:	239c      	movs	r3, #156	; 0x9c
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	d106      	bne.n	8001f10 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001f02:	23a0      	movs	r3, #160	; 0xa0
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a83      	ldr	r2, [pc, #524]	; (8002118 <HAL_UART_IRQHandler+0x29c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d100      	bne.n	8001f10 <HAL_UART_IRQHandler+0x94>
 8001f0e:	e107      	b.n	8002120 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f10:	23a4      	movs	r3, #164	; 0xa4
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2201      	movs	r2, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d012      	beq.n	8001f42 <HAL_UART_IRQHandler+0xc6>
 8001f1c:	23a0      	movs	r3, #160	; 0xa0
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	589b      	ldr	r3, [r3, r2]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f42:	23a4      	movs	r3, #164	; 0xa4
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d011      	beq.n	8001f72 <HAL_UART_IRQHandler+0xf6>
 8001f4e:	239c      	movs	r3, #156	; 0x9c
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	d00b      	beq.n	8001f72 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	589b      	ldr	r3, [r3, r2]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f72:	23a4      	movs	r3, #164	; 0xa4
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d011      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x126>
 8001f7e:	239c      	movs	r3, #156	; 0x9c
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	589b      	ldr	r3, [r3, r2]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001fa2:	23a4      	movs	r3, #164	; 0xa4
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	4013      	ands	r3, r2
 8001fac:	d017      	beq.n	8001fde <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001fae:	23a0      	movs	r3, #160	; 0xa0
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d105      	bne.n	8001fc6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001fba:	239c      	movs	r3, #156	; 0x9c
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001fc4:	d00b      	beq.n	8001fde <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2208      	movs	r2, #8
 8001fcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	589b      	ldr	r3, [r3, r2]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fde:	23a4      	movs	r3, #164	; 0xa4
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d013      	beq.n	8002014 <HAL_UART_IRQHandler+0x198>
 8001fec:	23a0      	movs	r3, #160	; 0xa0
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	04db      	lsls	r3, r3, #19
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d00c      	beq.n	8002014 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	589b      	ldr	r3, [r3, r2]
 800200a:	2220      	movs	r2, #32
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	589b      	ldr	r3, [r3, r2]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d100      	bne.n	8002020 <HAL_UART_IRQHandler+0x1a4>
 800201e:	e1f9      	b.n	8002414 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002020:	23a4      	movs	r3, #164	; 0xa4
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2220      	movs	r2, #32
 8002028:	4013      	ands	r3, r2
 800202a:	d00e      	beq.n	800204a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800202c:	23a0      	movs	r3, #160	; 0xa0
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2220      	movs	r2, #32
 8002034:	4013      	ands	r3, r2
 8002036:	d008      	beq.n	800204a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	0010      	movs	r0, r2
 8002048:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	589b      	ldr	r3, [r3, r2]
 8002050:	2194      	movs	r1, #148	; 0x94
 8002052:	187a      	adds	r2, r7, r1
 8002054:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	4013      	ands	r3, r2
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d004      	beq.n	800206e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002064:	187b      	adds	r3, r7, r1
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2228      	movs	r2, #40	; 0x28
 800206a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800206c:	d047      	beq.n	80020fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 fecb 	bl	8002e0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2240      	movs	r2, #64	; 0x40
 800207e:	4013      	ands	r3, r2
 8002080:	2b40      	cmp	r3, #64	; 0x40
 8002082:	d137      	bne.n	80020f4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002084:	f3ef 8310 	mrs	r3, PRIMASK
 8002088:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800208a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800208c:	2090      	movs	r0, #144	; 0x90
 800208e:	183a      	adds	r2, r7, r0
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002098:	f383 8810 	msr	PRIMASK, r3
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2140      	movs	r1, #64	; 0x40
 80020aa:	438a      	bics	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	183b      	adds	r3, r7, r0
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b6:	f383 8810 	msr	PRIMASK, r3
}
 80020ba:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d012      	beq.n	80020ea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_UART_IRQHandler+0x2a0>)
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe fd23 	bl	8000b1c <HAL_DMA_Abort_IT>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d01a      	beq.n	8002110 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	0018      	movs	r0, r3
 80020e6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e8:	e012      	b.n	8002110 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f9a7 	bl	8002440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f2:	e00d      	b.n	8002110 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 f9a2 	bl	8002440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020fc:	e008      	b.n	8002110 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f000 f99d 	bl	8002440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	2100      	movs	r1, #0
 800210c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800210e:	e181      	b.n	8002414 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002110:	46c0      	nop			; (mov r8, r8)
    return;
 8002112:	e17f      	b.n	8002414 <HAL_UART_IRQHandler+0x598>
 8002114:	0000080f 	.word	0x0000080f
 8002118:	04000120 	.word	0x04000120
 800211c:	08002ed1 	.word	0x08002ed1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002124:	2b01      	cmp	r3, #1
 8002126:	d000      	beq.n	800212a <HAL_UART_IRQHandler+0x2ae>
 8002128:	e133      	b.n	8002392 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800212a:	23a4      	movs	r3, #164	; 0xa4
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2210      	movs	r2, #16
 8002132:	4013      	ands	r3, r2
 8002134:	d100      	bne.n	8002138 <HAL_UART_IRQHandler+0x2bc>
 8002136:	e12c      	b.n	8002392 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002138:	23a0      	movs	r3, #160	; 0xa0
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2210      	movs	r2, #16
 8002140:	4013      	ands	r3, r2
 8002142:	d100      	bne.n	8002146 <HAL_UART_IRQHandler+0x2ca>
 8002144:	e125      	b.n	8002392 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2210      	movs	r2, #16
 800214c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2240      	movs	r2, #64	; 0x40
 8002156:	4013      	ands	r3, r2
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d000      	beq.n	800215e <HAL_UART_IRQHandler+0x2e2>
 800215c:	e09d      	b.n	800229a <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	217e      	movs	r1, #126	; 0x7e
 8002168:	187b      	adds	r3, r7, r1
 800216a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800216c:	187b      	adds	r3, r7, r1
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d100      	bne.n	8002176 <HAL_UART_IRQHandler+0x2fa>
 8002174:	e150      	b.n	8002418 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2258      	movs	r2, #88	; 0x58
 800217a:	5a9b      	ldrh	r3, [r3, r2]
 800217c:	187a      	adds	r2, r7, r1
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d300      	bcc.n	8002186 <HAL_UART_IRQHandler+0x30a>
 8002184:	e148      	b.n	8002418 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	187a      	adds	r2, r7, r1
 800218a:	215a      	movs	r1, #90	; 0x5a
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2220      	movs	r2, #32
 800219a:	4013      	ands	r3, r2
 800219c:	d16e      	bne.n	800227c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219e:	f3ef 8310 	mrs	r3, PRIMASK
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80021a8:	2301      	movs	r3, #1
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	f383 8810 	msr	PRIMASK, r3
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	499a      	ldr	r1, [pc, #616]	; (8002428 <HAL_UART_IRQHandler+0x5ac>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ca:	f383 8810 	msr	PRIMASK, r3
}
 80021ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d0:	f3ef 8310 	mrs	r3, PRIMASK
 80021d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80021d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d8:	677b      	str	r3, [r7, #116]	; 0x74
 80021da:	2301      	movs	r3, #1
 80021dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e0:	f383 8810 	msr	PRIMASK, r3
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	438a      	bics	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fc:	f383 8810 	msr	PRIMASK, r3
}
 8002200:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002202:	f3ef 8310 	mrs	r3, PRIMASK
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002208:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800220a:	673b      	str	r3, [r7, #112]	; 0x70
 800220c:	2301      	movs	r3, #1
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002212:	f383 8810 	msr	PRIMASK, r3
}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2140      	movs	r1, #64	; 0x40
 8002224:	438a      	bics	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800222a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800222e:	f383 8810 	msr	PRIMASK, r3
}
 8002232:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002240:	f3ef 8310 	mrs	r3, PRIMASK
 8002244:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002246:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800224a:	2301      	movs	r3, #1
 800224c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002250:	f383 8810 	msr	PRIMASK, r3
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2110      	movs	r1, #16
 8002262:	438a      	bics	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002268:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226c:	f383 8810 	msr	PRIMASK, r3
}
 8002270:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	0018      	movs	r0, r3
 8002278:	f7fe fc10 	bl	8000a9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2258      	movs	r2, #88	; 0x58
 8002280:	5a9a      	ldrh	r2, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	215a      	movs	r1, #90	; 0x5a
 8002286:	5a5b      	ldrh	r3, [r3, r1]
 8002288:	b29b      	uxth	r3, r3
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0011      	movs	r1, r2
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f8dc 	bl	8002450 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002298:	e0be      	b.n	8002418 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2258      	movs	r2, #88	; 0x58
 800229e:	5a99      	ldrh	r1, [r3, r2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	225a      	movs	r2, #90	; 0x5a
 80022a4:	5a9b      	ldrh	r3, [r3, r2]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	208e      	movs	r0, #142	; 0x8e
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	1a8a      	subs	r2, r1, r2
 80022ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	225a      	movs	r2, #90	; 0x5a
 80022b4:	5a9b      	ldrh	r3, [r3, r2]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d100      	bne.n	80022be <HAL_UART_IRQHandler+0x442>
 80022bc:	e0ae      	b.n	800241c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d100      	bne.n	80022c8 <HAL_UART_IRQHandler+0x44c>
 80022c6:	e0a9      	b.n	800241c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022c8:	f3ef 8310 	mrs	r3, PRIMASK
 80022cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80022ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022d0:	2488      	movs	r4, #136	; 0x88
 80022d2:	193a      	adds	r2, r7, r4
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f383 8810 	msr	PRIMASK, r3
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	494f      	ldr	r1, [pc, #316]	; (800242c <HAL_UART_IRQHandler+0x5b0>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f383 8810 	msr	PRIMASK, r3
}
 80022fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002300:	f3ef 8310 	mrs	r3, PRIMASK
 8002304:	61bb      	str	r3, [r7, #24]
  return(result);
 8002306:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002308:	2484      	movs	r4, #132	; 0x84
 800230a:	193a      	adds	r2, r7, r4
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f383 8810 	msr	PRIMASK, r3
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	438a      	bics	r2, r1
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	193b      	adds	r3, r7, r4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f383 8810 	msr	PRIMASK, r3
}
 8002336:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800234a:	f3ef 8310 	mrs	r3, PRIMASK
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002352:	2480      	movs	r4, #128	; 0x80
 8002354:	193a      	adds	r2, r7, r4
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	2301      	movs	r3, #1
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	f383 8810 	msr	PRIMASK, r3
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2110      	movs	r1, #16
 8002370:	438a      	bics	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	193b      	adds	r3, r7, r4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	f383 8810 	msr	PRIMASK, r3
}
 8002380:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002382:	183b      	adds	r3, r7, r0
 8002384:	881a      	ldrh	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0011      	movs	r1, r2
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f860 	bl	8002450 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002390:	e044      	b.n	800241c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002392:	23a4      	movs	r3, #164	; 0xa4
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	035b      	lsls	r3, r3, #13
 800239c:	4013      	ands	r3, r2
 800239e:	d010      	beq.n	80023c2 <HAL_UART_IRQHandler+0x546>
 80023a0:	239c      	movs	r3, #156	; 0x9c
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	03db      	lsls	r3, r3, #15
 80023aa:	4013      	ands	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0352      	lsls	r2, r2, #13
 80023b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 ffea 	bl	8003394 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023c0:	e02f      	b.n	8002422 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80023c2:	23a4      	movs	r3, #164	; 0xa4
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	4013      	ands	r3, r2
 80023cc:	d00f      	beq.n	80023ee <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80023ce:	23a0      	movs	r3, #160	; 0xa0
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	4013      	ands	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01e      	beq.n	8002420 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	0010      	movs	r0, r2
 80023ea:	4798      	blx	r3
    }
    return;
 80023ec:	e018      	b.n	8002420 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80023ee:	23a4      	movs	r3, #164	; 0xa4
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	4013      	ands	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_UART_IRQHandler+0x5a6>
 80023fa:	23a0      	movs	r3, #160	; 0xa0
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2240      	movs	r2, #64	; 0x40
 8002402:	4013      	ands	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fe2f 	bl	800306c <UART_EndTransmit_IT>
    return;
 800240e:	e008      	b.n	8002422 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	e006      	b.n	8002422 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	e004      	b.n	8002422 <HAL_UART_IRQHandler+0x5a6>
      return;
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	e002      	b.n	8002422 <HAL_UART_IRQHandler+0x5a6>
      return;
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	e000      	b.n	8002422 <HAL_UART_IRQHandler+0x5a6>
    return;
 8002420:	46c0      	nop			; (mov r8, r8)
  }

}
 8002422:	46bd      	mov	sp, r7
 8002424:	b02b      	add	sp, #172	; 0xac
 8002426:	bd90      	pop	{r4, r7, pc}
 8002428:	fffffeff 	.word	0xfffffeff
 800242c:	fffffedf 	.word	0xfffffedf

08002430 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	000a      	movs	r2, r1
 800245a:	1cbb      	adds	r3, r7, #2
 800245c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002470:	231a      	movs	r3, #26
 8002472:	2218      	movs	r2, #24
 8002474:	4694      	mov	ip, r2
 8002476:	44bc      	add	ip, r7
 8002478:	4463      	add	r3, ip
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	431a      	orrs	r2, r3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	431a      	orrs	r2, r3
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4313      	orrs	r3, r2
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4abc      	ldr	r2, [pc, #752]	; (8002790 <UART_SetConfig+0x328>)
 800249e:	4013      	ands	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4ab8      	ldr	r2, [pc, #736]	; (8002794 <UART_SetConfig+0x32c>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4ab2      	ldr	r2, [pc, #712]	; (8002798 <UART_SetConfig+0x330>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024da:	4313      	orrs	r3, r2
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4aad      	ldr	r2, [pc, #692]	; (800279c <UART_SetConfig+0x334>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f0:	430a      	orrs	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4aa9      	ldr	r2, [pc, #676]	; (80027a0 <UART_SetConfig+0x338>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d136      	bne.n	800256c <UART_SetConfig+0x104>
 80024fe:	4ba9      	ldr	r3, [pc, #676]	; (80027a4 <UART_SetConfig+0x33c>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	220c      	movs	r2, #12
 8002504:	4013      	ands	r3, r2
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d020      	beq.n	800254c <UART_SetConfig+0xe4>
 800250a:	d827      	bhi.n	800255c <UART_SetConfig+0xf4>
 800250c:	2b08      	cmp	r3, #8
 800250e:	d00d      	beq.n	800252c <UART_SetConfig+0xc4>
 8002510:	d824      	bhi.n	800255c <UART_SetConfig+0xf4>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <UART_SetConfig+0xb4>
 8002516:	2b04      	cmp	r3, #4
 8002518:	d010      	beq.n	800253c <UART_SetConfig+0xd4>
 800251a:	e01f      	b.n	800255c <UART_SetConfig+0xf4>
 800251c:	231b      	movs	r3, #27
 800251e:	2218      	movs	r2, #24
 8002520:	4694      	mov	ip, r2
 8002522:	44bc      	add	ip, r7
 8002524:	4463      	add	r3, ip
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	e06f      	b.n	800260c <UART_SetConfig+0x1a4>
 800252c:	231b      	movs	r3, #27
 800252e:	2218      	movs	r2, #24
 8002530:	4694      	mov	ip, r2
 8002532:	44bc      	add	ip, r7
 8002534:	4463      	add	r3, ip
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e067      	b.n	800260c <UART_SetConfig+0x1a4>
 800253c:	231b      	movs	r3, #27
 800253e:	2218      	movs	r2, #24
 8002540:	4694      	mov	ip, r2
 8002542:	44bc      	add	ip, r7
 8002544:	4463      	add	r3, ip
 8002546:	2204      	movs	r2, #4
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e05f      	b.n	800260c <UART_SetConfig+0x1a4>
 800254c:	231b      	movs	r3, #27
 800254e:	2218      	movs	r2, #24
 8002550:	4694      	mov	ip, r2
 8002552:	44bc      	add	ip, r7
 8002554:	4463      	add	r3, ip
 8002556:	2208      	movs	r2, #8
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e057      	b.n	800260c <UART_SetConfig+0x1a4>
 800255c:	231b      	movs	r3, #27
 800255e:	2218      	movs	r2, #24
 8002560:	4694      	mov	ip, r2
 8002562:	44bc      	add	ip, r7
 8002564:	4463      	add	r3, ip
 8002566:	2210      	movs	r2, #16
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e04f      	b.n	800260c <UART_SetConfig+0x1a4>
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a89      	ldr	r2, [pc, #548]	; (8002798 <UART_SetConfig+0x330>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d143      	bne.n	80025fe <UART_SetConfig+0x196>
 8002576:	4b8b      	ldr	r3, [pc, #556]	; (80027a4 <UART_SetConfig+0x33c>)
 8002578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800257a:	23c0      	movs	r3, #192	; 0xc0
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4013      	ands	r3, r2
 8002580:	22c0      	movs	r2, #192	; 0xc0
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	4293      	cmp	r3, r2
 8002586:	d02a      	beq.n	80025de <UART_SetConfig+0x176>
 8002588:	22c0      	movs	r2, #192	; 0xc0
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	4293      	cmp	r3, r2
 800258e:	d82e      	bhi.n	80025ee <UART_SetConfig+0x186>
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	4293      	cmp	r3, r2
 8002596:	d012      	beq.n	80025be <UART_SetConfig+0x156>
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	4293      	cmp	r3, r2
 800259e:	d826      	bhi.n	80025ee <UART_SetConfig+0x186>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <UART_SetConfig+0x146>
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	00d2      	lsls	r2, r2, #3
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d010      	beq.n	80025ce <UART_SetConfig+0x166>
 80025ac:	e01f      	b.n	80025ee <UART_SetConfig+0x186>
 80025ae:	231b      	movs	r3, #27
 80025b0:	2218      	movs	r2, #24
 80025b2:	4694      	mov	ip, r2
 80025b4:	44bc      	add	ip, r7
 80025b6:	4463      	add	r3, ip
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e026      	b.n	800260c <UART_SetConfig+0x1a4>
 80025be:	231b      	movs	r3, #27
 80025c0:	2218      	movs	r2, #24
 80025c2:	4694      	mov	ip, r2
 80025c4:	44bc      	add	ip, r7
 80025c6:	4463      	add	r3, ip
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e01e      	b.n	800260c <UART_SetConfig+0x1a4>
 80025ce:	231b      	movs	r3, #27
 80025d0:	2218      	movs	r2, #24
 80025d2:	4694      	mov	ip, r2
 80025d4:	44bc      	add	ip, r7
 80025d6:	4463      	add	r3, ip
 80025d8:	2204      	movs	r2, #4
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e016      	b.n	800260c <UART_SetConfig+0x1a4>
 80025de:	231b      	movs	r3, #27
 80025e0:	2218      	movs	r2, #24
 80025e2:	4694      	mov	ip, r2
 80025e4:	44bc      	add	ip, r7
 80025e6:	4463      	add	r3, ip
 80025e8:	2208      	movs	r2, #8
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e00e      	b.n	800260c <UART_SetConfig+0x1a4>
 80025ee:	231b      	movs	r3, #27
 80025f0:	2218      	movs	r2, #24
 80025f2:	4694      	mov	ip, r2
 80025f4:	44bc      	add	ip, r7
 80025f6:	4463      	add	r3, ip
 80025f8:	2210      	movs	r2, #16
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e006      	b.n	800260c <UART_SetConfig+0x1a4>
 80025fe:	231b      	movs	r3, #27
 8002600:	2218      	movs	r2, #24
 8002602:	4694      	mov	ip, r2
 8002604:	44bc      	add	ip, r7
 8002606:	4463      	add	r3, ip
 8002608:	2210      	movs	r2, #16
 800260a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a61      	ldr	r2, [pc, #388]	; (8002798 <UART_SetConfig+0x330>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d000      	beq.n	8002618 <UART_SetConfig+0x1b0>
 8002616:	e088      	b.n	800272a <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002618:	231b      	movs	r3, #27
 800261a:	2218      	movs	r2, #24
 800261c:	4694      	mov	ip, r2
 800261e:	44bc      	add	ip, r7
 8002620:	4463      	add	r3, ip
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d01d      	beq.n	8002664 <UART_SetConfig+0x1fc>
 8002628:	dc20      	bgt.n	800266c <UART_SetConfig+0x204>
 800262a:	2b04      	cmp	r3, #4
 800262c:	d015      	beq.n	800265a <UART_SetConfig+0x1f2>
 800262e:	dc1d      	bgt.n	800266c <UART_SetConfig+0x204>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <UART_SetConfig+0x1d2>
 8002634:	2b02      	cmp	r3, #2
 8002636:	d005      	beq.n	8002644 <UART_SetConfig+0x1dc>
 8002638:	e018      	b.n	800266c <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800263a:	f7ff f991 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 800263e:	0003      	movs	r3, r0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002642:	e01d      	b.n	8002680 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002644:	4b57      	ldr	r3, [pc, #348]	; (80027a4 <UART_SetConfig+0x33c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2210      	movs	r2, #16
 800264a:	4013      	ands	r3, r2
 800264c:	d002      	beq.n	8002654 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800264e:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <UART_SetConfig+0x340>)
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002652:	e015      	b.n	8002680 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002654:	4b55      	ldr	r3, [pc, #340]	; (80027ac <UART_SetConfig+0x344>)
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002658:	e012      	b.n	8002680 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800265a:	f7ff f8d1 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 800265e:	0003      	movs	r3, r0
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002662:	e00d      	b.n	8002680 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800266a:	e009      	b.n	8002680 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002670:	231a      	movs	r3, #26
 8002672:	2218      	movs	r2, #24
 8002674:	4694      	mov	ip, r2
 8002676:	44bc      	add	ip, r7
 8002678:	4463      	add	r3, ip
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
        break;
 800267e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d100      	bne.n	8002688 <UART_SetConfig+0x220>
 8002686:	e139      	b.n	80028fc <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	0013      	movs	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	189b      	adds	r3, r3, r2
 8002692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002694:	429a      	cmp	r2, r3
 8002696:	d305      	bcc.n	80026a4 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800269e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d907      	bls.n	80026b4 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80026a4:	231a      	movs	r3, #26
 80026a6:	2218      	movs	r2, #24
 80026a8:	4694      	mov	ip, r2
 80026aa:	44bc      	add	ip, r7
 80026ac:	4463      	add	r3, ip
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e123      	b.n	80028fc <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	6939      	ldr	r1, [r7, #16]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	000b      	movs	r3, r1
 80026c2:	0e1b      	lsrs	r3, r3, #24
 80026c4:	0010      	movs	r0, r2
 80026c6:	0205      	lsls	r5, r0, #8
 80026c8:	431d      	orrs	r5, r3
 80026ca:	000b      	movs	r3, r1
 80026cc:	021c      	lsls	r4, r3, #8
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68b8      	ldr	r0, [r7, #8]
 80026dc:	68f9      	ldr	r1, [r7, #12]
 80026de:	1900      	adds	r0, r0, r4
 80026e0:	4169      	adcs	r1, r5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	2300      	movs	r3, #0
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f7fd fd96 	bl	8000220 <__aeabi_uldivmod>
 80026f4:	0002      	movs	r2, r0
 80026f6:	000b      	movs	r3, r1
 80026f8:	0013      	movs	r3, r2
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026fe:	23c0      	movs	r3, #192	; 0xc0
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	429a      	cmp	r2, r3
 8002704:	d309      	bcc.n	800271a <UART_SetConfig+0x2b2>
 8002706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	035b      	lsls	r3, r3, #13
 800270c:	429a      	cmp	r2, r3
 800270e:	d204      	bcs.n	800271a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e0f0      	b.n	80028fc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800271a:	231a      	movs	r3, #26
 800271c:	2218      	movs	r2, #24
 800271e:	4694      	mov	ip, r2
 8002720:	44bc      	add	ip, r7
 8002722:	4463      	add	r3, ip
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e0e8      	b.n	80028fc <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	429a      	cmp	r2, r3
 8002734:	d000      	beq.n	8002738 <UART_SetConfig+0x2d0>
 8002736:	e087      	b.n	8002848 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002738:	231b      	movs	r3, #27
 800273a:	2218      	movs	r2, #24
 800273c:	4694      	mov	ip, r2
 800273e:	44bc      	add	ip, r7
 8002740:	4463      	add	r3, ip
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d835      	bhi.n	80027b4 <UART_SetConfig+0x34c>
 8002748:	009a      	lsls	r2, r3, #2
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <UART_SetConfig+0x348>)
 800274c:	18d3      	adds	r3, r2, r3
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002752:	f7ff f905 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8002756:	0003      	movs	r3, r0
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800275a:	e035      	b.n	80027c8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800275c:	f7ff f916 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 8002760:	0003      	movs	r3, r0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002764:	e030      	b.n	80027c8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <UART_SetConfig+0x33c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2210      	movs	r2, #16
 800276c:	4013      	ands	r3, r2
 800276e:	d002      	beq.n	8002776 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <UART_SetConfig+0x340>)
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002774:	e028      	b.n	80027c8 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <UART_SetConfig+0x344>)
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800277a:	e025      	b.n	80027c8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277c:	f7ff f840 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 8002780:	0003      	movs	r3, r0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002784:	e020      	b.n	80027c8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800278c:	e01c      	b.n	80027c8 <UART_SetConfig+0x360>
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	efff69f3 	.word	0xefff69f3
 8002794:	ffffcfff 	.word	0xffffcfff
 8002798:	40004800 	.word	0x40004800
 800279c:	fffff4ff 	.word	0xfffff4ff
 80027a0:	40004400 	.word	0x40004400
 80027a4:	40021000 	.word	0x40021000
 80027a8:	003d0900 	.word	0x003d0900
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	08003438 	.word	0x08003438
      default:
        pclk = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027b8:	231a      	movs	r3, #26
 80027ba:	2218      	movs	r2, #24
 80027bc:	4694      	mov	ip, r2
 80027be:	44bc      	add	ip, r7
 80027c0:	4463      	add	r3, ip
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
        break;
 80027c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d100      	bne.n	80027d0 <UART_SetConfig+0x368>
 80027ce:	e095      	b.n	80028fc <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	005a      	lsls	r2, r3, #1
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	18d2      	adds	r2, r2, r3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0019      	movs	r1, r3
 80027e2:	0010      	movs	r0, r2
 80027e4:	f7fd fc90 	bl	8000108 <__udivsi3>
 80027e8:	0003      	movs	r3, r0
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d921      	bls.n	8002838 <UART_SetConfig+0x3d0>
 80027f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	025b      	lsls	r3, r3, #9
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d21c      	bcs.n	8002838 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	b29a      	uxth	r2, r3
 8002802:	200e      	movs	r0, #14
 8002804:	2418      	movs	r4, #24
 8002806:	193b      	adds	r3, r7, r4
 8002808:	181b      	adds	r3, r3, r0
 800280a:	210f      	movs	r1, #15
 800280c:	438a      	bics	r2, r1
 800280e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	2207      	movs	r2, #7
 8002818:	4013      	ands	r3, r2
 800281a:	b299      	uxth	r1, r3
 800281c:	193b      	adds	r3, r7, r4
 800281e:	181b      	adds	r3, r3, r0
 8002820:	193a      	adds	r2, r7, r4
 8002822:	1812      	adds	r2, r2, r0
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	193a      	adds	r2, r7, r4
 8002830:	1812      	adds	r2, r2, r0
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	e061      	b.n	80028fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002838:	231a      	movs	r3, #26
 800283a:	2218      	movs	r2, #24
 800283c:	4694      	mov	ip, r2
 800283e:	44bc      	add	ip, r7
 8002840:	4463      	add	r3, ip
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e059      	b.n	80028fc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002848:	231b      	movs	r3, #27
 800284a:	2218      	movs	r2, #24
 800284c:	4694      	mov	ip, r2
 800284e:	44bc      	add	ip, r7
 8002850:	4463      	add	r3, ip
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d822      	bhi.n	800289e <UART_SetConfig+0x436>
 8002858:	009a      	lsls	r2, r3, #2
 800285a:	4b30      	ldr	r3, [pc, #192]	; (800291c <UART_SetConfig+0x4b4>)
 800285c:	18d3      	adds	r3, r2, r3
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002862:	f7ff f87d 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8002866:	0003      	movs	r3, r0
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800286a:	e022      	b.n	80028b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800286c:	f7ff f88e 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 8002870:	0003      	movs	r3, r0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002874:	e01d      	b.n	80028b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <UART_SetConfig+0x4b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2210      	movs	r2, #16
 800287c:	4013      	ands	r3, r2
 800287e:	d002      	beq.n	8002886 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002880:	4b28      	ldr	r3, [pc, #160]	; (8002924 <UART_SetConfig+0x4bc>)
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002884:	e015      	b.n	80028b2 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8002886:	4b28      	ldr	r3, [pc, #160]	; (8002928 <UART_SetConfig+0x4c0>)
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800288a:	e012      	b.n	80028b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800288c:	f7fe ffb8 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 8002890:	0003      	movs	r3, r0
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002894:	e00d      	b.n	80028b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800289c:	e009      	b.n	80028b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028a2:	231a      	movs	r3, #26
 80028a4:	2218      	movs	r2, #24
 80028a6:	4694      	mov	ip, r2
 80028a8:	44bc      	add	ip, r7
 80028aa:	4463      	add	r3, ip
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
        break;
 80028b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d021      	beq.n	80028fc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	085a      	lsrs	r2, r3, #1
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	18d2      	adds	r2, r2, r3
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0019      	movs	r1, r3
 80028c8:	0010      	movs	r0, r2
 80028ca:	f7fd fc1d 	bl	8000108 <__udivsi3>
 80028ce:	0003      	movs	r3, r0
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	d909      	bls.n	80028ee <UART_SetConfig+0x486>
 80028da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	025b      	lsls	r3, r3, #9
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d204      	bcs.n	80028ee <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e006      	b.n	80028fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80028ee:	231a      	movs	r3, #26
 80028f0:	2218      	movs	r2, #24
 80028f2:	4694      	mov	ip, r2
 80028f4:	44bc      	add	ip, r7
 80028f6:	4463      	add	r3, ip
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2200      	movs	r2, #0
 8002900:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	2200      	movs	r2, #0
 8002906:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002908:	231a      	movs	r3, #26
 800290a:	2218      	movs	r2, #24
 800290c:	4694      	mov	ip, r2
 800290e:	44bc      	add	ip, r7
 8002910:	4463      	add	r3, ip
 8002912:	781b      	ldrb	r3, [r3, #0]
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b00e      	add	sp, #56	; 0x38
 800291a:	bdb0      	pop	{r4, r5, r7, pc}
 800291c:	0800345c 	.word	0x0800345c
 8002920:	40021000 	.word	0x40021000
 8002924:	003d0900 	.word	0x003d0900
 8002928:	00f42400 	.word	0x00f42400

0800292c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d00b      	beq.n	8002956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a4a      	ldr	r2, [pc, #296]	; (8002a70 <UART_AdvFeatureConfig+0x144>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d00b      	beq.n	8002978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <UART_AdvFeatureConfig+0x148>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	2204      	movs	r2, #4
 800297e:	4013      	ands	r3, r2
 8002980:	d00b      	beq.n	800299a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a3b      	ldr	r2, [pc, #236]	; (8002a78 <UART_AdvFeatureConfig+0x14c>)
 800298a:	4013      	ands	r3, r2
 800298c:	0019      	movs	r1, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2208      	movs	r2, #8
 80029a0:	4013      	ands	r3, r2
 80029a2:	d00b      	beq.n	80029bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a34      	ldr	r2, [pc, #208]	; (8002a7c <UART_AdvFeatureConfig+0x150>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2210      	movs	r2, #16
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00b      	beq.n	80029de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a2c      	ldr	r2, [pc, #176]	; (8002a80 <UART_AdvFeatureConfig+0x154>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2220      	movs	r2, #32
 80029e4:	4013      	ands	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <UART_AdvFeatureConfig+0x158>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	4013      	ands	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <UART_AdvFeatureConfig+0x15c>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	035b      	lsls	r3, r3, #13
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d10b      	bne.n	8002a46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <UART_AdvFeatureConfig+0x160>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d00b      	beq.n	8002a68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <UART_AdvFeatureConfig+0x164>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	fffdffff 	.word	0xfffdffff
 8002a74:	fffeffff 	.word	0xfffeffff
 8002a78:	fffbffff 	.word	0xfffbffff
 8002a7c:	ffff7fff 	.word	0xffff7fff
 8002a80:	ffffefff 	.word	0xffffefff
 8002a84:	ffffdfff 	.word	0xffffdfff
 8002a88:	ffefffff 	.word	0xffefffff
 8002a8c:	ff9fffff 	.word	0xff9fffff
 8002a90:	fff7ffff 	.word	0xfff7ffff

08002a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002aa4:	f7fd ff12 	bl	80008cc <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d10c      	bne.n	8002ad4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	0391      	lsls	r1, r2, #14
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <UART_CheckIdleState+0x8c>)
 8002ac4:	9200      	str	r2, [sp, #0]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f000 f82c 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d001      	beq.n	8002ad4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e021      	b.n	8002b18 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d10c      	bne.n	8002afc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	03d1      	lsls	r1, r2, #15
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <UART_CheckIdleState+0x8c>)
 8002aec:	9200      	str	r2, [sp, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f000 f818 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
 8002af4:	1e03      	subs	r3, r0, #0
 8002af6:	d001      	beq.n	8002afc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e00d      	b.n	8002b18 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2274      	movs	r2, #116	; 0x74
 8002b12:	2100      	movs	r1, #0
 8002b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b004      	add	sp, #16
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	01ffffff 	.word	0x01ffffff

08002b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b094      	sub	sp, #80	; 0x50
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	1dfb      	adds	r3, r7, #7
 8002b32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b34:	e0a3      	b.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b38:	3301      	adds	r3, #1
 8002b3a:	d100      	bne.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002b3c:	e09f      	b.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fd fec5 	bl	80008cc <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d13d      	bne.n	8002bd0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5e:	2301      	movs	r3, #1
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	494c      	ldr	r1, [pc, #304]	; (8002ca8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b76:	400a      	ands	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b86:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b90:	2301      	movs	r3, #1
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	f383 8810 	msr	PRIMASK, r3
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	438a      	bics	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb2:	f383 8810 	msr	PRIMASK, r3
}
 8002bb6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2274      	movs	r2, #116	; 0x74
 8002bc8:	2100      	movs	r1, #0
 8002bca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e067      	b.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d050      	beq.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	401a      	ands	r2, r3
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d146      	bne.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfe:	613b      	str	r3, [r7, #16]
  return(result);
 8002c00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c04:	2301      	movs	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f383 8810 	msr	PRIMASK, r3
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4923      	ldr	r1, [pc, #140]	; (8002ca8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f383 8810 	msr	PRIMASK, r3
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c30:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c32:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c36:	2301      	movs	r3, #1
 8002c38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	f383 8810 	msr	PRIMASK, r3
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	438a      	bics	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f383 8810 	msr	PRIMASK, r3
}
 8002c5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	2120      	movs	r1, #32
 8002c70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2274      	movs	r2, #116	; 0x74
 8002c76:	2100      	movs	r1, #0
 8002c78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e010      	b.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	425a      	negs	r2, r3
 8002c8e:	4153      	adcs	r3, r2
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	001a      	movs	r2, r3
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d100      	bne.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002c9c:	e74b      	b.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b014      	add	sp, #80	; 0x50
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	fffffe5f 	.word	0xfffffe5f

08002cac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	1dbb      	adds	r3, r7, #6
 8002cb8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1dba      	adds	r2, r7, #6
 8002cc4:	2158      	movs	r1, #88	; 0x58
 8002cc6:	8812      	ldrh	r2, [r2, #0]
 8002cc8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1dba      	adds	r2, r7, #6
 8002cce:	215a      	movs	r1, #90	; 0x5a
 8002cd0:	8812      	ldrh	r2, [r2, #0]
 8002cd2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10d      	bne.n	8002d02 <UART_Start_Receive_IT+0x56>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <UART_Start_Receive_IT+0x4c>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	225c      	movs	r2, #92	; 0x5c
 8002cf2:	4943      	ldr	r1, [pc, #268]	; (8002e00 <UART_Start_Receive_IT+0x154>)
 8002cf4:	5299      	strh	r1, [r3, r2]
 8002cf6:	e02e      	b.n	8002d56 <UART_Start_Receive_IT+0xaa>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	225c      	movs	r2, #92	; 0x5c
 8002cfc:	21ff      	movs	r1, #255	; 0xff
 8002cfe:	5299      	strh	r1, [r3, r2]
 8002d00:	e029      	b.n	8002d56 <UART_Start_Receive_IT+0xaa>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10d      	bne.n	8002d26 <UART_Start_Receive_IT+0x7a>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <UART_Start_Receive_IT+0x70>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	225c      	movs	r2, #92	; 0x5c
 8002d16:	21ff      	movs	r1, #255	; 0xff
 8002d18:	5299      	strh	r1, [r3, r2]
 8002d1a:	e01c      	b.n	8002d56 <UART_Start_Receive_IT+0xaa>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	225c      	movs	r2, #92	; 0x5c
 8002d20:	217f      	movs	r1, #127	; 0x7f
 8002d22:	5299      	strh	r1, [r3, r2]
 8002d24:	e017      	b.n	8002d56 <UART_Start_Receive_IT+0xaa>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	055b      	lsls	r3, r3, #21
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10d      	bne.n	8002d4e <UART_Start_Receive_IT+0xa2>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <UART_Start_Receive_IT+0x98>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	225c      	movs	r2, #92	; 0x5c
 8002d3e:	217f      	movs	r1, #127	; 0x7f
 8002d40:	5299      	strh	r1, [r3, r2]
 8002d42:	e008      	b.n	8002d56 <UART_Start_Receive_IT+0xaa>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	225c      	movs	r2, #92	; 0x5c
 8002d48:	213f      	movs	r1, #63	; 0x3f
 8002d4a:	5299      	strh	r1, [r3, r2]
 8002d4c:	e003      	b.n	8002d56 <UART_Start_Receive_IT+0xaa>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	225c      	movs	r2, #92	; 0x5c
 8002d52:	2100      	movs	r1, #0
 8002d54:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2222      	movs	r2, #34	; 0x22
 8002d62:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d64:	f3ef 8310 	mrs	r3, PRIMASK
 8002d68:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d6a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	2301      	movs	r3, #1
 8002d70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f383 8810 	msr	PRIMASK, r3
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	f383 8810 	msr	PRIMASK, r3
}
 8002d94:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	015b      	lsls	r3, r3, #5
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d107      	bne.n	8002db2 <UART_Start_Receive_IT+0x106>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <UART_Start_Receive_IT+0x158>)
 8002dae:	665a      	str	r2, [r3, #100]	; 0x64
 8002db0:	e002      	b.n	8002db8 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <UART_Start_Receive_IT+0x15c>)
 8002db6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2274      	movs	r2, #116	; 0x74
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc4:	613b      	str	r3, [r7, #16]
  return(result);
 8002dc6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dca:	2301      	movs	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2190      	movs	r1, #144	; 0x90
 8002de2:	0049      	lsls	r1, r1, #1
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f383 8810 	msr	PRIMASK, r3
}
 8002df2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b00c      	add	sp, #48	; 0x30
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	000001ff 	.word	0x000001ff
 8002e04:	0800322d 	.word	0x0800322d
 8002e08:	080030c5 	.word	0x080030c5

08002e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08e      	sub	sp, #56	; 0x38
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e14:	f3ef 8310 	mrs	r3, PRIMASK
 8002e18:	617b      	str	r3, [r7, #20]
  return(result);
 8002e1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f383 8810 	msr	PRIMASK, r3
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4925      	ldr	r1, [pc, #148]	; (8002ecc <UART_EndRxTransfer+0xc0>)
 8002e36:	400a      	ands	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e46:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4a:	623b      	str	r3, [r7, #32]
  return(result);
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e50:	2301      	movs	r3, #1
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	f383 8810 	msr	PRIMASK, r3
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	438a      	bics	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d118      	bne.n	8002eb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e80:	f3ef 8310 	mrs	r3, PRIMASK
 8002e84:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f383 8810 	msr	PRIMASK, r3
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2110      	movs	r1, #16
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f383 8810 	msr	PRIMASK, r3
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b00e      	add	sp, #56	; 0x38
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	fffffedf 	.word	0xfffffedf

08002ed0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	225a      	movs	r2, #90	; 0x5a
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2252      	movs	r2, #82	; 0x52
 8002eea:	2100      	movs	r1, #0
 8002eec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7ff faa5 	bl	8002440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b004      	add	sp, #16
 8002efc:	bd80      	pop	{r7, pc}

08002efe <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b08a      	sub	sp, #40	; 0x28
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f0a:	2b21      	cmp	r3, #33	; 0x21
 8002f0c:	d14c      	bne.n	8002fa8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2252      	movs	r2, #82	; 0x52
 8002f12:	5a9b      	ldrh	r3, [r3, r2]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d132      	bne.n	8002f80 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f20:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	2301      	movs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f383 8810 	msr	PRIMASK, r3
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f50:	617b      	str	r3, [r7, #20]
  return(result);
 8002f52:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	2301      	movs	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f383 8810 	msr	PRIMASK, r3
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002f7e:	e013      	b.n	8002fa8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2252      	movs	r2, #82	; 0x52
 8002f9a:	5a9b      	ldrh	r3, [r3, r2]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b299      	uxth	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2252      	movs	r2, #82	; 0x52
 8002fa6:	5299      	strh	r1, [r3, r2]
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b00a      	add	sp, #40	; 0x28
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fbc:	2b21      	cmp	r3, #33	; 0x21
 8002fbe:	d151      	bne.n	8003064 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2252      	movs	r2, #82	; 0x52
 8002fc4:	5a9b      	ldrh	r3, [r3, r2]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d132      	bne.n	8003032 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f383 8810 	msr	PRIMASK, r3
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	438a      	bics	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f383 8810 	msr	PRIMASK, r3
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8003002:	61bb      	str	r3, [r7, #24]
  return(result);
 8003004:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	2301      	movs	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f383 8810 	msr	PRIMASK, r3
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2140      	movs	r1, #64	; 0x40
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f383 8810 	msr	PRIMASK, r3
}
 800302e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003030:	e018      	b.n	8003064 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	001a      	movs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	05d2      	lsls	r2, r2, #23
 8003044:	0dd2      	lsrs	r2, r2, #23
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304c:	1c9a      	adds	r2, r3, #2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2252      	movs	r2, #82	; 0x52
 8003056:	5a9b      	ldrh	r3, [r3, r2]
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b299      	uxth	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2252      	movs	r2, #82	; 0x52
 8003062:	5299      	strh	r1, [r3, r2]
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b00c      	add	sp, #48	; 0x30
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003074:	f3ef 8310 	mrs	r3, PRIMASK
 8003078:	60bb      	str	r3, [r7, #8]
  return(result);
 800307a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	2301      	movs	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	438a      	bics	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f383 8810 	msr	PRIMASK, r3
}
 80030a4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff f9bb 	bl	8002430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b006      	add	sp, #24
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b090      	sub	sp, #64	; 0x40
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80030cc:	203e      	movs	r0, #62	; 0x3e
 80030ce:	183b      	adds	r3, r7, r0
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	215c      	movs	r1, #92	; 0x5c
 80030d4:	5a52      	ldrh	r2, [r2, r1]
 80030d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030dc:	2b22      	cmp	r3, #34	; 0x22
 80030de:	d000      	beq.n	80030e2 <UART_RxISR_8BIT+0x1e>
 80030e0:	e095      	b.n	800320e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e8:	213c      	movs	r1, #60	; 0x3c
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	b2d9      	uxtb	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	400a      	ands	r2, r1
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	225a      	movs	r2, #90	; 0x5a
 8003112:	5a9b      	ldrh	r3, [r3, r2]
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b299      	uxth	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	225a      	movs	r2, #90	; 0x5a
 800311e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	225a      	movs	r2, #90	; 0x5a
 8003124:	5a9b      	ldrh	r3, [r3, r2]
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d178      	bne.n	800321e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312c:	f3ef 8310 	mrs	r3, PRIMASK
 8003130:	61bb      	str	r3, [r7, #24]
  return(result);
 8003132:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
 8003136:	2301      	movs	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4936      	ldr	r1, [pc, #216]	; (8003228 <UART_RxISR_8BIT+0x164>)
 800314e:	400a      	ands	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f383 8810 	msr	PRIMASK, r3
}
 800315c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315e:	f3ef 8310 	mrs	r3, PRIMASK
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
 8003168:	2301      	movs	r3, #1
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	f383 8810 	msr	PRIMASK, r3
}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2101      	movs	r1, #1
 8003180:	438a      	bics	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	f383 8810 	msr	PRIMASK, r3
}
 800318e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d12f      	bne.n	8003204 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031aa:	f3ef 8310 	mrs	r3, PRIMASK
 80031ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80031b0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30
 80031b4:	2301      	movs	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f383 8810 	msr	PRIMASK, r3
}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2110      	movs	r1, #16
 80031cc:	438a      	bics	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	2210      	movs	r2, #16
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d103      	bne.n	80031f2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2210      	movs	r2, #16
 80031f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2258      	movs	r2, #88	; 0x58
 80031f6:	5a9a      	ldrh	r2, [r3, r2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff f927 	bl	8002450 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003202:	e00c      	b.n	800321e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	0018      	movs	r0, r3
 8003208:	f7fd f948 	bl	800049c <HAL_UART_RxCpltCallback>
}
 800320c:	e007      	b.n	800321e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2108      	movs	r1, #8
 800321a:	430a      	orrs	r2, r1
 800321c:	619a      	str	r2, [r3, #24]
}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b010      	add	sp, #64	; 0x40
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	fffffedf 	.word	0xfffffedf

0800322c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b090      	sub	sp, #64	; 0x40
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003234:	203e      	movs	r0, #62	; 0x3e
 8003236:	183b      	adds	r3, r7, r0
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	215c      	movs	r1, #92	; 0x5c
 800323c:	5a52      	ldrh	r2, [r2, r1]
 800323e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003244:	2b22      	cmp	r3, #34	; 0x22
 8003246:	d000      	beq.n	800324a <UART_RxISR_16BIT+0x1e>
 8003248:	e095      	b.n	8003376 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003250:	213c      	movs	r1, #60	; 0x3c
 8003252:	187b      	adds	r3, r7, r1
 8003254:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800325c:	187b      	adds	r3, r7, r1
 800325e:	183a      	adds	r2, r7, r0
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	8812      	ldrh	r2, [r2, #0]
 8003264:	4013      	ands	r3, r2
 8003266:	b29a      	uxth	r2, r3
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	1c9a      	adds	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	225a      	movs	r2, #90	; 0x5a
 800327a:	5a9b      	ldrh	r3, [r3, r2]
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b299      	uxth	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	225a      	movs	r2, #90	; 0x5a
 8003286:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	225a      	movs	r2, #90	; 0x5a
 800328c:	5a9b      	ldrh	r3, [r3, r2]
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d178      	bne.n	8003386 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003294:	f3ef 8310 	mrs	r3, PRIMASK
 8003298:	617b      	str	r3, [r7, #20]
  return(result);
 800329a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f383 8810 	msr	PRIMASK, r3
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4936      	ldr	r1, [pc, #216]	; (8003390 <UART_RxISR_16BIT+0x164>)
 80032b6:	400a      	ands	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ca:	623b      	str	r3, [r7, #32]
  return(result);
 80032cc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
 80032d0:	2301      	movs	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	f383 8810 	msr	PRIMASK, r3
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	438a      	bics	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	f383 8810 	msr	PRIMASK, r3
}
 80032f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003308:	2b01      	cmp	r3, #1
 800330a:	d12f      	bne.n	800336c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003312:	f3ef 8310 	mrs	r3, PRIMASK
 8003316:	60bb      	str	r3, [r7, #8]
  return(result);
 8003318:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800331c:	2301      	movs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2110      	movs	r1, #16
 8003334:	438a      	bics	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f383 8810 	msr	PRIMASK, r3
}
 8003342:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2210      	movs	r2, #16
 800334c:	4013      	ands	r3, r2
 800334e:	2b10      	cmp	r3, #16
 8003350:	d103      	bne.n	800335a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2210      	movs	r2, #16
 8003358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2258      	movs	r2, #88	; 0x58
 800335e:	5a9a      	ldrh	r2, [r3, r2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0011      	movs	r1, r2
 8003364:	0018      	movs	r0, r3
 8003366:	f7ff f873 	bl	8002450 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800336a:	e00c      	b.n	8003386 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f7fd f894 	bl	800049c <HAL_UART_RxCpltCallback>
}
 8003374:	e007      	b.n	8003386 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2108      	movs	r1, #8
 8003382:	430a      	orrs	r2, r1
 8003384:	619a      	str	r2, [r3, #24]
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b010      	add	sp, #64	; 0x40
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	fffffedf 	.word	0xfffffedf

08003394 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	2600      	movs	r6, #0
 80033a8:	4d0c      	ldr	r5, [pc, #48]	; (80033dc <__libc_init_array+0x38>)
 80033aa:	4c0d      	ldr	r4, [pc, #52]	; (80033e0 <__libc_init_array+0x3c>)
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	2600      	movs	r6, #0
 80033b6:	f000 f821 	bl	80033fc <_init>
 80033ba:	4d0a      	ldr	r5, [pc, #40]	; (80033e4 <__libc_init_array+0x40>)
 80033bc:	4c0a      	ldr	r4, [pc, #40]	; (80033e8 <__libc_init_array+0x44>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	00b3      	lsls	r3, r6, #2
 80033ca:	58eb      	ldr	r3, [r5, r3]
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	00b3      	lsls	r3, r6, #2
 80033d4:	58eb      	ldr	r3, [r5, r3]
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	08003488 	.word	0x08003488
 80033e0:	08003488 	.word	0x08003488
 80033e4:	08003488 	.word	0x08003488
 80033e8:	0800348c 	.word	0x0800348c

080033ec <memset>:
 80033ec:	0003      	movs	r3, r0
 80033ee:	1882      	adds	r2, r0, r2
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memset+0xa>
 80033f4:	4770      	bx	lr
 80033f6:	7019      	strb	r1, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	e7f9      	b.n	80033f0 <memset+0x4>

080033fc <_init>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr

08003408 <_fini>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr
