
ESC-LL001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eb8  08003eb8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000008c  08003f4c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003f4c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000697a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001667  00000000  00000000  00026a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00028098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  00028760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011136  00000000  00000000  00028d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000798a  00000000  00000000  00039ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065bd1  00000000  00000000  00041830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a7401  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001918  00000000  00000000  000a7454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e2c 	.word	0x08003e2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08003e2c 	.word	0x08003e2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__aeabi_d2uiz>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	2200      	movs	r2, #0
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <__aeabi_d2uiz+0x38>)
 80002b6:	0004      	movs	r4, r0
 80002b8:	000d      	movs	r5, r1
 80002ba:	f000 ff7b 	bl	80011b4 <__aeabi_dcmpge>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d104      	bne.n	80002cc <__aeabi_d2uiz+0x1c>
 80002c2:	0020      	movs	r0, r4
 80002c4:	0029      	movs	r1, r5
 80002c6:	f000 fedb 	bl	8001080 <__aeabi_d2iz>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <__aeabi_d2uiz+0x38>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	0020      	movs	r0, r4
 80002d2:	0029      	movs	r1, r5
 80002d4:	f000 fb42 	bl	800095c <__aeabi_dsub>
 80002d8:	f000 fed2 	bl	8001080 <__aeabi_d2iz>
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	061b      	lsls	r3, r3, #24
 80002e0:	469c      	mov	ip, r3
 80002e2:	4460      	add	r0, ip
 80002e4:	e7f1      	b.n	80002ca <__aeabi_d2uiz+0x1a>
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	41e00000 	.word	0x41e00000

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f000 ff7a 	bl	8001204 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f000 ff75 	bl	8001204 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	469b      	mov	fp, r3
 8000322:	d433      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000324:	465a      	mov	r2, fp
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83a      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e078      	b.n	8000430 <__udivmoddi4+0x144>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e075      	b.n	8000436 <__udivmoddi4+0x14a>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e028      	b.n	80003b6 <__udivmoddi4+0xca>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	2320      	movs	r3, #32
 8000390:	1a9b      	subs	r3, r3, r2
 8000392:	4652      	mov	r2, sl
 8000394:	40da      	lsrs	r2, r3
 8000396:	4641      	mov	r1, r8
 8000398:	0013      	movs	r3, r2
 800039a:	464a      	mov	r2, r9
 800039c:	408a      	lsls	r2, r1
 800039e:	0017      	movs	r7, r2
 80003a0:	4642      	mov	r2, r8
 80003a2:	431f      	orrs	r7, r3
 80003a4:	4653      	mov	r3, sl
 80003a6:	4093      	lsls	r3, r2
 80003a8:	001e      	movs	r6, r3
 80003aa:	42af      	cmp	r7, r5
 80003ac:	d9c4      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003ae:	2200      	movs	r2, #0
 80003b0:	2300      	movs	r3, #0
 80003b2:	9200      	str	r2, [sp, #0]
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	4643      	mov	r3, r8
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0d9      	beq.n	8000370 <__udivmoddi4+0x84>
 80003bc:	07fb      	lsls	r3, r7, #31
 80003be:	0872      	lsrs	r2, r6, #1
 80003c0:	431a      	orrs	r2, r3
 80003c2:	4646      	mov	r6, r8
 80003c4:	087b      	lsrs	r3, r7, #1
 80003c6:	e00e      	b.n	80003e6 <__udivmoddi4+0xfa>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d101      	bne.n	80003d0 <__udivmoddi4+0xe4>
 80003cc:	42a2      	cmp	r2, r4
 80003ce:	d80c      	bhi.n	80003ea <__udivmoddi4+0xfe>
 80003d0:	1aa4      	subs	r4, r4, r2
 80003d2:	419d      	sbcs	r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	1924      	adds	r4, r4, r4
 80003d8:	416d      	adcs	r5, r5
 80003da:	2100      	movs	r1, #0
 80003dc:	3e01      	subs	r6, #1
 80003de:	1824      	adds	r4, r4, r0
 80003e0:	414d      	adcs	r5, r1
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d006      	beq.n	80003f4 <__udivmoddi4+0x108>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d9ee      	bls.n	80003c8 <__udivmoddi4+0xdc>
 80003ea:	3e01      	subs	r6, #1
 80003ec:	1924      	adds	r4, r4, r4
 80003ee:	416d      	adcs	r5, r5
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d1f8      	bne.n	80003e6 <__udivmoddi4+0xfa>
 80003f4:	9800      	ldr	r0, [sp, #0]
 80003f6:	9901      	ldr	r1, [sp, #4]
 80003f8:	465b      	mov	r3, fp
 80003fa:	1900      	adds	r0, r0, r4
 80003fc:	4169      	adcs	r1, r5
 80003fe:	2b00      	cmp	r3, #0
 8000400:	db24      	blt.n	800044c <__udivmoddi4+0x160>
 8000402:	002b      	movs	r3, r5
 8000404:	465a      	mov	r2, fp
 8000406:	4644      	mov	r4, r8
 8000408:	40d3      	lsrs	r3, r2
 800040a:	002a      	movs	r2, r5
 800040c:	40e2      	lsrs	r2, r4
 800040e:	001c      	movs	r4, r3
 8000410:	465b      	mov	r3, fp
 8000412:	0015      	movs	r5, r2
 8000414:	2b00      	cmp	r3, #0
 8000416:	db2a      	blt.n	800046e <__udivmoddi4+0x182>
 8000418:	0026      	movs	r6, r4
 800041a:	409e      	lsls	r6, r3
 800041c:	0033      	movs	r3, r6
 800041e:	0026      	movs	r6, r4
 8000420:	4647      	mov	r7, r8
 8000422:	40be      	lsls	r6, r7
 8000424:	0032      	movs	r2, r6
 8000426:	1a80      	subs	r0, r0, r2
 8000428:	4199      	sbcs	r1, r3
 800042a:	9000      	str	r0, [sp, #0]
 800042c:	9101      	str	r1, [sp, #4]
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x84>
 8000430:	42a3      	cmp	r3, r4
 8000432:	d8bc      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000434:	e783      	b.n	800033e <__udivmoddi4+0x52>
 8000436:	4642      	mov	r2, r8
 8000438:	2320      	movs	r3, #32
 800043a:	2100      	movs	r1, #0
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	2200      	movs	r2, #0
 8000440:	9100      	str	r1, [sp, #0]
 8000442:	9201      	str	r2, [sp, #4]
 8000444:	2201      	movs	r2, #1
 8000446:	40da      	lsrs	r2, r3
 8000448:	9201      	str	r2, [sp, #4]
 800044a:	e786      	b.n	800035a <__udivmoddi4+0x6e>
 800044c:	4642      	mov	r2, r8
 800044e:	2320      	movs	r3, #32
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	002a      	movs	r2, r5
 8000454:	4646      	mov	r6, r8
 8000456:	409a      	lsls	r2, r3
 8000458:	0023      	movs	r3, r4
 800045a:	40f3      	lsrs	r3, r6
 800045c:	4644      	mov	r4, r8
 800045e:	4313      	orrs	r3, r2
 8000460:	002a      	movs	r2, r5
 8000462:	40e2      	lsrs	r2, r4
 8000464:	001c      	movs	r4, r3
 8000466:	465b      	mov	r3, fp
 8000468:	0015      	movs	r5, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	dad4      	bge.n	8000418 <__udivmoddi4+0x12c>
 800046e:	4642      	mov	r2, r8
 8000470:	002f      	movs	r7, r5
 8000472:	2320      	movs	r3, #32
 8000474:	0026      	movs	r6, r4
 8000476:	4097      	lsls	r7, r2
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	40de      	lsrs	r6, r3
 800047c:	003b      	movs	r3, r7
 800047e:	4333      	orrs	r3, r6
 8000480:	e7cd      	b.n	800041e <__udivmoddi4+0x132>
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dmul>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	4698      	mov	r8, r3
 8000492:	030c      	lsls	r4, r1, #12
 8000494:	004b      	lsls	r3, r1, #1
 8000496:	0006      	movs	r6, r0
 8000498:	4692      	mov	sl, r2
 800049a:	b087      	sub	sp, #28
 800049c:	0b24      	lsrs	r4, r4, #12
 800049e:	0d5b      	lsrs	r3, r3, #21
 80004a0:	0fcf      	lsrs	r7, r1, #31
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d06c      	beq.n	8000580 <__aeabi_dmul+0xfc>
 80004a6:	4add      	ldr	r2, [pc, #884]	; (800081c <__aeabi_dmul+0x398>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d100      	bne.n	80004ae <__aeabi_dmul+0x2a>
 80004ac:	e086      	b.n	80005bc <__aeabi_dmul+0x138>
 80004ae:	0f42      	lsrs	r2, r0, #29
 80004b0:	00e4      	lsls	r4, r4, #3
 80004b2:	4314      	orrs	r4, r2
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	0412      	lsls	r2, r2, #16
 80004b8:	4314      	orrs	r4, r2
 80004ba:	4ad9      	ldr	r2, [pc, #868]	; (8000820 <__aeabi_dmul+0x39c>)
 80004bc:	00c5      	lsls	r5, r0, #3
 80004be:	4694      	mov	ip, r2
 80004c0:	4463      	add	r3, ip
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	2300      	movs	r3, #0
 80004c6:	4699      	mov	r9, r3
 80004c8:	469b      	mov	fp, r3
 80004ca:	4643      	mov	r3, r8
 80004cc:	4642      	mov	r2, r8
 80004ce:	031e      	lsls	r6, r3, #12
 80004d0:	0fd2      	lsrs	r2, r2, #31
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4650      	mov	r0, sl
 80004d6:	4690      	mov	r8, r2
 80004d8:	0b36      	lsrs	r6, r6, #12
 80004da:	0d5b      	lsrs	r3, r3, #21
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dmul+0x5c>
 80004de:	e078      	b.n	80005d2 <__aeabi_dmul+0x14e>
 80004e0:	4ace      	ldr	r2, [pc, #824]	; (800081c <__aeabi_dmul+0x398>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d01d      	beq.n	8000522 <__aeabi_dmul+0x9e>
 80004e6:	49ce      	ldr	r1, [pc, #824]	; (8000820 <__aeabi_dmul+0x39c>)
 80004e8:	0f42      	lsrs	r2, r0, #29
 80004ea:	468c      	mov	ip, r1
 80004ec:	9900      	ldr	r1, [sp, #0]
 80004ee:	4463      	add	r3, ip
 80004f0:	00f6      	lsls	r6, r6, #3
 80004f2:	468c      	mov	ip, r1
 80004f4:	4316      	orrs	r6, r2
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	449c      	add	ip, r3
 80004fa:	0412      	lsls	r2, r2, #16
 80004fc:	4663      	mov	r3, ip
 80004fe:	4316      	orrs	r6, r2
 8000500:	00c2      	lsls	r2, r0, #3
 8000502:	2000      	movs	r0, #0
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	9900      	ldr	r1, [sp, #0]
 8000508:	4643      	mov	r3, r8
 800050a:	3101      	adds	r1, #1
 800050c:	468c      	mov	ip, r1
 800050e:	4649      	mov	r1, r9
 8000510:	407b      	eors	r3, r7
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	290f      	cmp	r1, #15
 8000516:	d900      	bls.n	800051a <__aeabi_dmul+0x96>
 8000518:	e07e      	b.n	8000618 <__aeabi_dmul+0x194>
 800051a:	4bc2      	ldr	r3, [pc, #776]	; (8000824 <__aeabi_dmul+0x3a0>)
 800051c:	0089      	lsls	r1, r1, #2
 800051e:	5859      	ldr	r1, [r3, r1]
 8000520:	468f      	mov	pc, r1
 8000522:	4652      	mov	r2, sl
 8000524:	9b00      	ldr	r3, [sp, #0]
 8000526:	4332      	orrs	r2, r6
 8000528:	d000      	beq.n	800052c <__aeabi_dmul+0xa8>
 800052a:	e156      	b.n	80007da <__aeabi_dmul+0x356>
 800052c:	49bb      	ldr	r1, [pc, #748]	; (800081c <__aeabi_dmul+0x398>)
 800052e:	2600      	movs	r6, #0
 8000530:	468c      	mov	ip, r1
 8000532:	4463      	add	r3, ip
 8000534:	4649      	mov	r1, r9
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	4319      	orrs	r1, r3
 800053c:	4689      	mov	r9, r1
 800053e:	2002      	movs	r0, #2
 8000540:	e7e1      	b.n	8000506 <__aeabi_dmul+0x82>
 8000542:	4643      	mov	r3, r8
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	0034      	movs	r4, r6
 8000548:	0015      	movs	r5, r2
 800054a:	4683      	mov	fp, r0
 800054c:	465b      	mov	r3, fp
 800054e:	2b02      	cmp	r3, #2
 8000550:	d05e      	beq.n	8000610 <__aeabi_dmul+0x18c>
 8000552:	2b03      	cmp	r3, #3
 8000554:	d100      	bne.n	8000558 <__aeabi_dmul+0xd4>
 8000556:	e1f3      	b.n	8000940 <__aeabi_dmul+0x4bc>
 8000558:	2b01      	cmp	r3, #1
 800055a:	d000      	beq.n	800055e <__aeabi_dmul+0xda>
 800055c:	e118      	b.n	8000790 <__aeabi_dmul+0x30c>
 800055e:	2200      	movs	r2, #0
 8000560:	2400      	movs	r4, #0
 8000562:	2500      	movs	r5, #0
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	0512      	lsls	r2, r2, #20
 8000568:	4322      	orrs	r2, r4
 800056a:	07db      	lsls	r3, r3, #31
 800056c:	431a      	orrs	r2, r3
 800056e:	0028      	movs	r0, r5
 8000570:	0011      	movs	r1, r2
 8000572:	b007      	add	sp, #28
 8000574:	bcf0      	pop	{r4, r5, r6, r7}
 8000576:	46bb      	mov	fp, r7
 8000578:	46b2      	mov	sl, r6
 800057a:	46a9      	mov	r9, r5
 800057c:	46a0      	mov	r8, r4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	0025      	movs	r5, r4
 8000582:	4305      	orrs	r5, r0
 8000584:	d100      	bne.n	8000588 <__aeabi_dmul+0x104>
 8000586:	e141      	b.n	800080c <__aeabi_dmul+0x388>
 8000588:	2c00      	cmp	r4, #0
 800058a:	d100      	bne.n	800058e <__aeabi_dmul+0x10a>
 800058c:	e1ad      	b.n	80008ea <__aeabi_dmul+0x466>
 800058e:	0020      	movs	r0, r4
 8000590:	f000 fe1a 	bl	80011c8 <__clzsi2>
 8000594:	0001      	movs	r1, r0
 8000596:	0002      	movs	r2, r0
 8000598:	390b      	subs	r1, #11
 800059a:	231d      	movs	r3, #29
 800059c:	0010      	movs	r0, r2
 800059e:	1a5b      	subs	r3, r3, r1
 80005a0:	0031      	movs	r1, r6
 80005a2:	0035      	movs	r5, r6
 80005a4:	3808      	subs	r0, #8
 80005a6:	4084      	lsls	r4, r0
 80005a8:	40d9      	lsrs	r1, r3
 80005aa:	4085      	lsls	r5, r0
 80005ac:	430c      	orrs	r4, r1
 80005ae:	489e      	ldr	r0, [pc, #632]	; (8000828 <__aeabi_dmul+0x3a4>)
 80005b0:	1a83      	subs	r3, r0, r2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	4699      	mov	r9, r3
 80005b8:	469b      	mov	fp, r3
 80005ba:	e786      	b.n	80004ca <__aeabi_dmul+0x46>
 80005bc:	0005      	movs	r5, r0
 80005be:	4325      	orrs	r5, r4
 80005c0:	d000      	beq.n	80005c4 <__aeabi_dmul+0x140>
 80005c2:	e11c      	b.n	80007fe <__aeabi_dmul+0x37a>
 80005c4:	2208      	movs	r2, #8
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2302      	movs	r3, #2
 80005ca:	2400      	movs	r4, #0
 80005cc:	4691      	mov	r9, r2
 80005ce:	469b      	mov	fp, r3
 80005d0:	e77b      	b.n	80004ca <__aeabi_dmul+0x46>
 80005d2:	4652      	mov	r2, sl
 80005d4:	4332      	orrs	r2, r6
 80005d6:	d100      	bne.n	80005da <__aeabi_dmul+0x156>
 80005d8:	e10a      	b.n	80007f0 <__aeabi_dmul+0x36c>
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_dmul+0x15c>
 80005de:	e176      	b.n	80008ce <__aeabi_dmul+0x44a>
 80005e0:	0030      	movs	r0, r6
 80005e2:	f000 fdf1 	bl	80011c8 <__clzsi2>
 80005e6:	0002      	movs	r2, r0
 80005e8:	3a0b      	subs	r2, #11
 80005ea:	231d      	movs	r3, #29
 80005ec:	0001      	movs	r1, r0
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	4652      	mov	r2, sl
 80005f2:	3908      	subs	r1, #8
 80005f4:	40da      	lsrs	r2, r3
 80005f6:	408e      	lsls	r6, r1
 80005f8:	4316      	orrs	r6, r2
 80005fa:	4652      	mov	r2, sl
 80005fc:	408a      	lsls	r2, r1
 80005fe:	9b00      	ldr	r3, [sp, #0]
 8000600:	4989      	ldr	r1, [pc, #548]	; (8000828 <__aeabi_dmul+0x3a4>)
 8000602:	1a18      	subs	r0, r3, r0
 8000604:	0003      	movs	r3, r0
 8000606:	468c      	mov	ip, r1
 8000608:	4463      	add	r3, ip
 800060a:	2000      	movs	r0, #0
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	e77a      	b.n	8000506 <__aeabi_dmul+0x82>
 8000610:	2400      	movs	r4, #0
 8000612:	2500      	movs	r5, #0
 8000614:	4a81      	ldr	r2, [pc, #516]	; (800081c <__aeabi_dmul+0x398>)
 8000616:	e7a5      	b.n	8000564 <__aeabi_dmul+0xe0>
 8000618:	0c2f      	lsrs	r7, r5, #16
 800061a:	042d      	lsls	r5, r5, #16
 800061c:	0c2d      	lsrs	r5, r5, #16
 800061e:	002b      	movs	r3, r5
 8000620:	0c11      	lsrs	r1, r2, #16
 8000622:	0412      	lsls	r2, r2, #16
 8000624:	0c12      	lsrs	r2, r2, #16
 8000626:	4353      	muls	r3, r2
 8000628:	4698      	mov	r8, r3
 800062a:	0013      	movs	r3, r2
 800062c:	0028      	movs	r0, r5
 800062e:	437b      	muls	r3, r7
 8000630:	4699      	mov	r9, r3
 8000632:	4348      	muls	r0, r1
 8000634:	4448      	add	r0, r9
 8000636:	4683      	mov	fp, r0
 8000638:	4640      	mov	r0, r8
 800063a:	000b      	movs	r3, r1
 800063c:	0c00      	lsrs	r0, r0, #16
 800063e:	4682      	mov	sl, r0
 8000640:	4658      	mov	r0, fp
 8000642:	437b      	muls	r3, r7
 8000644:	4450      	add	r0, sl
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	4581      	cmp	r9, r0
 800064a:	d906      	bls.n	800065a <__aeabi_dmul+0x1d6>
 800064c:	469a      	mov	sl, r3
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	4699      	mov	r9, r3
 8000654:	44ca      	add	sl, r9
 8000656:	4653      	mov	r3, sl
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	0c03      	lsrs	r3, r0, #16
 800065c:	469b      	mov	fp, r3
 800065e:	4643      	mov	r3, r8
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0400      	lsls	r0, r0, #16
 8000664:	0c1b      	lsrs	r3, r3, #16
 8000666:	4698      	mov	r8, r3
 8000668:	0003      	movs	r3, r0
 800066a:	4443      	add	r3, r8
 800066c:	9304      	str	r3, [sp, #16]
 800066e:	0c33      	lsrs	r3, r6, #16
 8000670:	4699      	mov	r9, r3
 8000672:	002b      	movs	r3, r5
 8000674:	0436      	lsls	r6, r6, #16
 8000676:	0c36      	lsrs	r6, r6, #16
 8000678:	4373      	muls	r3, r6
 800067a:	4698      	mov	r8, r3
 800067c:	0033      	movs	r3, r6
 800067e:	437b      	muls	r3, r7
 8000680:	469a      	mov	sl, r3
 8000682:	464b      	mov	r3, r9
 8000684:	435d      	muls	r5, r3
 8000686:	435f      	muls	r7, r3
 8000688:	4643      	mov	r3, r8
 800068a:	4455      	add	r5, sl
 800068c:	0c18      	lsrs	r0, r3, #16
 800068e:	1940      	adds	r0, r0, r5
 8000690:	4582      	cmp	sl, r0
 8000692:	d903      	bls.n	800069c <__aeabi_dmul+0x218>
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	025b      	lsls	r3, r3, #9
 8000698:	469a      	mov	sl, r3
 800069a:	4457      	add	r7, sl
 800069c:	0c05      	lsrs	r5, r0, #16
 800069e:	19eb      	adds	r3, r5, r7
 80006a0:	9305      	str	r3, [sp, #20]
 80006a2:	4643      	mov	r3, r8
 80006a4:	041d      	lsls	r5, r3, #16
 80006a6:	0c2d      	lsrs	r5, r5, #16
 80006a8:	0400      	lsls	r0, r0, #16
 80006aa:	1940      	adds	r0, r0, r5
 80006ac:	0c25      	lsrs	r5, r4, #16
 80006ae:	0424      	lsls	r4, r4, #16
 80006b0:	0c24      	lsrs	r4, r4, #16
 80006b2:	0027      	movs	r7, r4
 80006b4:	4357      	muls	r7, r2
 80006b6:	436a      	muls	r2, r5
 80006b8:	4690      	mov	r8, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	0c3b      	lsrs	r3, r7, #16
 80006be:	469a      	mov	sl, r3
 80006c0:	434a      	muls	r2, r1
 80006c2:	4361      	muls	r1, r4
 80006c4:	4441      	add	r1, r8
 80006c6:	4451      	add	r1, sl
 80006c8:	4483      	add	fp, r0
 80006ca:	4588      	cmp	r8, r1
 80006cc:	d903      	bls.n	80006d6 <__aeabi_dmul+0x252>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	025b      	lsls	r3, r3, #9
 80006d2:	4698      	mov	r8, r3
 80006d4:	4442      	add	r2, r8
 80006d6:	043f      	lsls	r7, r7, #16
 80006d8:	0c0b      	lsrs	r3, r1, #16
 80006da:	0c3f      	lsrs	r7, r7, #16
 80006dc:	0409      	lsls	r1, r1, #16
 80006de:	19c9      	adds	r1, r1, r7
 80006e0:	0027      	movs	r7, r4
 80006e2:	4698      	mov	r8, r3
 80006e4:	464b      	mov	r3, r9
 80006e6:	4377      	muls	r7, r6
 80006e8:	435c      	muls	r4, r3
 80006ea:	436e      	muls	r6, r5
 80006ec:	435d      	muls	r5, r3
 80006ee:	0c3b      	lsrs	r3, r7, #16
 80006f0:	4699      	mov	r9, r3
 80006f2:	19a4      	adds	r4, r4, r6
 80006f4:	444c      	add	r4, r9
 80006f6:	4442      	add	r2, r8
 80006f8:	9503      	str	r5, [sp, #12]
 80006fa:	42a6      	cmp	r6, r4
 80006fc:	d904      	bls.n	8000708 <__aeabi_dmul+0x284>
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	025b      	lsls	r3, r3, #9
 8000702:	4698      	mov	r8, r3
 8000704:	4445      	add	r5, r8
 8000706:	9503      	str	r5, [sp, #12]
 8000708:	9b02      	ldr	r3, [sp, #8]
 800070a:	043f      	lsls	r7, r7, #16
 800070c:	445b      	add	r3, fp
 800070e:	001e      	movs	r6, r3
 8000710:	4283      	cmp	r3, r0
 8000712:	4180      	sbcs	r0, r0
 8000714:	0423      	lsls	r3, r4, #16
 8000716:	4698      	mov	r8, r3
 8000718:	9b05      	ldr	r3, [sp, #20]
 800071a:	0c3f      	lsrs	r7, r7, #16
 800071c:	4447      	add	r7, r8
 800071e:	4698      	mov	r8, r3
 8000720:	1876      	adds	r6, r6, r1
 8000722:	428e      	cmp	r6, r1
 8000724:	4189      	sbcs	r1, r1
 8000726:	4447      	add	r7, r8
 8000728:	4240      	negs	r0, r0
 800072a:	183d      	adds	r5, r7, r0
 800072c:	46a8      	mov	r8, r5
 800072e:	4693      	mov	fp, r2
 8000730:	4249      	negs	r1, r1
 8000732:	468a      	mov	sl, r1
 8000734:	44c3      	add	fp, r8
 8000736:	429f      	cmp	r7, r3
 8000738:	41bf      	sbcs	r7, r7
 800073a:	4580      	cmp	r8, r0
 800073c:	4180      	sbcs	r0, r0
 800073e:	9b03      	ldr	r3, [sp, #12]
 8000740:	44da      	add	sl, fp
 8000742:	4698      	mov	r8, r3
 8000744:	4653      	mov	r3, sl
 8000746:	4240      	negs	r0, r0
 8000748:	427f      	negs	r7, r7
 800074a:	4307      	orrs	r7, r0
 800074c:	0c24      	lsrs	r4, r4, #16
 800074e:	4593      	cmp	fp, r2
 8000750:	4192      	sbcs	r2, r2
 8000752:	458a      	cmp	sl, r1
 8000754:	4189      	sbcs	r1, r1
 8000756:	193f      	adds	r7, r7, r4
 8000758:	0ddc      	lsrs	r4, r3, #23
 800075a:	9b04      	ldr	r3, [sp, #16]
 800075c:	0275      	lsls	r5, r6, #9
 800075e:	431d      	orrs	r5, r3
 8000760:	1e68      	subs	r0, r5, #1
 8000762:	4185      	sbcs	r5, r0
 8000764:	4653      	mov	r3, sl
 8000766:	4252      	negs	r2, r2
 8000768:	4249      	negs	r1, r1
 800076a:	430a      	orrs	r2, r1
 800076c:	18bf      	adds	r7, r7, r2
 800076e:	4447      	add	r7, r8
 8000770:	0df6      	lsrs	r6, r6, #23
 8000772:	027f      	lsls	r7, r7, #9
 8000774:	4335      	orrs	r5, r6
 8000776:	025a      	lsls	r2, r3, #9
 8000778:	433c      	orrs	r4, r7
 800077a:	4315      	orrs	r5, r2
 800077c:	01fb      	lsls	r3, r7, #7
 800077e:	d400      	bmi.n	8000782 <__aeabi_dmul+0x2fe>
 8000780:	e0c1      	b.n	8000906 <__aeabi_dmul+0x482>
 8000782:	2101      	movs	r1, #1
 8000784:	086a      	lsrs	r2, r5, #1
 8000786:	400d      	ands	r5, r1
 8000788:	4315      	orrs	r5, r2
 800078a:	07e2      	lsls	r2, r4, #31
 800078c:	4315      	orrs	r5, r2
 800078e:	0864      	lsrs	r4, r4, #1
 8000790:	4926      	ldr	r1, [pc, #152]	; (800082c <__aeabi_dmul+0x3a8>)
 8000792:	4461      	add	r1, ip
 8000794:	2900      	cmp	r1, #0
 8000796:	dd56      	ble.n	8000846 <__aeabi_dmul+0x3c2>
 8000798:	076b      	lsls	r3, r5, #29
 800079a:	d009      	beq.n	80007b0 <__aeabi_dmul+0x32c>
 800079c:	220f      	movs	r2, #15
 800079e:	402a      	ands	r2, r5
 80007a0:	2a04      	cmp	r2, #4
 80007a2:	d005      	beq.n	80007b0 <__aeabi_dmul+0x32c>
 80007a4:	1d2a      	adds	r2, r5, #4
 80007a6:	42aa      	cmp	r2, r5
 80007a8:	41ad      	sbcs	r5, r5
 80007aa:	426d      	negs	r5, r5
 80007ac:	1964      	adds	r4, r4, r5
 80007ae:	0015      	movs	r5, r2
 80007b0:	01e3      	lsls	r3, r4, #7
 80007b2:	d504      	bpl.n	80007be <__aeabi_dmul+0x33a>
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <__aeabi_dmul+0x3ac>)
 80007b8:	00c9      	lsls	r1, r1, #3
 80007ba:	4014      	ands	r4, r2
 80007bc:	4461      	add	r1, ip
 80007be:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <__aeabi_dmul+0x3b0>)
 80007c0:	4291      	cmp	r1, r2
 80007c2:	dd00      	ble.n	80007c6 <__aeabi_dmul+0x342>
 80007c4:	e724      	b.n	8000610 <__aeabi_dmul+0x18c>
 80007c6:	0762      	lsls	r2, r4, #29
 80007c8:	08ed      	lsrs	r5, r5, #3
 80007ca:	0264      	lsls	r4, r4, #9
 80007cc:	0549      	lsls	r1, r1, #21
 80007ce:	4315      	orrs	r5, r2
 80007d0:	0b24      	lsrs	r4, r4, #12
 80007d2:	0d4a      	lsrs	r2, r1, #21
 80007d4:	e6c6      	b.n	8000564 <__aeabi_dmul+0xe0>
 80007d6:	9701      	str	r7, [sp, #4]
 80007d8:	e6b8      	b.n	800054c <__aeabi_dmul+0xc8>
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <__aeabi_dmul+0x398>)
 80007dc:	2003      	movs	r0, #3
 80007de:	4694      	mov	ip, r2
 80007e0:	4463      	add	r3, ip
 80007e2:	464a      	mov	r2, r9
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2303      	movs	r3, #3
 80007e8:	431a      	orrs	r2, r3
 80007ea:	4691      	mov	r9, r2
 80007ec:	4652      	mov	r2, sl
 80007ee:	e68a      	b.n	8000506 <__aeabi_dmul+0x82>
 80007f0:	4649      	mov	r1, r9
 80007f2:	2301      	movs	r3, #1
 80007f4:	4319      	orrs	r1, r3
 80007f6:	4689      	mov	r9, r1
 80007f8:	2600      	movs	r6, #0
 80007fa:	2001      	movs	r0, #1
 80007fc:	e683      	b.n	8000506 <__aeabi_dmul+0x82>
 80007fe:	220c      	movs	r2, #12
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2303      	movs	r3, #3
 8000804:	0005      	movs	r5, r0
 8000806:	4691      	mov	r9, r2
 8000808:	469b      	mov	fp, r3
 800080a:	e65e      	b.n	80004ca <__aeabi_dmul+0x46>
 800080c:	2304      	movs	r3, #4
 800080e:	4699      	mov	r9, r3
 8000810:	2300      	movs	r3, #0
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	2400      	movs	r4, #0
 8000818:	469b      	mov	fp, r3
 800081a:	e656      	b.n	80004ca <__aeabi_dmul+0x46>
 800081c:	000007ff 	.word	0x000007ff
 8000820:	fffffc01 	.word	0xfffffc01
 8000824:	08003e44 	.word	0x08003e44
 8000828:	fffffc0d 	.word	0xfffffc0d
 800082c:	000003ff 	.word	0x000003ff
 8000830:	feffffff 	.word	0xfeffffff
 8000834:	000007fe 	.word	0x000007fe
 8000838:	2300      	movs	r3, #0
 800083a:	2480      	movs	r4, #128	; 0x80
 800083c:	2500      	movs	r5, #0
 800083e:	4a44      	ldr	r2, [pc, #272]	; (8000950 <__aeabi_dmul+0x4cc>)
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	0324      	lsls	r4, r4, #12
 8000844:	e68e      	b.n	8000564 <__aeabi_dmul+0xe0>
 8000846:	2001      	movs	r0, #1
 8000848:	1a40      	subs	r0, r0, r1
 800084a:	2838      	cmp	r0, #56	; 0x38
 800084c:	dd00      	ble.n	8000850 <__aeabi_dmul+0x3cc>
 800084e:	e686      	b.n	800055e <__aeabi_dmul+0xda>
 8000850:	281f      	cmp	r0, #31
 8000852:	dd5b      	ble.n	800090c <__aeabi_dmul+0x488>
 8000854:	221f      	movs	r2, #31
 8000856:	0023      	movs	r3, r4
 8000858:	4252      	negs	r2, r2
 800085a:	1a51      	subs	r1, r2, r1
 800085c:	40cb      	lsrs	r3, r1
 800085e:	0019      	movs	r1, r3
 8000860:	2820      	cmp	r0, #32
 8000862:	d003      	beq.n	800086c <__aeabi_dmul+0x3e8>
 8000864:	4a3b      	ldr	r2, [pc, #236]	; (8000954 <__aeabi_dmul+0x4d0>)
 8000866:	4462      	add	r2, ip
 8000868:	4094      	lsls	r4, r2
 800086a:	4325      	orrs	r5, r4
 800086c:	1e6a      	subs	r2, r5, #1
 800086e:	4195      	sbcs	r5, r2
 8000870:	002a      	movs	r2, r5
 8000872:	430a      	orrs	r2, r1
 8000874:	2107      	movs	r1, #7
 8000876:	000d      	movs	r5, r1
 8000878:	2400      	movs	r4, #0
 800087a:	4015      	ands	r5, r2
 800087c:	4211      	tst	r1, r2
 800087e:	d05b      	beq.n	8000938 <__aeabi_dmul+0x4b4>
 8000880:	210f      	movs	r1, #15
 8000882:	2400      	movs	r4, #0
 8000884:	4011      	ands	r1, r2
 8000886:	2904      	cmp	r1, #4
 8000888:	d053      	beq.n	8000932 <__aeabi_dmul+0x4ae>
 800088a:	1d11      	adds	r1, r2, #4
 800088c:	4291      	cmp	r1, r2
 800088e:	4192      	sbcs	r2, r2
 8000890:	4252      	negs	r2, r2
 8000892:	18a4      	adds	r4, r4, r2
 8000894:	000a      	movs	r2, r1
 8000896:	0223      	lsls	r3, r4, #8
 8000898:	d54b      	bpl.n	8000932 <__aeabi_dmul+0x4ae>
 800089a:	2201      	movs	r2, #1
 800089c:	2400      	movs	r4, #0
 800089e:	2500      	movs	r5, #0
 80008a0:	e660      	b.n	8000564 <__aeabi_dmul+0xe0>
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	031b      	lsls	r3, r3, #12
 80008a6:	421c      	tst	r4, r3
 80008a8:	d009      	beq.n	80008be <__aeabi_dmul+0x43a>
 80008aa:	421e      	tst	r6, r3
 80008ac:	d107      	bne.n	80008be <__aeabi_dmul+0x43a>
 80008ae:	4333      	orrs	r3, r6
 80008b0:	031c      	lsls	r4, r3, #12
 80008b2:	4643      	mov	r3, r8
 80008b4:	0015      	movs	r5, r2
 80008b6:	0b24      	lsrs	r4, r4, #12
 80008b8:	4a25      	ldr	r2, [pc, #148]	; (8000950 <__aeabi_dmul+0x4cc>)
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	e652      	b.n	8000564 <__aeabi_dmul+0xe0>
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	0312      	lsls	r2, r2, #12
 80008c2:	4314      	orrs	r4, r2
 80008c4:	0324      	lsls	r4, r4, #12
 80008c6:	4a22      	ldr	r2, [pc, #136]	; (8000950 <__aeabi_dmul+0x4cc>)
 80008c8:	0b24      	lsrs	r4, r4, #12
 80008ca:	9701      	str	r7, [sp, #4]
 80008cc:	e64a      	b.n	8000564 <__aeabi_dmul+0xe0>
 80008ce:	f000 fc7b 	bl	80011c8 <__clzsi2>
 80008d2:	0003      	movs	r3, r0
 80008d4:	001a      	movs	r2, r3
 80008d6:	3215      	adds	r2, #21
 80008d8:	3020      	adds	r0, #32
 80008da:	2a1c      	cmp	r2, #28
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_dmul+0x45c>
 80008de:	e684      	b.n	80005ea <__aeabi_dmul+0x166>
 80008e0:	4656      	mov	r6, sl
 80008e2:	3b08      	subs	r3, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	409e      	lsls	r6, r3
 80008e8:	e689      	b.n	80005fe <__aeabi_dmul+0x17a>
 80008ea:	f000 fc6d 	bl	80011c8 <__clzsi2>
 80008ee:	0001      	movs	r1, r0
 80008f0:	0002      	movs	r2, r0
 80008f2:	3115      	adds	r1, #21
 80008f4:	3220      	adds	r2, #32
 80008f6:	291c      	cmp	r1, #28
 80008f8:	dc00      	bgt.n	80008fc <__aeabi_dmul+0x478>
 80008fa:	e64e      	b.n	800059a <__aeabi_dmul+0x116>
 80008fc:	0034      	movs	r4, r6
 80008fe:	3808      	subs	r0, #8
 8000900:	2500      	movs	r5, #0
 8000902:	4084      	lsls	r4, r0
 8000904:	e653      	b.n	80005ae <__aeabi_dmul+0x12a>
 8000906:	9b00      	ldr	r3, [sp, #0]
 8000908:	469c      	mov	ip, r3
 800090a:	e741      	b.n	8000790 <__aeabi_dmul+0x30c>
 800090c:	4912      	ldr	r1, [pc, #72]	; (8000958 <__aeabi_dmul+0x4d4>)
 800090e:	0022      	movs	r2, r4
 8000910:	4461      	add	r1, ip
 8000912:	002e      	movs	r6, r5
 8000914:	408d      	lsls	r5, r1
 8000916:	408a      	lsls	r2, r1
 8000918:	40c6      	lsrs	r6, r0
 800091a:	1e69      	subs	r1, r5, #1
 800091c:	418d      	sbcs	r5, r1
 800091e:	4332      	orrs	r2, r6
 8000920:	432a      	orrs	r2, r5
 8000922:	40c4      	lsrs	r4, r0
 8000924:	0753      	lsls	r3, r2, #29
 8000926:	d0b6      	beq.n	8000896 <__aeabi_dmul+0x412>
 8000928:	210f      	movs	r1, #15
 800092a:	4011      	ands	r1, r2
 800092c:	2904      	cmp	r1, #4
 800092e:	d1ac      	bne.n	800088a <__aeabi_dmul+0x406>
 8000930:	e7b1      	b.n	8000896 <__aeabi_dmul+0x412>
 8000932:	0765      	lsls	r5, r4, #29
 8000934:	0264      	lsls	r4, r4, #9
 8000936:	0b24      	lsrs	r4, r4, #12
 8000938:	08d2      	lsrs	r2, r2, #3
 800093a:	4315      	orrs	r5, r2
 800093c:	2200      	movs	r2, #0
 800093e:	e611      	b.n	8000564 <__aeabi_dmul+0xe0>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	0312      	lsls	r2, r2, #12
 8000944:	4314      	orrs	r4, r2
 8000946:	0324      	lsls	r4, r4, #12
 8000948:	4a01      	ldr	r2, [pc, #4]	; (8000950 <__aeabi_dmul+0x4cc>)
 800094a:	0b24      	lsrs	r4, r4, #12
 800094c:	e60a      	b.n	8000564 <__aeabi_dmul+0xe0>
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	000007ff 	.word	0x000007ff
 8000954:	0000043e 	.word	0x0000043e
 8000958:	0000041e 	.word	0x0000041e

0800095c <__aeabi_dsub>:
 800095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095e:	4657      	mov	r7, sl
 8000960:	464e      	mov	r6, r9
 8000962:	4645      	mov	r5, r8
 8000964:	46de      	mov	lr, fp
 8000966:	0004      	movs	r4, r0
 8000968:	b5e0      	push	{r5, r6, r7, lr}
 800096a:	001f      	movs	r7, r3
 800096c:	0010      	movs	r0, r2
 800096e:	030b      	lsls	r3, r1, #12
 8000970:	0f62      	lsrs	r2, r4, #29
 8000972:	004e      	lsls	r6, r1, #1
 8000974:	0fcd      	lsrs	r5, r1, #31
 8000976:	0a5b      	lsrs	r3, r3, #9
 8000978:	0339      	lsls	r1, r7, #12
 800097a:	4313      	orrs	r3, r2
 800097c:	0a49      	lsrs	r1, r1, #9
 800097e:	00e2      	lsls	r2, r4, #3
 8000980:	0f44      	lsrs	r4, r0, #29
 8000982:	4321      	orrs	r1, r4
 8000984:	4cc2      	ldr	r4, [pc, #776]	; (8000c90 <__aeabi_dsub+0x334>)
 8000986:	4691      	mov	r9, r2
 8000988:	4692      	mov	sl, r2
 800098a:	00c0      	lsls	r0, r0, #3
 800098c:	007a      	lsls	r2, r7, #1
 800098e:	4680      	mov	r8, r0
 8000990:	0d76      	lsrs	r6, r6, #21
 8000992:	0d52      	lsrs	r2, r2, #21
 8000994:	0fff      	lsrs	r7, r7, #31
 8000996:	42a2      	cmp	r2, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dsub+0x40>
 800099a:	e0b4      	b.n	8000b06 <__aeabi_dsub+0x1aa>
 800099c:	2401      	movs	r4, #1
 800099e:	4067      	eors	r7, r4
 80009a0:	46bb      	mov	fp, r7
 80009a2:	42bd      	cmp	r5, r7
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dsub+0x4c>
 80009a6:	e088      	b.n	8000aba <__aeabi_dsub+0x15e>
 80009a8:	1ab4      	subs	r4, r6, r2
 80009aa:	46a4      	mov	ip, r4
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	dc00      	bgt.n	80009b2 <__aeabi_dsub+0x56>
 80009b0:	e0b2      	b.n	8000b18 <__aeabi_dsub+0x1bc>
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dsub+0x5c>
 80009b6:	e0c5      	b.n	8000b44 <__aeabi_dsub+0x1e8>
 80009b8:	4ab5      	ldr	r2, [pc, #724]	; (8000c90 <__aeabi_dsub+0x334>)
 80009ba:	4296      	cmp	r6, r2
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dsub+0x64>
 80009be:	e28b      	b.n	8000ed8 <__aeabi_dsub+0x57c>
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	0412      	lsls	r2, r2, #16
 80009c4:	4311      	orrs	r1, r2
 80009c6:	4662      	mov	r2, ip
 80009c8:	2a38      	cmp	r2, #56	; 0x38
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dsub+0x72>
 80009cc:	e1a1      	b.n	8000d12 <__aeabi_dsub+0x3b6>
 80009ce:	2a1f      	cmp	r2, #31
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_dsub+0x78>
 80009d2:	e216      	b.n	8000e02 <__aeabi_dsub+0x4a6>
 80009d4:	2720      	movs	r7, #32
 80009d6:	000c      	movs	r4, r1
 80009d8:	1abf      	subs	r7, r7, r2
 80009da:	40bc      	lsls	r4, r7
 80009dc:	0002      	movs	r2, r0
 80009de:	46a0      	mov	r8, r4
 80009e0:	4664      	mov	r4, ip
 80009e2:	40b8      	lsls	r0, r7
 80009e4:	40e2      	lsrs	r2, r4
 80009e6:	4644      	mov	r4, r8
 80009e8:	4314      	orrs	r4, r2
 80009ea:	0002      	movs	r2, r0
 80009ec:	1e50      	subs	r0, r2, #1
 80009ee:	4182      	sbcs	r2, r0
 80009f0:	4660      	mov	r0, ip
 80009f2:	40c1      	lsrs	r1, r0
 80009f4:	4322      	orrs	r2, r4
 80009f6:	1a5b      	subs	r3, r3, r1
 80009f8:	4649      	mov	r1, r9
 80009fa:	1a8c      	subs	r4, r1, r2
 80009fc:	45a1      	cmp	r9, r4
 80009fe:	4192      	sbcs	r2, r2
 8000a00:	4252      	negs	r2, r2
 8000a02:	1a9b      	subs	r3, r3, r2
 8000a04:	4698      	mov	r8, r3
 8000a06:	4643      	mov	r3, r8
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	d400      	bmi.n	8000a0e <__aeabi_dsub+0xb2>
 8000a0c:	e117      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	025b      	lsls	r3, r3, #9
 8000a12:	0a5b      	lsrs	r3, r3, #9
 8000a14:	4698      	mov	r8, r3
 8000a16:	4643      	mov	r3, r8
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dsub+0xc2>
 8000a1c:	e16c      	b.n	8000cf8 <__aeabi_dsub+0x39c>
 8000a1e:	4640      	mov	r0, r8
 8000a20:	f000 fbd2 	bl	80011c8 <__clzsi2>
 8000a24:	0002      	movs	r2, r0
 8000a26:	3a08      	subs	r2, #8
 8000a28:	2120      	movs	r1, #32
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	4643      	mov	r3, r8
 8000a2e:	1a89      	subs	r1, r1, r2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	40c8      	lsrs	r0, r1
 8000a34:	4094      	lsls	r4, r2
 8000a36:	4303      	orrs	r3, r0
 8000a38:	4296      	cmp	r6, r2
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dsub+0xe2>
 8000a3c:	e157      	b.n	8000cee <__aeabi_dsub+0x392>
 8000a3e:	1b96      	subs	r6, r2, r6
 8000a40:	1c71      	adds	r1, r6, #1
 8000a42:	291f      	cmp	r1, #31
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_dsub+0xec>
 8000a46:	e1cb      	b.n	8000de0 <__aeabi_dsub+0x484>
 8000a48:	2220      	movs	r2, #32
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	0026      	movs	r6, r4
 8000a4e:	1a52      	subs	r2, r2, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	4090      	lsls	r0, r2
 8000a54:	40ce      	lsrs	r6, r1
 8000a56:	40cb      	lsrs	r3, r1
 8000a58:	1e62      	subs	r2, r4, #1
 8000a5a:	4194      	sbcs	r4, r2
 8000a5c:	4330      	orrs	r0, r6
 8000a5e:	4698      	mov	r8, r3
 8000a60:	2600      	movs	r6, #0
 8000a62:	4304      	orrs	r4, r0
 8000a64:	0763      	lsls	r3, r4, #29
 8000a66:	d009      	beq.n	8000a7c <__aeabi_dsub+0x120>
 8000a68:	230f      	movs	r3, #15
 8000a6a:	4023      	ands	r3, r4
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d005      	beq.n	8000a7c <__aeabi_dsub+0x120>
 8000a70:	1d23      	adds	r3, r4, #4
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	41a4      	sbcs	r4, r4
 8000a76:	4264      	negs	r4, r4
 8000a78:	44a0      	add	r8, r4
 8000a7a:	001c      	movs	r4, r3
 8000a7c:	4643      	mov	r3, r8
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	d400      	bmi.n	8000a84 <__aeabi_dsub+0x128>
 8000a82:	e0df      	b.n	8000c44 <__aeabi_dsub+0x2e8>
 8000a84:	4b82      	ldr	r3, [pc, #520]	; (8000c90 <__aeabi_dsub+0x334>)
 8000a86:	3601      	adds	r6, #1
 8000a88:	429e      	cmp	r6, r3
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dsub+0x132>
 8000a8c:	e0fb      	b.n	8000c86 <__aeabi_dsub+0x32a>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	4b80      	ldr	r3, [pc, #512]	; (8000c94 <__aeabi_dsub+0x338>)
 8000a92:	08e4      	lsrs	r4, r4, #3
 8000a94:	401a      	ands	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	0571      	lsls	r1, r6, #21
 8000a9a:	0752      	lsls	r2, r2, #29
 8000a9c:	025b      	lsls	r3, r3, #9
 8000a9e:	4322      	orrs	r2, r4
 8000aa0:	0b1b      	lsrs	r3, r3, #12
 8000aa2:	0d49      	lsrs	r1, r1, #21
 8000aa4:	0509      	lsls	r1, r1, #20
 8000aa6:	07ed      	lsls	r5, r5, #31
 8000aa8:	4319      	orrs	r1, r3
 8000aaa:	4329      	orrs	r1, r5
 8000aac:	0010      	movs	r0, r2
 8000aae:	bcf0      	pop	{r4, r5, r6, r7}
 8000ab0:	46bb      	mov	fp, r7
 8000ab2:	46b2      	mov	sl, r6
 8000ab4:	46a9      	mov	r9, r5
 8000ab6:	46a0      	mov	r8, r4
 8000ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aba:	1ab4      	subs	r4, r6, r2
 8000abc:	46a4      	mov	ip, r4
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	dd58      	ble.n	8000b74 <__aeabi_dsub+0x218>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dsub+0x16c>
 8000ac6:	e09e      	b.n	8000c06 <__aeabi_dsub+0x2aa>
 8000ac8:	4a71      	ldr	r2, [pc, #452]	; (8000c90 <__aeabi_dsub+0x334>)
 8000aca:	4296      	cmp	r6, r2
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dsub+0x174>
 8000ace:	e13b      	b.n	8000d48 <__aeabi_dsub+0x3ec>
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0412      	lsls	r2, r2, #16
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	2a38      	cmp	r2, #56	; 0x38
 8000ada:	dd00      	ble.n	8000ade <__aeabi_dsub+0x182>
 8000adc:	e0c1      	b.n	8000c62 <__aeabi_dsub+0x306>
 8000ade:	2a1f      	cmp	r2, #31
 8000ae0:	dc00      	bgt.n	8000ae4 <__aeabi_dsub+0x188>
 8000ae2:	e1bb      	b.n	8000e5c <__aeabi_dsub+0x500>
 8000ae4:	000c      	movs	r4, r1
 8000ae6:	3a20      	subs	r2, #32
 8000ae8:	40d4      	lsrs	r4, r2
 8000aea:	0022      	movs	r2, r4
 8000aec:	4664      	mov	r4, ip
 8000aee:	2c20      	cmp	r4, #32
 8000af0:	d004      	beq.n	8000afc <__aeabi_dsub+0x1a0>
 8000af2:	2740      	movs	r7, #64	; 0x40
 8000af4:	1b3f      	subs	r7, r7, r4
 8000af6:	40b9      	lsls	r1, r7
 8000af8:	4308      	orrs	r0, r1
 8000afa:	4680      	mov	r8, r0
 8000afc:	4644      	mov	r4, r8
 8000afe:	1e61      	subs	r1, r4, #1
 8000b00:	418c      	sbcs	r4, r1
 8000b02:	4314      	orrs	r4, r2
 8000b04:	e0b1      	b.n	8000c6a <__aeabi_dsub+0x30e>
 8000b06:	000c      	movs	r4, r1
 8000b08:	4304      	orrs	r4, r0
 8000b0a:	d02a      	beq.n	8000b62 <__aeabi_dsub+0x206>
 8000b0c:	46bb      	mov	fp, r7
 8000b0e:	42bd      	cmp	r5, r7
 8000b10:	d02d      	beq.n	8000b6e <__aeabi_dsub+0x212>
 8000b12:	4c61      	ldr	r4, [pc, #388]	; (8000c98 <__aeabi_dsub+0x33c>)
 8000b14:	46a4      	mov	ip, r4
 8000b16:	44b4      	add	ip, r6
 8000b18:	4664      	mov	r4, ip
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d05c      	beq.n	8000bd8 <__aeabi_dsub+0x27c>
 8000b1e:	1b94      	subs	r4, r2, r6
 8000b20:	46a4      	mov	ip, r4
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d000      	beq.n	8000b28 <__aeabi_dsub+0x1cc>
 8000b26:	e115      	b.n	8000d54 <__aeabi_dsub+0x3f8>
 8000b28:	464d      	mov	r5, r9
 8000b2a:	431d      	orrs	r5, r3
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dsub+0x1d4>
 8000b2e:	e1c3      	b.n	8000eb8 <__aeabi_dsub+0x55c>
 8000b30:	1e65      	subs	r5, r4, #1
 8000b32:	2c01      	cmp	r4, #1
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dsub+0x1dc>
 8000b36:	e20c      	b.n	8000f52 <__aeabi_dsub+0x5f6>
 8000b38:	4e55      	ldr	r6, [pc, #340]	; (8000c90 <__aeabi_dsub+0x334>)
 8000b3a:	42b4      	cmp	r4, r6
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dsub+0x1e4>
 8000b3e:	e1f8      	b.n	8000f32 <__aeabi_dsub+0x5d6>
 8000b40:	46ac      	mov	ip, r5
 8000b42:	e10e      	b.n	8000d62 <__aeabi_dsub+0x406>
 8000b44:	000a      	movs	r2, r1
 8000b46:	4302      	orrs	r2, r0
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dsub+0x1f0>
 8000b4a:	e136      	b.n	8000dba <__aeabi_dsub+0x45e>
 8000b4c:	0022      	movs	r2, r4
 8000b4e:	3a01      	subs	r2, #1
 8000b50:	2c01      	cmp	r4, #1
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dsub+0x1fa>
 8000b54:	e1c6      	b.n	8000ee4 <__aeabi_dsub+0x588>
 8000b56:	4c4e      	ldr	r4, [pc, #312]	; (8000c90 <__aeabi_dsub+0x334>)
 8000b58:	45a4      	cmp	ip, r4
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dsub+0x202>
 8000b5c:	e0f4      	b.n	8000d48 <__aeabi_dsub+0x3ec>
 8000b5e:	4694      	mov	ip, r2
 8000b60:	e731      	b.n	80009c6 <__aeabi_dsub+0x6a>
 8000b62:	2401      	movs	r4, #1
 8000b64:	4067      	eors	r7, r4
 8000b66:	46bb      	mov	fp, r7
 8000b68:	42bd      	cmp	r5, r7
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_dsub+0x212>
 8000b6c:	e71c      	b.n	80009a8 <__aeabi_dsub+0x4c>
 8000b6e:	4c4a      	ldr	r4, [pc, #296]	; (8000c98 <__aeabi_dsub+0x33c>)
 8000b70:	46a4      	mov	ip, r4
 8000b72:	44b4      	add	ip, r6
 8000b74:	4664      	mov	r4, ip
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dsub+0x220>
 8000b7a:	e0cf      	b.n	8000d1c <__aeabi_dsub+0x3c0>
 8000b7c:	1b94      	subs	r4, r2, r6
 8000b7e:	46a4      	mov	ip, r4
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dsub+0x22a>
 8000b84:	e15c      	b.n	8000e40 <__aeabi_dsub+0x4e4>
 8000b86:	4e42      	ldr	r6, [pc, #264]	; (8000c90 <__aeabi_dsub+0x334>)
 8000b88:	42b2      	cmp	r2, r6
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dsub+0x232>
 8000b8c:	e1ec      	b.n	8000f68 <__aeabi_dsub+0x60c>
 8000b8e:	2680      	movs	r6, #128	; 0x80
 8000b90:	0436      	lsls	r6, r6, #16
 8000b92:	4333      	orrs	r3, r6
 8000b94:	4664      	mov	r4, ip
 8000b96:	2c38      	cmp	r4, #56	; 0x38
 8000b98:	dd00      	ble.n	8000b9c <__aeabi_dsub+0x240>
 8000b9a:	e1b3      	b.n	8000f04 <__aeabi_dsub+0x5a8>
 8000b9c:	2c1f      	cmp	r4, #31
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dsub+0x246>
 8000ba0:	e238      	b.n	8001014 <__aeabi_dsub+0x6b8>
 8000ba2:	2620      	movs	r6, #32
 8000ba4:	1b36      	subs	r6, r6, r4
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	40b4      	lsls	r4, r6
 8000baa:	464f      	mov	r7, r9
 8000bac:	46a0      	mov	r8, r4
 8000bae:	4664      	mov	r4, ip
 8000bb0:	40e7      	lsrs	r7, r4
 8000bb2:	4644      	mov	r4, r8
 8000bb4:	433c      	orrs	r4, r7
 8000bb6:	464f      	mov	r7, r9
 8000bb8:	40b7      	lsls	r7, r6
 8000bba:	003e      	movs	r6, r7
 8000bbc:	1e77      	subs	r7, r6, #1
 8000bbe:	41be      	sbcs	r6, r7
 8000bc0:	4334      	orrs	r4, r6
 8000bc2:	4666      	mov	r6, ip
 8000bc4:	40f3      	lsrs	r3, r6
 8000bc6:	18c9      	adds	r1, r1, r3
 8000bc8:	1824      	adds	r4, r4, r0
 8000bca:	4284      	cmp	r4, r0
 8000bcc:	419b      	sbcs	r3, r3
 8000bce:	425b      	negs	r3, r3
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	0016      	movs	r6, r2
 8000bd4:	4488      	add	r8, r1
 8000bd6:	e04e      	b.n	8000c76 <__aeabi_dsub+0x31a>
 8000bd8:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <__aeabi_dsub+0x340>)
 8000bda:	1c74      	adds	r4, r6, #1
 8000bdc:	4214      	tst	r4, r2
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dsub+0x286>
 8000be0:	e0d6      	b.n	8000d90 <__aeabi_dsub+0x434>
 8000be2:	464a      	mov	r2, r9
 8000be4:	431a      	orrs	r2, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d000      	beq.n	8000bec <__aeabi_dsub+0x290>
 8000bea:	e15b      	b.n	8000ea4 <__aeabi_dsub+0x548>
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dsub+0x296>
 8000bf0:	e1a5      	b.n	8000f3e <__aeabi_dsub+0x5e2>
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	4302      	orrs	r2, r0
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_dsub+0x29e>
 8000bf8:	e1bb      	b.n	8000f72 <__aeabi_dsub+0x616>
 8000bfa:	464a      	mov	r2, r9
 8000bfc:	0759      	lsls	r1, r3, #29
 8000bfe:	08d2      	lsrs	r2, r2, #3
 8000c00:	430a      	orrs	r2, r1
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	e027      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000c06:	000a      	movs	r2, r1
 8000c08:	4302      	orrs	r2, r0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dsub+0x2b2>
 8000c0c:	e174      	b.n	8000ef8 <__aeabi_dsub+0x59c>
 8000c0e:	0022      	movs	r2, r4
 8000c10:	3a01      	subs	r2, #1
 8000c12:	2c01      	cmp	r4, #1
 8000c14:	d005      	beq.n	8000c22 <__aeabi_dsub+0x2c6>
 8000c16:	4c1e      	ldr	r4, [pc, #120]	; (8000c90 <__aeabi_dsub+0x334>)
 8000c18:	45a4      	cmp	ip, r4
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dsub+0x2c2>
 8000c1c:	e094      	b.n	8000d48 <__aeabi_dsub+0x3ec>
 8000c1e:	4694      	mov	ip, r2
 8000c20:	e759      	b.n	8000ad6 <__aeabi_dsub+0x17a>
 8000c22:	4448      	add	r0, r9
 8000c24:	4548      	cmp	r0, r9
 8000c26:	4192      	sbcs	r2, r2
 8000c28:	185b      	adds	r3, r3, r1
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	0004      	movs	r4, r0
 8000c2e:	4252      	negs	r2, r2
 8000c30:	4490      	add	r8, r2
 8000c32:	4643      	mov	r3, r8
 8000c34:	2602      	movs	r6, #2
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	d500      	bpl.n	8000c3c <__aeabi_dsub+0x2e0>
 8000c3a:	e0c4      	b.n	8000dc6 <__aeabi_dsub+0x46a>
 8000c3c:	3e01      	subs	r6, #1
 8000c3e:	0763      	lsls	r3, r4, #29
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dsub+0x2e8>
 8000c42:	e711      	b.n	8000a68 <__aeabi_dsub+0x10c>
 8000c44:	4643      	mov	r3, r8
 8000c46:	46b4      	mov	ip, r6
 8000c48:	0759      	lsls	r1, r3, #29
 8000c4a:	08e2      	lsrs	r2, r4, #3
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	08db      	lsrs	r3, r3, #3
 8000c50:	490f      	ldr	r1, [pc, #60]	; (8000c90 <__aeabi_dsub+0x334>)
 8000c52:	458c      	cmp	ip, r1
 8000c54:	d040      	beq.n	8000cd8 <__aeabi_dsub+0x37c>
 8000c56:	4661      	mov	r1, ip
 8000c58:	031b      	lsls	r3, r3, #12
 8000c5a:	0549      	lsls	r1, r1, #21
 8000c5c:	0b1b      	lsrs	r3, r3, #12
 8000c5e:	0d49      	lsrs	r1, r1, #21
 8000c60:	e720      	b.n	8000aa4 <__aeabi_dsub+0x148>
 8000c62:	4301      	orrs	r1, r0
 8000c64:	000c      	movs	r4, r1
 8000c66:	1e61      	subs	r1, r4, #1
 8000c68:	418c      	sbcs	r4, r1
 8000c6a:	444c      	add	r4, r9
 8000c6c:	454c      	cmp	r4, r9
 8000c6e:	4192      	sbcs	r2, r2
 8000c70:	4252      	negs	r2, r2
 8000c72:	4690      	mov	r8, r2
 8000c74:	4498      	add	r8, r3
 8000c76:	4643      	mov	r3, r8
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	d5e0      	bpl.n	8000c3e <__aeabi_dsub+0x2e2>
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__aeabi_dsub+0x334>)
 8000c7e:	3601      	adds	r6, #1
 8000c80:	429e      	cmp	r6, r3
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dsub+0x32a>
 8000c84:	e09f      	b.n	8000dc6 <__aeabi_dsub+0x46a>
 8000c86:	0031      	movs	r1, r6
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	e70a      	b.n	8000aa4 <__aeabi_dsub+0x148>
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	000007ff 	.word	0x000007ff
 8000c94:	ff7fffff 	.word	0xff7fffff
 8000c98:	fffff801 	.word	0xfffff801
 8000c9c:	000007fe 	.word	0x000007fe
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dsub+0x34a>
 8000ca4:	e160      	b.n	8000f68 <__aeabi_dsub+0x60c>
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	4302      	orrs	r2, r0
 8000caa:	d04d      	beq.n	8000d48 <__aeabi_dsub+0x3ec>
 8000cac:	464a      	mov	r2, r9
 8000cae:	075c      	lsls	r4, r3, #29
 8000cb0:	08d2      	lsrs	r2, r2, #3
 8000cb2:	4322      	orrs	r2, r4
 8000cb4:	2480      	movs	r4, #128	; 0x80
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	0324      	lsls	r4, r4, #12
 8000cba:	4223      	tst	r3, r4
 8000cbc:	d007      	beq.n	8000cce <__aeabi_dsub+0x372>
 8000cbe:	08ce      	lsrs	r6, r1, #3
 8000cc0:	4226      	tst	r6, r4
 8000cc2:	d104      	bne.n	8000cce <__aeabi_dsub+0x372>
 8000cc4:	465d      	mov	r5, fp
 8000cc6:	0033      	movs	r3, r6
 8000cc8:	08c2      	lsrs	r2, r0, #3
 8000cca:	0749      	lsls	r1, r1, #29
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	0f51      	lsrs	r1, r2, #29
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	08d2      	lsrs	r2, r2, #3
 8000cd4:	0749      	lsls	r1, r1, #29
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	0011      	movs	r1, r2
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dsub+0x384>
 8000cde:	e1c8      	b.n	8001072 <__aeabi_dsub+0x716>
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	0309      	lsls	r1, r1, #12
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	031b      	lsls	r3, r3, #12
 8000ce8:	49d5      	ldr	r1, [pc, #852]	; (8001040 <__aeabi_dsub+0x6e4>)
 8000cea:	0b1b      	lsrs	r3, r3, #12
 8000cec:	e6da      	b.n	8000aa4 <__aeabi_dsub+0x148>
 8000cee:	49d5      	ldr	r1, [pc, #852]	; (8001044 <__aeabi_dsub+0x6e8>)
 8000cf0:	1ab6      	subs	r6, r6, r2
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	4698      	mov	r8, r3
 8000cf6:	e6b5      	b.n	8000a64 <__aeabi_dsub+0x108>
 8000cf8:	0020      	movs	r0, r4
 8000cfa:	f000 fa65 	bl	80011c8 <__clzsi2>
 8000cfe:	0002      	movs	r2, r0
 8000d00:	3218      	adds	r2, #24
 8000d02:	2a1f      	cmp	r2, #31
 8000d04:	dc00      	bgt.n	8000d08 <__aeabi_dsub+0x3ac>
 8000d06:	e68f      	b.n	8000a28 <__aeabi_dsub+0xcc>
 8000d08:	0023      	movs	r3, r4
 8000d0a:	3808      	subs	r0, #8
 8000d0c:	4083      	lsls	r3, r0
 8000d0e:	2400      	movs	r4, #0
 8000d10:	e692      	b.n	8000a38 <__aeabi_dsub+0xdc>
 8000d12:	4308      	orrs	r0, r1
 8000d14:	0002      	movs	r2, r0
 8000d16:	1e50      	subs	r0, r2, #1
 8000d18:	4182      	sbcs	r2, r0
 8000d1a:	e66d      	b.n	80009f8 <__aeabi_dsub+0x9c>
 8000d1c:	4cca      	ldr	r4, [pc, #808]	; (8001048 <__aeabi_dsub+0x6ec>)
 8000d1e:	1c72      	adds	r2, r6, #1
 8000d20:	4222      	tst	r2, r4
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dsub+0x3ca>
 8000d24:	e0ad      	b.n	8000e82 <__aeabi_dsub+0x526>
 8000d26:	464a      	mov	r2, r9
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d1b8      	bne.n	8000ca0 <__aeabi_dsub+0x344>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dsub+0x3d8>
 8000d32:	e158      	b.n	8000fe6 <__aeabi_dsub+0x68a>
 8000d34:	000a      	movs	r2, r1
 8000d36:	4302      	orrs	r2, r0
 8000d38:	d000      	beq.n	8000d3c <__aeabi_dsub+0x3e0>
 8000d3a:	e159      	b.n	8000ff0 <__aeabi_dsub+0x694>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	0759      	lsls	r1, r3, #29
 8000d40:	08d2      	lsrs	r2, r2, #3
 8000d42:	430a      	orrs	r2, r1
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	e786      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	0759      	lsls	r1, r3, #29
 8000d4c:	08d2      	lsrs	r2, r2, #3
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	e7c1      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000d54:	4dba      	ldr	r5, [pc, #744]	; (8001040 <__aeabi_dsub+0x6e4>)
 8000d56:	42aa      	cmp	r2, r5
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dsub+0x400>
 8000d5a:	e11e      	b.n	8000f9a <__aeabi_dsub+0x63e>
 8000d5c:	2580      	movs	r5, #128	; 0x80
 8000d5e:	042d      	lsls	r5, r5, #16
 8000d60:	432b      	orrs	r3, r5
 8000d62:	4664      	mov	r4, ip
 8000d64:	2c38      	cmp	r4, #56	; 0x38
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_dsub+0x4c8>
 8000d68:	2c1f      	cmp	r4, #31
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_dsub+0x412>
 8000d6c:	e0d0      	b.n	8000f10 <__aeabi_dsub+0x5b4>
 8000d6e:	2520      	movs	r5, #32
 8000d70:	4667      	mov	r7, ip
 8000d72:	1b2d      	subs	r5, r5, r4
 8000d74:	464e      	mov	r6, r9
 8000d76:	001c      	movs	r4, r3
 8000d78:	40fe      	lsrs	r6, r7
 8000d7a:	40ac      	lsls	r4, r5
 8000d7c:	4334      	orrs	r4, r6
 8000d7e:	464e      	mov	r6, r9
 8000d80:	40ae      	lsls	r6, r5
 8000d82:	0035      	movs	r5, r6
 8000d84:	40fb      	lsrs	r3, r7
 8000d86:	1e6e      	subs	r6, r5, #1
 8000d88:	41b5      	sbcs	r5, r6
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	432c      	orrs	r4, r5
 8000d8e:	e04e      	b.n	8000e2e <__aeabi_dsub+0x4d2>
 8000d90:	464a      	mov	r2, r9
 8000d92:	1a14      	subs	r4, r2, r0
 8000d94:	45a1      	cmp	r9, r4
 8000d96:	4192      	sbcs	r2, r2
 8000d98:	4252      	negs	r2, r2
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	1a5f      	subs	r7, r3, r1
 8000d9e:	003a      	movs	r2, r7
 8000da0:	4647      	mov	r7, r8
 8000da2:	1bd2      	subs	r2, r2, r7
 8000da4:	4690      	mov	r8, r2
 8000da6:	0212      	lsls	r2, r2, #8
 8000da8:	d500      	bpl.n	8000dac <__aeabi_dsub+0x450>
 8000daa:	e08b      	b.n	8000ec4 <__aeabi_dsub+0x568>
 8000dac:	4642      	mov	r2, r8
 8000dae:	4322      	orrs	r2, r4
 8000db0:	d000      	beq.n	8000db4 <__aeabi_dsub+0x458>
 8000db2:	e630      	b.n	8000a16 <__aeabi_dsub+0xba>
 8000db4:	2300      	movs	r3, #0
 8000db6:	2500      	movs	r5, #0
 8000db8:	e74d      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000dba:	464a      	mov	r2, r9
 8000dbc:	0759      	lsls	r1, r3, #29
 8000dbe:	08d2      	lsrs	r2, r2, #3
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	e744      	b.n	8000c50 <__aeabi_dsub+0x2f4>
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	4b9e      	ldr	r3, [pc, #632]	; (8001044 <__aeabi_dsub+0x6e8>)
 8000dca:	0861      	lsrs	r1, r4, #1
 8000dcc:	401a      	ands	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4014      	ands	r4, r2
 8000dd4:	430c      	orrs	r4, r1
 8000dd6:	07da      	lsls	r2, r3, #31
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	4698      	mov	r8, r3
 8000ddc:	4314      	orrs	r4, r2
 8000dde:	e641      	b.n	8000a64 <__aeabi_dsub+0x108>
 8000de0:	001a      	movs	r2, r3
 8000de2:	3e1f      	subs	r6, #31
 8000de4:	40f2      	lsrs	r2, r6
 8000de6:	0016      	movs	r6, r2
 8000de8:	2920      	cmp	r1, #32
 8000dea:	d003      	beq.n	8000df4 <__aeabi_dsub+0x498>
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	1a51      	subs	r1, r2, r1
 8000df0:	408b      	lsls	r3, r1
 8000df2:	431c      	orrs	r4, r3
 8000df4:	1e62      	subs	r2, r4, #1
 8000df6:	4194      	sbcs	r4, r2
 8000df8:	2300      	movs	r3, #0
 8000dfa:	4334      	orrs	r4, r6
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	2600      	movs	r6, #0
 8000e00:	e71d      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8000e02:	000c      	movs	r4, r1
 8000e04:	3a20      	subs	r2, #32
 8000e06:	40d4      	lsrs	r4, r2
 8000e08:	0022      	movs	r2, r4
 8000e0a:	4664      	mov	r4, ip
 8000e0c:	2c20      	cmp	r4, #32
 8000e0e:	d004      	beq.n	8000e1a <__aeabi_dsub+0x4be>
 8000e10:	2740      	movs	r7, #64	; 0x40
 8000e12:	1b3f      	subs	r7, r7, r4
 8000e14:	40b9      	lsls	r1, r7
 8000e16:	4308      	orrs	r0, r1
 8000e18:	4680      	mov	r8, r0
 8000e1a:	4644      	mov	r4, r8
 8000e1c:	1e61      	subs	r1, r4, #1
 8000e1e:	418c      	sbcs	r4, r1
 8000e20:	4322      	orrs	r2, r4
 8000e22:	e5e9      	b.n	80009f8 <__aeabi_dsub+0x9c>
 8000e24:	464c      	mov	r4, r9
 8000e26:	4323      	orrs	r3, r4
 8000e28:	001c      	movs	r4, r3
 8000e2a:	1e63      	subs	r3, r4, #1
 8000e2c:	419c      	sbcs	r4, r3
 8000e2e:	1b04      	subs	r4, r0, r4
 8000e30:	42a0      	cmp	r0, r4
 8000e32:	419b      	sbcs	r3, r3
 8000e34:	425b      	negs	r3, r3
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	4698      	mov	r8, r3
 8000e3a:	465d      	mov	r5, fp
 8000e3c:	0016      	movs	r6, r2
 8000e3e:	e5e2      	b.n	8000a06 <__aeabi_dsub+0xaa>
 8000e40:	464e      	mov	r6, r9
 8000e42:	431e      	orrs	r6, r3
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dsub+0x4ec>
 8000e46:	e0ae      	b.n	8000fa6 <__aeabi_dsub+0x64a>
 8000e48:	1e66      	subs	r6, r4, #1
 8000e4a:	2c01      	cmp	r4, #1
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dsub+0x4f4>
 8000e4e:	e0fd      	b.n	800104c <__aeabi_dsub+0x6f0>
 8000e50:	4f7b      	ldr	r7, [pc, #492]	; (8001040 <__aeabi_dsub+0x6e4>)
 8000e52:	42bc      	cmp	r4, r7
 8000e54:	d100      	bne.n	8000e58 <__aeabi_dsub+0x4fc>
 8000e56:	e107      	b.n	8001068 <__aeabi_dsub+0x70c>
 8000e58:	46b4      	mov	ip, r6
 8000e5a:	e69b      	b.n	8000b94 <__aeabi_dsub+0x238>
 8000e5c:	4664      	mov	r4, ip
 8000e5e:	2220      	movs	r2, #32
 8000e60:	1b12      	subs	r2, r2, r4
 8000e62:	000c      	movs	r4, r1
 8000e64:	4094      	lsls	r4, r2
 8000e66:	0007      	movs	r7, r0
 8000e68:	4090      	lsls	r0, r2
 8000e6a:	46a0      	mov	r8, r4
 8000e6c:	4664      	mov	r4, ip
 8000e6e:	1e42      	subs	r2, r0, #1
 8000e70:	4190      	sbcs	r0, r2
 8000e72:	4662      	mov	r2, ip
 8000e74:	40e7      	lsrs	r7, r4
 8000e76:	4644      	mov	r4, r8
 8000e78:	40d1      	lsrs	r1, r2
 8000e7a:	433c      	orrs	r4, r7
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	185b      	adds	r3, r3, r1
 8000e80:	e6f3      	b.n	8000c6a <__aeabi_dsub+0x30e>
 8000e82:	4c6f      	ldr	r4, [pc, #444]	; (8001040 <__aeabi_dsub+0x6e4>)
 8000e84:	42a2      	cmp	r2, r4
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dsub+0x52e>
 8000e88:	e0d5      	b.n	8001036 <__aeabi_dsub+0x6da>
 8000e8a:	4448      	add	r0, r9
 8000e8c:	185b      	adds	r3, r3, r1
 8000e8e:	4548      	cmp	r0, r9
 8000e90:	4189      	sbcs	r1, r1
 8000e92:	4249      	negs	r1, r1
 8000e94:	185b      	adds	r3, r3, r1
 8000e96:	07dc      	lsls	r4, r3, #31
 8000e98:	0840      	lsrs	r0, r0, #1
 8000e9a:	085b      	lsrs	r3, r3, #1
 8000e9c:	4698      	mov	r8, r3
 8000e9e:	0016      	movs	r6, r2
 8000ea0:	4304      	orrs	r4, r0
 8000ea2:	e6cc      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_dsub+0x54e>
 8000ea8:	e082      	b.n	8000fb0 <__aeabi_dsub+0x654>
 8000eaa:	000a      	movs	r2, r1
 8000eac:	4302      	orrs	r2, r0
 8000eae:	d140      	bne.n	8000f32 <__aeabi_dsub+0x5d6>
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	031b      	lsls	r3, r3, #12
 8000eb6:	e713      	b.n	8000ce0 <__aeabi_dsub+0x384>
 8000eb8:	074b      	lsls	r3, r1, #29
 8000eba:	08c2      	lsrs	r2, r0, #3
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	465d      	mov	r5, fp
 8000ec0:	08cb      	lsrs	r3, r1, #3
 8000ec2:	e6c5      	b.n	8000c50 <__aeabi_dsub+0x2f4>
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	1a84      	subs	r4, r0, r2
 8000ec8:	42a0      	cmp	r0, r4
 8000eca:	4192      	sbcs	r2, r2
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	4252      	negs	r2, r2
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	4698      	mov	r8, r3
 8000ed4:	465d      	mov	r5, fp
 8000ed6:	e59e      	b.n	8000a16 <__aeabi_dsub+0xba>
 8000ed8:	464a      	mov	r2, r9
 8000eda:	0759      	lsls	r1, r3, #29
 8000edc:	08d2      	lsrs	r2, r2, #3
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	e6f9      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000ee4:	464a      	mov	r2, r9
 8000ee6:	1a14      	subs	r4, r2, r0
 8000ee8:	45a1      	cmp	r9, r4
 8000eea:	4192      	sbcs	r2, r2
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	4252      	negs	r2, r2
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	4698      	mov	r8, r3
 8000ef4:	2601      	movs	r6, #1
 8000ef6:	e586      	b.n	8000a06 <__aeabi_dsub+0xaa>
 8000ef8:	464a      	mov	r2, r9
 8000efa:	0759      	lsls	r1, r3, #29
 8000efc:	08d2      	lsrs	r2, r2, #3
 8000efe:	430a      	orrs	r2, r1
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	e6a5      	b.n	8000c50 <__aeabi_dsub+0x2f4>
 8000f04:	464c      	mov	r4, r9
 8000f06:	4323      	orrs	r3, r4
 8000f08:	001c      	movs	r4, r3
 8000f0a:	1e63      	subs	r3, r4, #1
 8000f0c:	419c      	sbcs	r4, r3
 8000f0e:	e65b      	b.n	8000bc8 <__aeabi_dsub+0x26c>
 8000f10:	4665      	mov	r5, ip
 8000f12:	001e      	movs	r6, r3
 8000f14:	3d20      	subs	r5, #32
 8000f16:	40ee      	lsrs	r6, r5
 8000f18:	2c20      	cmp	r4, #32
 8000f1a:	d005      	beq.n	8000f28 <__aeabi_dsub+0x5cc>
 8000f1c:	2540      	movs	r5, #64	; 0x40
 8000f1e:	1b2d      	subs	r5, r5, r4
 8000f20:	40ab      	lsls	r3, r5
 8000f22:	464c      	mov	r4, r9
 8000f24:	431c      	orrs	r4, r3
 8000f26:	46a2      	mov	sl, r4
 8000f28:	4654      	mov	r4, sl
 8000f2a:	1e63      	subs	r3, r4, #1
 8000f2c:	419c      	sbcs	r4, r3
 8000f2e:	4334      	orrs	r4, r6
 8000f30:	e77d      	b.n	8000e2e <__aeabi_dsub+0x4d2>
 8000f32:	074b      	lsls	r3, r1, #29
 8000f34:	08c2      	lsrs	r2, r0, #3
 8000f36:	431a      	orrs	r2, r3
 8000f38:	465d      	mov	r5, fp
 8000f3a:	08cb      	lsrs	r3, r1, #3
 8000f3c:	e6cc      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000f3e:	000a      	movs	r2, r1
 8000f40:	4302      	orrs	r2, r0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dsub+0x5ea>
 8000f44:	e736      	b.n	8000db4 <__aeabi_dsub+0x458>
 8000f46:	074b      	lsls	r3, r1, #29
 8000f48:	08c2      	lsrs	r2, r0, #3
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	465d      	mov	r5, fp
 8000f4e:	08cb      	lsrs	r3, r1, #3
 8000f50:	e681      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000f52:	464a      	mov	r2, r9
 8000f54:	1a84      	subs	r4, r0, r2
 8000f56:	42a0      	cmp	r0, r4
 8000f58:	4192      	sbcs	r2, r2
 8000f5a:	1acb      	subs	r3, r1, r3
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	4698      	mov	r8, r3
 8000f62:	465d      	mov	r5, fp
 8000f64:	2601      	movs	r6, #1
 8000f66:	e54e      	b.n	8000a06 <__aeabi_dsub+0xaa>
 8000f68:	074b      	lsls	r3, r1, #29
 8000f6a:	08c2      	lsrs	r2, r0, #3
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	08cb      	lsrs	r3, r1, #3
 8000f70:	e6b2      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000f72:	464a      	mov	r2, r9
 8000f74:	1a14      	subs	r4, r2, r0
 8000f76:	45a1      	cmp	r9, r4
 8000f78:	4192      	sbcs	r2, r2
 8000f7a:	1a5f      	subs	r7, r3, r1
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	1aba      	subs	r2, r7, r2
 8000f80:	4690      	mov	r8, r2
 8000f82:	0212      	lsls	r2, r2, #8
 8000f84:	d56b      	bpl.n	800105e <__aeabi_dsub+0x702>
 8000f86:	464a      	mov	r2, r9
 8000f88:	1a84      	subs	r4, r0, r2
 8000f8a:	42a0      	cmp	r0, r4
 8000f8c:	4192      	sbcs	r2, r2
 8000f8e:	1acb      	subs	r3, r1, r3
 8000f90:	4252      	negs	r2, r2
 8000f92:	1a9b      	subs	r3, r3, r2
 8000f94:	4698      	mov	r8, r3
 8000f96:	465d      	mov	r5, fp
 8000f98:	e564      	b.n	8000a64 <__aeabi_dsub+0x108>
 8000f9a:	074b      	lsls	r3, r1, #29
 8000f9c:	08c2      	lsrs	r2, r0, #3
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	465d      	mov	r5, fp
 8000fa2:	08cb      	lsrs	r3, r1, #3
 8000fa4:	e698      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000fa6:	074b      	lsls	r3, r1, #29
 8000fa8:	08c2      	lsrs	r2, r0, #3
 8000faa:	431a      	orrs	r2, r3
 8000fac:	08cb      	lsrs	r3, r1, #3
 8000fae:	e64f      	b.n	8000c50 <__aeabi_dsub+0x2f4>
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	4302      	orrs	r2, r0
 8000fb4:	d090      	beq.n	8000ed8 <__aeabi_dsub+0x57c>
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	075c      	lsls	r4, r3, #29
 8000fba:	08d2      	lsrs	r2, r2, #3
 8000fbc:	4314      	orrs	r4, r2
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	0312      	lsls	r2, r2, #12
 8000fc4:	4213      	tst	r3, r2
 8000fc6:	d008      	beq.n	8000fda <__aeabi_dsub+0x67e>
 8000fc8:	08ce      	lsrs	r6, r1, #3
 8000fca:	4216      	tst	r6, r2
 8000fcc:	d105      	bne.n	8000fda <__aeabi_dsub+0x67e>
 8000fce:	08c0      	lsrs	r0, r0, #3
 8000fd0:	0749      	lsls	r1, r1, #29
 8000fd2:	4308      	orrs	r0, r1
 8000fd4:	0004      	movs	r4, r0
 8000fd6:	465d      	mov	r5, fp
 8000fd8:	0033      	movs	r3, r6
 8000fda:	0f61      	lsrs	r1, r4, #29
 8000fdc:	00e2      	lsls	r2, r4, #3
 8000fde:	0749      	lsls	r1, r1, #29
 8000fe0:	08d2      	lsrs	r2, r2, #3
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	e678      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000fe6:	074b      	lsls	r3, r1, #29
 8000fe8:	08c2      	lsrs	r2, r0, #3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	08cb      	lsrs	r3, r1, #3
 8000fee:	e632      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000ff0:	4448      	add	r0, r9
 8000ff2:	185b      	adds	r3, r3, r1
 8000ff4:	4548      	cmp	r0, r9
 8000ff6:	4192      	sbcs	r2, r2
 8000ff8:	4698      	mov	r8, r3
 8000ffa:	4252      	negs	r2, r2
 8000ffc:	4490      	add	r8, r2
 8000ffe:	4643      	mov	r3, r8
 8001000:	0004      	movs	r4, r0
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	d400      	bmi.n	8001008 <__aeabi_dsub+0x6ac>
 8001006:	e61a      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8001008:	4642      	mov	r2, r8
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <__aeabi_dsub+0x6e8>)
 800100c:	2601      	movs	r6, #1
 800100e:	401a      	ands	r2, r3
 8001010:	4690      	mov	r8, r2
 8001012:	e614      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8001014:	4666      	mov	r6, ip
 8001016:	001f      	movs	r7, r3
 8001018:	3e20      	subs	r6, #32
 800101a:	40f7      	lsrs	r7, r6
 800101c:	2c20      	cmp	r4, #32
 800101e:	d005      	beq.n	800102c <__aeabi_dsub+0x6d0>
 8001020:	2640      	movs	r6, #64	; 0x40
 8001022:	1b36      	subs	r6, r6, r4
 8001024:	40b3      	lsls	r3, r6
 8001026:	464c      	mov	r4, r9
 8001028:	431c      	orrs	r4, r3
 800102a:	46a2      	mov	sl, r4
 800102c:	4654      	mov	r4, sl
 800102e:	1e63      	subs	r3, r4, #1
 8001030:	419c      	sbcs	r4, r3
 8001032:	433c      	orrs	r4, r7
 8001034:	e5c8      	b.n	8000bc8 <__aeabi_dsub+0x26c>
 8001036:	0011      	movs	r1, r2
 8001038:	2300      	movs	r3, #0
 800103a:	2200      	movs	r2, #0
 800103c:	e532      	b.n	8000aa4 <__aeabi_dsub+0x148>
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	000007ff 	.word	0x000007ff
 8001044:	ff7fffff 	.word	0xff7fffff
 8001048:	000007fe 	.word	0x000007fe
 800104c:	464a      	mov	r2, r9
 800104e:	1814      	adds	r4, r2, r0
 8001050:	4284      	cmp	r4, r0
 8001052:	4192      	sbcs	r2, r2
 8001054:	185b      	adds	r3, r3, r1
 8001056:	4698      	mov	r8, r3
 8001058:	4252      	negs	r2, r2
 800105a:	4490      	add	r8, r2
 800105c:	e5e9      	b.n	8000c32 <__aeabi_dsub+0x2d6>
 800105e:	4642      	mov	r2, r8
 8001060:	4322      	orrs	r2, r4
 8001062:	d100      	bne.n	8001066 <__aeabi_dsub+0x70a>
 8001064:	e6a6      	b.n	8000db4 <__aeabi_dsub+0x458>
 8001066:	e5ea      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8001068:	074b      	lsls	r3, r1, #29
 800106a:	08c2      	lsrs	r2, r0, #3
 800106c:	431a      	orrs	r2, r3
 800106e:	08cb      	lsrs	r3, r1, #3
 8001070:	e632      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8001072:	2200      	movs	r2, #0
 8001074:	4901      	ldr	r1, [pc, #4]	; (800107c <__aeabi_dsub+0x720>)
 8001076:	0013      	movs	r3, r2
 8001078:	e514      	b.n	8000aa4 <__aeabi_dsub+0x148>
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	000007ff 	.word	0x000007ff

08001080 <__aeabi_d2iz>:
 8001080:	000a      	movs	r2, r1
 8001082:	b530      	push	{r4, r5, lr}
 8001084:	4c13      	ldr	r4, [pc, #76]	; (80010d4 <__aeabi_d2iz+0x54>)
 8001086:	0053      	lsls	r3, r2, #1
 8001088:	0309      	lsls	r1, r1, #12
 800108a:	0005      	movs	r5, r0
 800108c:	0b09      	lsrs	r1, r1, #12
 800108e:	2000      	movs	r0, #0
 8001090:	0d5b      	lsrs	r3, r3, #21
 8001092:	0fd2      	lsrs	r2, r2, #31
 8001094:	42a3      	cmp	r3, r4
 8001096:	dd04      	ble.n	80010a2 <__aeabi_d2iz+0x22>
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <__aeabi_d2iz+0x58>)
 800109a:	4283      	cmp	r3, r0
 800109c:	dd02      	ble.n	80010a4 <__aeabi_d2iz+0x24>
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <__aeabi_d2iz+0x5c>)
 80010a0:	18d0      	adds	r0, r2, r3
 80010a2:	bd30      	pop	{r4, r5, pc}
 80010a4:	2080      	movs	r0, #128	; 0x80
 80010a6:	0340      	lsls	r0, r0, #13
 80010a8:	4301      	orrs	r1, r0
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <__aeabi_d2iz+0x60>)
 80010ac:	1ac0      	subs	r0, r0, r3
 80010ae:	281f      	cmp	r0, #31
 80010b0:	dd08      	ble.n	80010c4 <__aeabi_d2iz+0x44>
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <__aeabi_d2iz+0x64>)
 80010b4:	1ac3      	subs	r3, r0, r3
 80010b6:	40d9      	lsrs	r1, r3
 80010b8:	000b      	movs	r3, r1
 80010ba:	4258      	negs	r0, r3
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d1f0      	bne.n	80010a2 <__aeabi_d2iz+0x22>
 80010c0:	0018      	movs	r0, r3
 80010c2:	e7ee      	b.n	80010a2 <__aeabi_d2iz+0x22>
 80010c4:	4c08      	ldr	r4, [pc, #32]	; (80010e8 <__aeabi_d2iz+0x68>)
 80010c6:	40c5      	lsrs	r5, r0
 80010c8:	46a4      	mov	ip, r4
 80010ca:	4463      	add	r3, ip
 80010cc:	4099      	lsls	r1, r3
 80010ce:	000b      	movs	r3, r1
 80010d0:	432b      	orrs	r3, r5
 80010d2:	e7f2      	b.n	80010ba <__aeabi_d2iz+0x3a>
 80010d4:	000003fe 	.word	0x000003fe
 80010d8:	0000041d 	.word	0x0000041d
 80010dc:	7fffffff 	.word	0x7fffffff
 80010e0:	00000433 	.word	0x00000433
 80010e4:	00000413 	.word	0x00000413
 80010e8:	fffffbed 	.word	0xfffffbed

080010ec <__aeabi_i2d>:
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d016      	beq.n	8001120 <__aeabi_i2d+0x34>
 80010f2:	17c3      	asrs	r3, r0, #31
 80010f4:	18c5      	adds	r5, r0, r3
 80010f6:	405d      	eors	r5, r3
 80010f8:	0fc4      	lsrs	r4, r0, #31
 80010fa:	0028      	movs	r0, r5
 80010fc:	f000 f864 	bl	80011c8 <__clzsi2>
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <__aeabi_i2d+0x5c>)
 8001102:	1a12      	subs	r2, r2, r0
 8001104:	280a      	cmp	r0, #10
 8001106:	dc16      	bgt.n	8001136 <__aeabi_i2d+0x4a>
 8001108:	0003      	movs	r3, r0
 800110a:	002e      	movs	r6, r5
 800110c:	3315      	adds	r3, #21
 800110e:	409e      	lsls	r6, r3
 8001110:	230b      	movs	r3, #11
 8001112:	1a18      	subs	r0, r3, r0
 8001114:	40c5      	lsrs	r5, r0
 8001116:	0553      	lsls	r3, r2, #21
 8001118:	032d      	lsls	r5, r5, #12
 800111a:	0b2d      	lsrs	r5, r5, #12
 800111c:	0d5b      	lsrs	r3, r3, #21
 800111e:	e003      	b.n	8001128 <__aeabi_i2d+0x3c>
 8001120:	2400      	movs	r4, #0
 8001122:	2300      	movs	r3, #0
 8001124:	2500      	movs	r5, #0
 8001126:	2600      	movs	r6, #0
 8001128:	051b      	lsls	r3, r3, #20
 800112a:	432b      	orrs	r3, r5
 800112c:	07e4      	lsls	r4, r4, #31
 800112e:	4323      	orrs	r3, r4
 8001130:	0030      	movs	r0, r6
 8001132:	0019      	movs	r1, r3
 8001134:	bd70      	pop	{r4, r5, r6, pc}
 8001136:	380b      	subs	r0, #11
 8001138:	4085      	lsls	r5, r0
 800113a:	0553      	lsls	r3, r2, #21
 800113c:	032d      	lsls	r5, r5, #12
 800113e:	2600      	movs	r6, #0
 8001140:	0b2d      	lsrs	r5, r5, #12
 8001142:	0d5b      	lsrs	r3, r3, #21
 8001144:	e7f0      	b.n	8001128 <__aeabi_i2d+0x3c>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	0000041e 	.word	0x0000041e

0800114c <__aeabi_cdrcmple>:
 800114c:	4684      	mov	ip, r0
 800114e:	1c10      	adds	r0, r2, #0
 8001150:	4662      	mov	r2, ip
 8001152:	468c      	mov	ip, r1
 8001154:	1c19      	adds	r1, r3, #0
 8001156:	4663      	mov	r3, ip
 8001158:	e000      	b.n	800115c <__aeabi_cdcmpeq>
 800115a:	46c0      	nop			; (mov r8, r8)

0800115c <__aeabi_cdcmpeq>:
 800115c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800115e:	f000 f90b 	bl	8001378 <__ledf2>
 8001162:	2800      	cmp	r0, #0
 8001164:	d401      	bmi.n	800116a <__aeabi_cdcmpeq+0xe>
 8001166:	2100      	movs	r1, #0
 8001168:	42c8      	cmn	r0, r1
 800116a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800116c <__aeabi_dcmpeq>:
 800116c:	b510      	push	{r4, lr}
 800116e:	f000 f855 	bl	800121c <__eqdf2>
 8001172:	4240      	negs	r0, r0
 8001174:	3001      	adds	r0, #1
 8001176:	bd10      	pop	{r4, pc}

08001178 <__aeabi_dcmplt>:
 8001178:	b510      	push	{r4, lr}
 800117a:	f000 f8fd 	bl	8001378 <__ledf2>
 800117e:	2800      	cmp	r0, #0
 8001180:	db01      	blt.n	8001186 <__aeabi_dcmplt+0xe>
 8001182:	2000      	movs	r0, #0
 8001184:	bd10      	pop	{r4, pc}
 8001186:	2001      	movs	r0, #1
 8001188:	bd10      	pop	{r4, pc}
 800118a:	46c0      	nop			; (mov r8, r8)

0800118c <__aeabi_dcmple>:
 800118c:	b510      	push	{r4, lr}
 800118e:	f000 f8f3 	bl	8001378 <__ledf2>
 8001192:	2800      	cmp	r0, #0
 8001194:	dd01      	ble.n	800119a <__aeabi_dcmple+0xe>
 8001196:	2000      	movs	r0, #0
 8001198:	bd10      	pop	{r4, pc}
 800119a:	2001      	movs	r0, #1
 800119c:	bd10      	pop	{r4, pc}
 800119e:	46c0      	nop			; (mov r8, r8)

080011a0 <__aeabi_dcmpgt>:
 80011a0:	b510      	push	{r4, lr}
 80011a2:	f000 f877 	bl	8001294 <__gedf2>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	dc01      	bgt.n	80011ae <__aeabi_dcmpgt+0xe>
 80011aa:	2000      	movs	r0, #0
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	2001      	movs	r0, #1
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)

080011b4 <__aeabi_dcmpge>:
 80011b4:	b510      	push	{r4, lr}
 80011b6:	f000 f86d 	bl	8001294 <__gedf2>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	da01      	bge.n	80011c2 <__aeabi_dcmpge+0xe>
 80011be:	2000      	movs	r0, #0
 80011c0:	bd10      	pop	{r4, pc}
 80011c2:	2001      	movs	r0, #1
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)

080011c8 <__clzsi2>:
 80011c8:	211c      	movs	r1, #28
 80011ca:	2301      	movs	r3, #1
 80011cc:	041b      	lsls	r3, r3, #16
 80011ce:	4298      	cmp	r0, r3
 80011d0:	d301      	bcc.n	80011d6 <__clzsi2+0xe>
 80011d2:	0c00      	lsrs	r0, r0, #16
 80011d4:	3910      	subs	r1, #16
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	4298      	cmp	r0, r3
 80011da:	d301      	bcc.n	80011e0 <__clzsi2+0x18>
 80011dc:	0a00      	lsrs	r0, r0, #8
 80011de:	3908      	subs	r1, #8
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d301      	bcc.n	80011ea <__clzsi2+0x22>
 80011e6:	0900      	lsrs	r0, r0, #4
 80011e8:	3904      	subs	r1, #4
 80011ea:	a202      	add	r2, pc, #8	; (adr r2, 80011f4 <__clzsi2+0x2c>)
 80011ec:	5c10      	ldrb	r0, [r2, r0]
 80011ee:	1840      	adds	r0, r0, r1
 80011f0:	4770      	bx	lr
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	02020304 	.word	0x02020304
 80011f8:	01010101 	.word	0x01010101
	...

08001204 <__clzdi2>:
 8001204:	b510      	push	{r4, lr}
 8001206:	2900      	cmp	r1, #0
 8001208:	d103      	bne.n	8001212 <__clzdi2+0xe>
 800120a:	f7ff ffdd 	bl	80011c8 <__clzsi2>
 800120e:	3020      	adds	r0, #32
 8001210:	e002      	b.n	8001218 <__clzdi2+0x14>
 8001212:	1c08      	adds	r0, r1, #0
 8001214:	f7ff ffd8 	bl	80011c8 <__clzsi2>
 8001218:	bd10      	pop	{r4, pc}
 800121a:	46c0      	nop			; (mov r8, r8)

0800121c <__eqdf2>:
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	464f      	mov	r7, r9
 8001220:	4646      	mov	r6, r8
 8001222:	46d6      	mov	lr, sl
 8001224:	4694      	mov	ip, r2
 8001226:	4691      	mov	r9, r2
 8001228:	031a      	lsls	r2, r3, #12
 800122a:	0b12      	lsrs	r2, r2, #12
 800122c:	4d18      	ldr	r5, [pc, #96]	; (8001290 <__eqdf2+0x74>)
 800122e:	b5c0      	push	{r6, r7, lr}
 8001230:	004c      	lsls	r4, r1, #1
 8001232:	030f      	lsls	r7, r1, #12
 8001234:	4692      	mov	sl, r2
 8001236:	005a      	lsls	r2, r3, #1
 8001238:	0006      	movs	r6, r0
 800123a:	4680      	mov	r8, r0
 800123c:	0b3f      	lsrs	r7, r7, #12
 800123e:	2001      	movs	r0, #1
 8001240:	0d64      	lsrs	r4, r4, #21
 8001242:	0fc9      	lsrs	r1, r1, #31
 8001244:	0d52      	lsrs	r2, r2, #21
 8001246:	0fdb      	lsrs	r3, r3, #31
 8001248:	42ac      	cmp	r4, r5
 800124a:	d00a      	beq.n	8001262 <__eqdf2+0x46>
 800124c:	42aa      	cmp	r2, r5
 800124e:	d003      	beq.n	8001258 <__eqdf2+0x3c>
 8001250:	4294      	cmp	r4, r2
 8001252:	d101      	bne.n	8001258 <__eqdf2+0x3c>
 8001254:	4557      	cmp	r7, sl
 8001256:	d00d      	beq.n	8001274 <__eqdf2+0x58>
 8001258:	bce0      	pop	{r5, r6, r7}
 800125a:	46ba      	mov	sl, r7
 800125c:	46b1      	mov	r9, r6
 800125e:	46a8      	mov	r8, r5
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001262:	003d      	movs	r5, r7
 8001264:	4335      	orrs	r5, r6
 8001266:	d1f7      	bne.n	8001258 <__eqdf2+0x3c>
 8001268:	42a2      	cmp	r2, r4
 800126a:	d1f5      	bne.n	8001258 <__eqdf2+0x3c>
 800126c:	4652      	mov	r2, sl
 800126e:	4665      	mov	r5, ip
 8001270:	432a      	orrs	r2, r5
 8001272:	d1f1      	bne.n	8001258 <__eqdf2+0x3c>
 8001274:	2001      	movs	r0, #1
 8001276:	45c8      	cmp	r8, r9
 8001278:	d1ee      	bne.n	8001258 <__eqdf2+0x3c>
 800127a:	4299      	cmp	r1, r3
 800127c:	d006      	beq.n	800128c <__eqdf2+0x70>
 800127e:	2c00      	cmp	r4, #0
 8001280:	d1ea      	bne.n	8001258 <__eqdf2+0x3c>
 8001282:	433e      	orrs	r6, r7
 8001284:	0030      	movs	r0, r6
 8001286:	1e46      	subs	r6, r0, #1
 8001288:	41b0      	sbcs	r0, r6
 800128a:	e7e5      	b.n	8001258 <__eqdf2+0x3c>
 800128c:	2000      	movs	r0, #0
 800128e:	e7e3      	b.n	8001258 <__eqdf2+0x3c>
 8001290:	000007ff 	.word	0x000007ff

08001294 <__gedf2>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	464e      	mov	r6, r9
 8001298:	4645      	mov	r5, r8
 800129a:	4657      	mov	r7, sl
 800129c:	46de      	mov	lr, fp
 800129e:	0004      	movs	r4, r0
 80012a0:	0018      	movs	r0, r3
 80012a2:	b5e0      	push	{r5, r6, r7, lr}
 80012a4:	0016      	movs	r6, r2
 80012a6:	031b      	lsls	r3, r3, #12
 80012a8:	0b1b      	lsrs	r3, r3, #12
 80012aa:	4d32      	ldr	r5, [pc, #200]	; (8001374 <__gedf2+0xe0>)
 80012ac:	030f      	lsls	r7, r1, #12
 80012ae:	004a      	lsls	r2, r1, #1
 80012b0:	4699      	mov	r9, r3
 80012b2:	0043      	lsls	r3, r0, #1
 80012b4:	46a4      	mov	ip, r4
 80012b6:	46b0      	mov	r8, r6
 80012b8:	0b3f      	lsrs	r7, r7, #12
 80012ba:	0d52      	lsrs	r2, r2, #21
 80012bc:	0fc9      	lsrs	r1, r1, #31
 80012be:	0d5b      	lsrs	r3, r3, #21
 80012c0:	0fc0      	lsrs	r0, r0, #31
 80012c2:	42aa      	cmp	r2, r5
 80012c4:	d029      	beq.n	800131a <__gedf2+0x86>
 80012c6:	42ab      	cmp	r3, r5
 80012c8:	d018      	beq.n	80012fc <__gedf2+0x68>
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d12a      	bne.n	8001324 <__gedf2+0x90>
 80012ce:	433c      	orrs	r4, r7
 80012d0:	46a3      	mov	fp, r4
 80012d2:	4265      	negs	r5, r4
 80012d4:	4165      	adcs	r5, r4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <__gedf2+0x4c>
 80012da:	464c      	mov	r4, r9
 80012dc:	4326      	orrs	r6, r4
 80012de:	d027      	beq.n	8001330 <__gedf2+0x9c>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d115      	bne.n	8001310 <__gedf2+0x7c>
 80012e4:	4281      	cmp	r1, r0
 80012e6:	d028      	beq.n	800133a <__gedf2+0xa6>
 80012e8:	2002      	movs	r0, #2
 80012ea:	3901      	subs	r1, #1
 80012ec:	4008      	ands	r0, r1
 80012ee:	3801      	subs	r0, #1
 80012f0:	bcf0      	pop	{r4, r5, r6, r7}
 80012f2:	46bb      	mov	fp, r7
 80012f4:	46b2      	mov	sl, r6
 80012f6:	46a9      	mov	r9, r5
 80012f8:	46a0      	mov	r8, r4
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fc:	464d      	mov	r5, r9
 80012fe:	432e      	orrs	r6, r5
 8001300:	d12f      	bne.n	8001362 <__gedf2+0xce>
 8001302:	2a00      	cmp	r2, #0
 8001304:	d1ee      	bne.n	80012e4 <__gedf2+0x50>
 8001306:	433c      	orrs	r4, r7
 8001308:	4265      	negs	r5, r4
 800130a:	4165      	adcs	r5, r4
 800130c:	2d00      	cmp	r5, #0
 800130e:	d0e9      	beq.n	80012e4 <__gedf2+0x50>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1ed      	bne.n	80012f0 <__gedf2+0x5c>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7ea      	b.n	80012f0 <__gedf2+0x5c>
 800131a:	003d      	movs	r5, r7
 800131c:	4325      	orrs	r5, r4
 800131e:	d120      	bne.n	8001362 <__gedf2+0xce>
 8001320:	4293      	cmp	r3, r2
 8001322:	d0eb      	beq.n	80012fc <__gedf2+0x68>
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1dd      	bne.n	80012e4 <__gedf2+0x50>
 8001328:	464c      	mov	r4, r9
 800132a:	4326      	orrs	r6, r4
 800132c:	d1da      	bne.n	80012e4 <__gedf2+0x50>
 800132e:	e7db      	b.n	80012e8 <__gedf2+0x54>
 8001330:	465b      	mov	r3, fp
 8001332:	2000      	movs	r0, #0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0db      	beq.n	80012f0 <__gedf2+0x5c>
 8001338:	e7d6      	b.n	80012e8 <__gedf2+0x54>
 800133a:	429a      	cmp	r2, r3
 800133c:	dc0a      	bgt.n	8001354 <__gedf2+0xc0>
 800133e:	dbe7      	blt.n	8001310 <__gedf2+0x7c>
 8001340:	454f      	cmp	r7, r9
 8001342:	d8d1      	bhi.n	80012e8 <__gedf2+0x54>
 8001344:	d010      	beq.n	8001368 <__gedf2+0xd4>
 8001346:	2000      	movs	r0, #0
 8001348:	454f      	cmp	r7, r9
 800134a:	d2d1      	bcs.n	80012f0 <__gedf2+0x5c>
 800134c:	2900      	cmp	r1, #0
 800134e:	d0e1      	beq.n	8001314 <__gedf2+0x80>
 8001350:	0008      	movs	r0, r1
 8001352:	e7cd      	b.n	80012f0 <__gedf2+0x5c>
 8001354:	4243      	negs	r3, r0
 8001356:	4158      	adcs	r0, r3
 8001358:	2302      	movs	r3, #2
 800135a:	4240      	negs	r0, r0
 800135c:	4018      	ands	r0, r3
 800135e:	3801      	subs	r0, #1
 8001360:	e7c6      	b.n	80012f0 <__gedf2+0x5c>
 8001362:	2002      	movs	r0, #2
 8001364:	4240      	negs	r0, r0
 8001366:	e7c3      	b.n	80012f0 <__gedf2+0x5c>
 8001368:	45c4      	cmp	ip, r8
 800136a:	d8bd      	bhi.n	80012e8 <__gedf2+0x54>
 800136c:	2000      	movs	r0, #0
 800136e:	45c4      	cmp	ip, r8
 8001370:	d2be      	bcs.n	80012f0 <__gedf2+0x5c>
 8001372:	e7eb      	b.n	800134c <__gedf2+0xb8>
 8001374:	000007ff 	.word	0x000007ff

08001378 <__ledf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	464e      	mov	r6, r9
 800137c:	4645      	mov	r5, r8
 800137e:	4657      	mov	r7, sl
 8001380:	46de      	mov	lr, fp
 8001382:	0004      	movs	r4, r0
 8001384:	0018      	movs	r0, r3
 8001386:	b5e0      	push	{r5, r6, r7, lr}
 8001388:	0016      	movs	r6, r2
 800138a:	031b      	lsls	r3, r3, #12
 800138c:	0b1b      	lsrs	r3, r3, #12
 800138e:	4d31      	ldr	r5, [pc, #196]	; (8001454 <__ledf2+0xdc>)
 8001390:	030f      	lsls	r7, r1, #12
 8001392:	004a      	lsls	r2, r1, #1
 8001394:	4699      	mov	r9, r3
 8001396:	0043      	lsls	r3, r0, #1
 8001398:	46a4      	mov	ip, r4
 800139a:	46b0      	mov	r8, r6
 800139c:	0b3f      	lsrs	r7, r7, #12
 800139e:	0d52      	lsrs	r2, r2, #21
 80013a0:	0fc9      	lsrs	r1, r1, #31
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fc0      	lsrs	r0, r0, #31
 80013a6:	42aa      	cmp	r2, r5
 80013a8:	d011      	beq.n	80013ce <__ledf2+0x56>
 80013aa:	42ab      	cmp	r3, r5
 80013ac:	d014      	beq.n	80013d8 <__ledf2+0x60>
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d12f      	bne.n	8001412 <__ledf2+0x9a>
 80013b2:	433c      	orrs	r4, r7
 80013b4:	46a3      	mov	fp, r4
 80013b6:	4265      	negs	r5, r4
 80013b8:	4165      	adcs	r5, r4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d114      	bne.n	80013e8 <__ledf2+0x70>
 80013be:	464c      	mov	r4, r9
 80013c0:	4326      	orrs	r6, r4
 80013c2:	d111      	bne.n	80013e8 <__ledf2+0x70>
 80013c4:	465b      	mov	r3, fp
 80013c6:	2000      	movs	r0, #0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d017      	beq.n	80013fc <__ledf2+0x84>
 80013cc:	e010      	b.n	80013f0 <__ledf2+0x78>
 80013ce:	003d      	movs	r5, r7
 80013d0:	4325      	orrs	r5, r4
 80013d2:	d112      	bne.n	80013fa <__ledf2+0x82>
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d11c      	bne.n	8001412 <__ledf2+0x9a>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d10d      	bne.n	80013fa <__ledf2+0x82>
 80013de:	2a00      	cmp	r2, #0
 80013e0:	d104      	bne.n	80013ec <__ledf2+0x74>
 80013e2:	433c      	orrs	r4, r7
 80013e4:	4265      	negs	r5, r4
 80013e6:	4165      	adcs	r5, r4
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	d10d      	bne.n	8001408 <__ledf2+0x90>
 80013ec:	4281      	cmp	r1, r0
 80013ee:	d016      	beq.n	800141e <__ledf2+0xa6>
 80013f0:	2002      	movs	r0, #2
 80013f2:	3901      	subs	r1, #1
 80013f4:	4008      	ands	r0, r1
 80013f6:	3801      	subs	r0, #1
 80013f8:	e000      	b.n	80013fc <__ledf2+0x84>
 80013fa:	2002      	movs	r0, #2
 80013fc:	bcf0      	pop	{r4, r5, r6, r7}
 80013fe:	46bb      	mov	fp, r7
 8001400:	46b2      	mov	sl, r6
 8001402:	46a9      	mov	r9, r5
 8001404:	46a0      	mov	r8, r4
 8001406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001408:	2800      	cmp	r0, #0
 800140a:	d1f7      	bne.n	80013fc <__ledf2+0x84>
 800140c:	2001      	movs	r0, #1
 800140e:	4240      	negs	r0, r0
 8001410:	e7f4      	b.n	80013fc <__ledf2+0x84>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ea      	bne.n	80013ec <__ledf2+0x74>
 8001416:	464c      	mov	r4, r9
 8001418:	4326      	orrs	r6, r4
 800141a:	d1e7      	bne.n	80013ec <__ledf2+0x74>
 800141c:	e7e8      	b.n	80013f0 <__ledf2+0x78>
 800141e:	429a      	cmp	r2, r3
 8001420:	dd06      	ble.n	8001430 <__ledf2+0xb8>
 8001422:	4243      	negs	r3, r0
 8001424:	4158      	adcs	r0, r3
 8001426:	2302      	movs	r3, #2
 8001428:	4240      	negs	r0, r0
 800142a:	4018      	ands	r0, r3
 800142c:	3801      	subs	r0, #1
 800142e:	e7e5      	b.n	80013fc <__ledf2+0x84>
 8001430:	429a      	cmp	r2, r3
 8001432:	dbe9      	blt.n	8001408 <__ledf2+0x90>
 8001434:	454f      	cmp	r7, r9
 8001436:	d8db      	bhi.n	80013f0 <__ledf2+0x78>
 8001438:	d006      	beq.n	8001448 <__ledf2+0xd0>
 800143a:	2000      	movs	r0, #0
 800143c:	454f      	cmp	r7, r9
 800143e:	d2dd      	bcs.n	80013fc <__ledf2+0x84>
 8001440:	2900      	cmp	r1, #0
 8001442:	d0e3      	beq.n	800140c <__ledf2+0x94>
 8001444:	0008      	movs	r0, r1
 8001446:	e7d9      	b.n	80013fc <__ledf2+0x84>
 8001448:	45c4      	cmp	ip, r8
 800144a:	d8d1      	bhi.n	80013f0 <__ledf2+0x78>
 800144c:	2000      	movs	r0, #0
 800144e:	45c4      	cmp	ip, r8
 8001450:	d2d4      	bcs.n	80013fc <__ledf2+0x84>
 8001452:	e7f5      	b.n	8001440 <__ledf2+0xc8>
 8001454:	000007ff 	.word	0x000007ff

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	0002      	movs	r2, r0
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b7f      	cmp	r3, #127	; 0x7f
 800146a:	d809      	bhi.n	8001480 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	001a      	movs	r2, r3
 8001472:	231f      	movs	r3, #31
 8001474:	401a      	ands	r2, r3
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_EnableIRQ+0x30>)
 8001478:	2101      	movs	r1, #1
 800147a:	4091      	lsls	r1, r2
 800147c:	000a      	movs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
  }
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	0002      	movs	r2, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b7f      	cmp	r3, #127	; 0x7f
 80014a0:	d828      	bhi.n	80014f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a2:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <__NVIC_SetPriority+0xd4>)
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	33c0      	adds	r3, #192	; 0xc0
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	589b      	ldr	r3, [r3, r2]
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	0011      	movs	r1, r2
 80014b8:	2203      	movs	r2, #3
 80014ba:	400a      	ands	r2, r1
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	21ff      	movs	r1, #255	; 0xff
 80014c0:	4091      	lsls	r1, r2
 80014c2:	000a      	movs	r2, r1
 80014c4:	43d2      	mvns	r2, r2
 80014c6:	401a      	ands	r2, r3
 80014c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	401a      	ands	r2, r3
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	0018      	movs	r0, r3
 80014d8:	2303      	movs	r3, #3
 80014da:	4003      	ands	r3, r0
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e0:	481f      	ldr	r0, [pc, #124]	; (8001560 <__NVIC_SetPriority+0xd4>)
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	430a      	orrs	r2, r1
 80014ec:	33c0      	adds	r3, #192	; 0xc0
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014f2:	e031      	b.n	8001558 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <__NVIC_SetPriority+0xd8>)
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	0019      	movs	r1, r3
 80014fc:	230f      	movs	r3, #15
 80014fe:	400b      	ands	r3, r1
 8001500:	3b08      	subs	r3, #8
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3306      	adds	r3, #6
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	18d3      	adds	r3, r2, r3
 800150a:	3304      	adds	r3, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	1dfa      	adds	r2, r7, #7
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	0011      	movs	r1, r2
 8001514:	2203      	movs	r2, #3
 8001516:	400a      	ands	r2, r1
 8001518:	00d2      	lsls	r2, r2, #3
 800151a:	21ff      	movs	r1, #255	; 0xff
 800151c:	4091      	lsls	r1, r2
 800151e:	000a      	movs	r2, r1
 8001520:	43d2      	mvns	r2, r2
 8001522:	401a      	ands	r2, r3
 8001524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	019b      	lsls	r3, r3, #6
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	401a      	ands	r2, r3
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	0018      	movs	r0, r3
 8001534:	2303      	movs	r3, #3
 8001536:	4003      	ands	r3, r0
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <__NVIC_SetPriority+0xd8>)
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	001c      	movs	r4, r3
 8001544:	230f      	movs	r3, #15
 8001546:	4023      	ands	r3, r4
 8001548:	3b08      	subs	r3, #8
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	430a      	orrs	r2, r1
 800154e:	3306      	adds	r3, #6
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	18c3      	adds	r3, r0, r3
 8001554:	3304      	adds	r3, #4
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b003      	add	sp, #12
 800155e:	bd90      	pop	{r4, r7, pc}
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2201      	movs	r2, #1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}

08001584 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	4393      	bics	r3, r2
 80015b0:	001a      	movs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b002      	add	sp, #8
 80015bc:	bd80      	pop	{r7, pc}

080015be <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	621a      	str	r2, [r3, #32]
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d00d      	beq.n	8001608 <LL_TIM_OC_DisableFast+0x2c>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d008      	beq.n	8001604 <LL_TIM_OC_DisableFast+0x28>
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d101      	bne.n	8001600 <LL_TIM_OC_DisableFast+0x24>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e004      	b.n	800160a <LL_TIM_OC_DisableFast+0x2e>
 8001600:	2306      	movs	r3, #6
 8001602:	e002      	b.n	800160a <LL_TIM_OC_DisableFast+0x2e>
 8001604:	2302      	movs	r3, #2
 8001606:	e000      	b.n	800160a <LL_TIM_OC_DisableFast+0x2e>
 8001608:	2300      	movs	r3, #0
 800160a:	200f      	movs	r0, #15
 800160c:	183a      	adds	r2, r7, r0
 800160e:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3318      	adds	r3, #24
 8001614:	0019      	movs	r1, r3
 8001616:	183b      	adds	r3, r7, r0
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LL_TIM_OC_DisableFast+0x68>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	18cb      	adds	r3, r1, r3
 8001620:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	183a      	adds	r2, r7, r0
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	4907      	ldr	r1, [pc, #28]	; (8001648 <LL_TIM_OC_DisableFast+0x6c>)
 800162c:	5c8a      	ldrb	r2, [r1, r2]
 800162e:	0011      	movs	r1, r2
 8001630:	2204      	movs	r2, #4
 8001632:	408a      	lsls	r2, r1
 8001634:	43d2      	mvns	r2, r2
 8001636:	401a      	ands	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	601a      	str	r2, [r3, #0]

}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}
 8001644:	08003e84 	.word	0x08003e84
 8001648:	08003e8c 	.word	0x08003e8c

0800164c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d00d      	beq.n	8001678 <LL_TIM_OC_EnablePreload+0x2c>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b10      	cmp	r3, #16
 8001660:	d008      	beq.n	8001674 <LL_TIM_OC_EnablePreload+0x28>
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	429a      	cmp	r2, r3
 800166a:	d101      	bne.n	8001670 <LL_TIM_OC_EnablePreload+0x24>
 800166c:	2304      	movs	r3, #4
 800166e:	e004      	b.n	800167a <LL_TIM_OC_EnablePreload+0x2e>
 8001670:	2306      	movs	r3, #6
 8001672:	e002      	b.n	800167a <LL_TIM_OC_EnablePreload+0x2e>
 8001674:	2302      	movs	r3, #2
 8001676:	e000      	b.n	800167a <LL_TIM_OC_EnablePreload+0x2e>
 8001678:	2300      	movs	r3, #0
 800167a:	200f      	movs	r0, #15
 800167c:	183a      	adds	r2, r7, r0
 800167e:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3318      	adds	r3, #24
 8001684:	0019      	movs	r1, r3
 8001686:	183b      	adds	r3, r7, r0
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LL_TIM_OC_EnablePreload+0x68>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	18cb      	adds	r3, r1, r3
 8001690:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	183b      	adds	r3, r7, r0
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4907      	ldr	r1, [pc, #28]	; (80016b8 <LL_TIM_OC_EnablePreload+0x6c>)
 800169c:	5ccb      	ldrb	r3, [r1, r3]
 800169e:	0019      	movs	r1, r3
 80016a0:	2308      	movs	r3, #8
 80016a2:	408b      	lsls	r3, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b004      	add	sp, #16
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	08003e84 	.word	0x08003e84
 80016b8:	08003e8c 	.word	0x08003e8c

080016bc <LL_TIM_OC_DisablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d00d      	beq.n	80016e8 <LL_TIM_OC_DisablePreload+0x2c>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d008      	beq.n	80016e4 <LL_TIM_OC_DisablePreload+0x28>
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	429a      	cmp	r2, r3
 80016da:	d101      	bne.n	80016e0 <LL_TIM_OC_DisablePreload+0x24>
 80016dc:	2304      	movs	r3, #4
 80016de:	e004      	b.n	80016ea <LL_TIM_OC_DisablePreload+0x2e>
 80016e0:	2306      	movs	r3, #6
 80016e2:	e002      	b.n	80016ea <LL_TIM_OC_DisablePreload+0x2e>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e000      	b.n	80016ea <LL_TIM_OC_DisablePreload+0x2e>
 80016e8:	2300      	movs	r3, #0
 80016ea:	200f      	movs	r0, #15
 80016ec:	183a      	adds	r2, r7, r0
 80016ee:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3318      	adds	r3, #24
 80016f4:	0019      	movs	r1, r3
 80016f6:	183b      	adds	r3, r7, r0
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <LL_TIM_OC_DisablePreload+0x68>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	18cb      	adds	r3, r1, r3
 8001700:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	183a      	adds	r2, r7, r0
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	4907      	ldr	r1, [pc, #28]	; (8001728 <LL_TIM_OC_DisablePreload+0x6c>)
 800170c:	5c8a      	ldrb	r2, [r1, r2]
 800170e:	0011      	movs	r1, r2
 8001710:	2208      	movs	r2, #8
 8001712:	408a      	lsls	r2, r1
 8001714:	43d2      	mvns	r2, r2
 8001716:	401a      	ands	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b004      	add	sp, #16
 8001722:	bd80      	pop	{r7, pc}
 8001724:	08003e84 	.word	0x08003e84
 8001728:	08003e8c 	.word	0x08003e8c

0800172c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}

0800175c <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2270      	movs	r2, #112	; 0x70
 8001784:	4393      	bics	r3, r2
 8001786:	001a      	movs	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	605a      	str	r2, [r3, #4]
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}

08001798 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	4393      	bics	r3, r2
 80017a8:	001a      	movs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	609a      	str	r2, [r3, #8]
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}

080017ce <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <LL_APB1_GRP1_EnableClock+0x28>)
 80017f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <LL_APB1_GRP1_EnableClock+0x28>)
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <LL_APB1_GRP1_EnableClock+0x28>)
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b004      	add	sp, #16
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000

08001814 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <LL_IOP_GRP1_EnableClock+0x28>)
 800181e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <LL_IOP_GRP1_EnableClock+0x28>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	430a      	orrs	r2, r1
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <LL_IOP_GRP1_EnableClock+0x28>)
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4013      	ands	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000

08001840 <changeFreq>:
//周波数変更
void changeFreq(unsigned long freq) {
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	b091      	sub	sp, #68	; 0x44
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8001848:	2630      	movs	r6, #48	; 0x30
 800184a:	19bb      	adds	r3, r7, r6
 800184c:	0018      	movs	r0, r3
 800184e:	2310      	movs	r3, #16
 8001850:	001a      	movs	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	f002 fae2 	bl	8003e1c <memset>
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8001858:	2520      	movs	r5, #32
 800185a:	197b      	adds	r3, r7, r5
 800185c:	0018      	movs	r0, r3
 800185e:	2310      	movs	r3, #16
 8001860:	001a      	movs	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f002 fada 	bl	8003e1c <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001868:	2408      	movs	r4, #8
 800186a:	193b      	adds	r3, r7, r4
 800186c:	0018      	movs	r0, r3
 800186e:	2318      	movs	r3, #24
 8001870:	001a      	movs	r2, r3
 8001872:	2100      	movs	r1, #0
 8001874:	f002 fad2 	bl	8003e1c <memset>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff ffb5 	bl	80017e8 <LL_APB1_GRP1_EnableClock>
	TIM_InitStruct.Prescaler = (125000 / freq) - 1;
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	487f      	ldr	r0, [pc, #508]	; (8001a80 <changeFreq+0x240>)
 8001882:	f7fe fc41 	bl	8000108 <__udivsi3>
 8001886:	0003      	movs	r3, r0
 8001888:	b29b      	uxth	r3, r3
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	19bb      	adds	r3, r7, r6
 8001890:	801a      	strh	r2, [r3, #0]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001892:	19bb      	adds	r3, r7, r6
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Autoreload = 255;
 8001898:	19bb      	adds	r3, r7, r6
 800189a:	22ff      	movs	r2, #255	; 0xff
 800189c:	609a      	str	r2, [r3, #8]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800189e:	19bb      	adds	r3, r7, r6
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
	LL_TIM_Init(TIM2, &TIM_InitStruct);
 80018a4:	19ba      	adds	r2, r7, r6
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f002 f8c5 	bl	8003a3c <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM2);
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff fe72 	bl	80015a0 <LL_TIM_DisableARRPreload>
	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	05db      	lsls	r3, r3, #23
 80018c0:	2101      	movs	r1, #1
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7ff fec2 	bl	800164c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80018c8:	197b      	adds	r3, r7, r5
 80018ca:	2260      	movs	r2, #96	; 0x60
 80018cc:	601a      	str	r2, [r3, #0]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80018ce:	197b      	adds	r3, r7, r5
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitStruct.CompareValue = 0;
 80018d4:	197b      	adds	r3, r7, r5
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80018da:	197b      	adds	r3, r7, r5
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80018e0:	197a      	adds	r2, r7, r5
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	05db      	lsls	r3, r3, #23
 80018e6:	2101      	movs	r1, #1
 80018e8:	0018      	movs	r0, r3
 80018ea:	f002 f8ef 	bl	8003acc <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	05db      	lsls	r3, r3, #23
 80018f2:	2101      	movs	r1, #1
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fe71 	bl	80015dc <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	005a      	lsls	r2, r3, #1
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	05db      	lsls	r3, r3, #23
 8001902:	0011      	movs	r1, r2
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff fea1 	bl	800164c <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800190a:	197a      	adds	r2, r7, r5
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	0059      	lsls	r1, r3, #1
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	05db      	lsls	r3, r3, #23
 8001914:	0018      	movs	r0, r3
 8001916:	f002 f8d9 	bl	8003acc <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	005a      	lsls	r2, r3, #1
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fe59 	bl	80015dc <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	05db      	lsls	r3, r3, #23
 8001932:	0011      	movs	r1, r2
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff fe89 	bl	800164c <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800193a:	197a      	adds	r2, r7, r5
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	0159      	lsls	r1, r3, #5
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	05db      	lsls	r3, r3, #23
 8001944:	0018      	movs	r0, r3
 8001946:	f002 f8c1 	bl	8003acc <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	0011      	movs	r1, r2
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff fe41 	bl	80015dc <LL_TIM_OC_DisableFast>
	LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	05db      	lsls	r3, r3, #23
 800195e:	2100      	movs	r1, #0
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff ff07 	bl	8001774 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM2);
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	05db      	lsls	r3, r3, #23
 800196a:	0018      	movs	r0, r3
 800196c:	f7ff ff14 	bl	8001798 <LL_TIM_DisableMasterSlaveMode>
	LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	05db      	lsls	r3, r3, #23
 8001974:	2101      	movs	r1, #1
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff fea0 	bl	80016bc <LL_TIM_OC_DisablePreload>
	LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	005a      	lsls	r2, r3, #1
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	05db      	lsls	r3, r3, #23
 8001984:	0011      	movs	r1, r2
 8001986:	0018      	movs	r0, r3
 8001988:	f7ff fe98 	bl	80016bc <LL_TIM_OC_DisablePreload>
	LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	05db      	lsls	r3, r3, #23
 8001994:	0011      	movs	r1, r2
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff fe90 	bl	80016bc <LL_TIM_OC_DisablePreload>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff ff39 	bl	8001814 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80019a2:	2002      	movs	r0, #2
 80019a4:	f7ff ff36 	bl	8001814 <LL_IOP_GRP1_EnableClock>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	2220      	movs	r2, #32
 80019ac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2202      	movs	r2, #2
 80019b2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	2205      	movs	r2, #5
 80019ca:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	193a      	adds	r2, r7, r4
 80019ce:	23a0      	movs	r3, #160	; 0xa0
 80019d0:	05db      	lsls	r3, r3, #23
 80019d2:	0011      	movs	r1, r2
 80019d4:	0018      	movs	r0, r3
 80019d6:	f001 ff7c 	bl	80038d2 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2202      	movs	r2, #2
 80019de:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2202      	movs	r2, #2
 80019e4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	2205      	movs	r2, #5
 80019fc:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <changeFreq+0x244>)
 8001a02:	0019      	movs	r1, r3
 8001a04:	0010      	movs	r0, r2
 8001a06:	f001 ff64 	bl	80038d2 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a0a:	0021      	movs	r1, r4
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	00d2      	lsls	r2, r2, #3
 8001a12:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2202      	movs	r2, #2
 8001a18:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2205      	movs	r2, #5
 8001a30:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	187a      	adds	r2, r7, r1
 8001a34:	23a0      	movs	r3, #160	; 0xa0
 8001a36:	05db      	lsls	r3, r3, #23
 8001a38:	0011      	movs	r1, r2
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f001 ff49 	bl	80038d2 <LL_GPIO_Init>

	LL_TIM_EnableCounter(TIM2);
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	05db      	lsls	r3, r3, #23
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff fd8f 	bl	8001568 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	05db      	lsls	r3, r3, #23
 8001a52:	0011      	movs	r1, r2
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff fdb2 	bl	80015be <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH4);
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	05db      	lsls	r3, r3, #23
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff fdaa 	bl	80015be <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	2101      	movs	r1, #1
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff fda4 	bl	80015be <LL_TIM_CC_EnableChannel>
}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b011      	add	sp, #68	; 0x44
 8001a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	0001e848 	.word	0x0001e848
 8001a84:	50000400 	.word	0x50000400

08001a88 <ESC_Drive>:
		21, 25, 29, 33, 37, 42, 46, 51, 56, 62, 67, 73, 78, 84, 90, 96, 102,
		108, 115, 121 };

int boot[] = { };

void ESC_Drive() {
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(SystemCoreClock / (50000U / uwTickFreq));
 8001a8e:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <ESC_Drive+0x128>)
 8001a90:	681c      	ldr	r4, [r3, #0]
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <ESC_Drive+0x12c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	0019      	movs	r1, r3
 8001a98:	4847      	ldr	r0, [pc, #284]	; (8001bb8 <ESC_Drive+0x130>)
 8001a9a:	f7fe fb35 	bl	8000108 <__udivsi3>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	0020      	movs	r0, r4
 8001aa4:	f7fe fb30 	bl	8000108 <__udivsi3>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 ff7b 	bl	80029a6 <HAL_SYSTICK_Config>

	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	009a      	lsls	r2, r3, #2
 8001ab4:	23a0      	movs	r3, #160	; 0xa0
 8001ab6:	05db      	lsls	r3, r3, #23
 8001ab8:	0011      	movs	r1, r2
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7ff fe7b 	bl	80017b6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	01db      	lsls	r3, r3, #7
 8001ac4:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <ESC_Drive+0x134>)
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	0010      	movs	r0, r2
 8001aca:	f7ff fe74 	bl	80017b6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 8001ace:	23a0      	movs	r3, #160	; 0xa0
 8001ad0:	05db      	lsls	r3, r3, #23
 8001ad2:	2140      	movs	r1, #64	; 0x40
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fe6e 	bl	80017b6 <LL_GPIO_SetOutputPin>
	for (int i = 0; i < 128; i++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	e05f      	b.n	8001ba0 <ESC_Drive+0x118>
		LL_TIM_OC_SetCompareCH3(TIM2, waveTable[i] * 0.3);
 8001ae0:	4a37      	ldr	r2, [pc, #220]	; (8001bc0 <ESC_Drive+0x138>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	18d3      	adds	r3, r2, r3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff faff 	bl	80010ec <__aeabi_i2d>
 8001aee:	4a35      	ldr	r2, [pc, #212]	; (8001bc4 <ESC_Drive+0x13c>)
 8001af0:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <ESC_Drive+0x140>)
 8001af2:	f7fe fcc7 	bl	8000484 <__aeabi_dmul>
 8001af6:	0002      	movs	r2, r0
 8001af8:	000b      	movs	r3, r1
 8001afa:	0010      	movs	r0, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	f7fe fbd7 	bl	80002b0 <__aeabi_d2uiz>
 8001b02:	0002      	movs	r2, r0
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	05db      	lsls	r3, r3, #23
 8001b08:	0011      	movs	r1, r2
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff fe1a 	bl	8001744 <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, waveTable[(i + 43) % 128] * 0.3);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	332b      	adds	r3, #43	; 0x2b
 8001b14:	4a2d      	ldr	r2, [pc, #180]	; (8001bcc <ESC_Drive+0x144>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	d504      	bpl.n	8001b24 <ESC_Drive+0x9c>
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	4252      	negs	r2, r2
 8001b20:	4313      	orrs	r3, r2
 8001b22:	3301      	adds	r3, #1
 8001b24:	001a      	movs	r2, r3
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <ESC_Drive+0x138>)
 8001b28:	5c9b      	ldrb	r3, [r3, r2]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f7ff fade 	bl	80010ec <__aeabi_i2d>
 8001b30:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <ESC_Drive+0x13c>)
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <ESC_Drive+0x140>)
 8001b34:	f7fe fca6 	bl	8000484 <__aeabi_dmul>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	000b      	movs	r3, r1
 8001b3c:	0010      	movs	r0, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	f7fe fbb6 	bl	80002b0 <__aeabi_d2uiz>
 8001b44:	0002      	movs	r2, r0
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff fe05 	bl	800175c <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, waveTable[(i + 85) % 128] * 0.3);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3355      	adds	r3, #85	; 0x55
 8001b56:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <ESC_Drive+0x144>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d504      	bpl.n	8001b66 <ESC_Drive+0xde>
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	4252      	negs	r2, r2
 8001b62:	4313      	orrs	r3, r2
 8001b64:	3301      	adds	r3, #1
 8001b66:	001a      	movs	r2, r3
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <ESC_Drive+0x138>)
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff fabd 	bl	80010ec <__aeabi_i2d>
 8001b72:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <ESC_Drive+0x13c>)
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <ESC_Drive+0x140>)
 8001b76:	f7fe fc85 	bl	8000484 <__aeabi_dmul>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	000b      	movs	r3, r1
 8001b7e:	0010      	movs	r0, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	f7fe fb95 	bl	80002b0 <__aeabi_d2uiz>
 8001b86:	0002      	movs	r2, r0
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	05db      	lsls	r3, r3, #23
 8001b8c:	0011      	movs	r1, r2
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff fdcc 	bl	800172c <LL_TIM_OC_SetCompareCH1>
//		sekuta(i, 20);
		HAL_Delay(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f000 fc5f 	bl	8002458 <HAL_Delay>
	for (int i = 0; i < 128; i++) {
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba4:	dd9c      	ble.n	8001ae0 <ESC_Drive+0x58>
	}
}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b003      	add	sp, #12
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	20000080 	.word	0x20000080
 8001bb4:	20000088 	.word	0x20000088
 8001bb8:	0000c350 	.word	0x0000c350
 8001bbc:	50000800 	.word	0x50000800
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	33333333 	.word	0x33333333
 8001bc8:	3fd33333 	.word	0x3fd33333
 8001bcc:	8000007f 	.word	0x8000007f

08001bd0 <ESC_initialize>:

void ESC_initialize() {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
	changeFreq(1047);
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <ESC_initialize+0xe4>)
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fe31 	bl	8001840 <changeFreq>
	unsigned long timer = HAL_GetTick();
 8001bde:	f000 fc31 	bl	8002444 <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	607b      	str	r3, [r7, #4]
	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	009a      	lsls	r2, r3, #2
 8001bea:	23a0      	movs	r3, #160	; 0xa0
 8001bec:	05db      	lsls	r3, r3, #23
 8001bee:	0011      	movs	r1, r2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff fde0 	bl	80017b6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	01db      	lsls	r3, r3, #7
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <ESC_initialize+0xe8>)
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	0010      	movs	r0, r2
 8001c00:	f7ff fdd9 	bl	80017b6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 8001c04:	23a0      	movs	r3, #160	; 0xa0
 8001c06:	05db      	lsls	r3, r3, #23
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7ff fdd3 	bl	80017b6 <LL_GPIO_SetOutputPin>
	while (HAL_GetTick() - timer < 200) {
 8001c10:	e041      	b.n	8001c96 <ESC_initialize+0xc6>
		LL_TIM_OC_SetCompareCH3(TIM2, waveTable[0] * 0.1);
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <ESC_initialize+0xec>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7ff fa68 	bl	80010ec <__aeabi_i2d>
 8001c1c:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <ESC_initialize+0xf0>)
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <ESC_initialize+0xf4>)
 8001c20:	f7fe fc30 	bl	8000484 <__aeabi_dmul>
 8001c24:	0002      	movs	r2, r0
 8001c26:	000b      	movs	r3, r1
 8001c28:	0010      	movs	r0, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	f7fe fb40 	bl	80002b0 <__aeabi_d2uiz>
 8001c30:	0002      	movs	r2, r0
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	05db      	lsls	r3, r3, #23
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fd83 	bl	8001744 <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, waveTable[(10) % 128] * 0.1);
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <ESC_initialize+0xec>)
 8001c40:	7a9b      	ldrb	r3, [r3, #10]
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7ff fa52 	bl	80010ec <__aeabi_i2d>
 8001c48:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <ESC_initialize+0xf0>)
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <ESC_initialize+0xf4>)
 8001c4c:	f7fe fc1a 	bl	8000484 <__aeabi_dmul>
 8001c50:	0002      	movs	r2, r0
 8001c52:	000b      	movs	r3, r1
 8001c54:	0010      	movs	r0, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	f7fe fb2a 	bl	80002b0 <__aeabi_d2uiz>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	05db      	lsls	r3, r3, #23
 8001c62:	0011      	movs	r1, r2
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff fd79 	bl	800175c <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, waveTable[(20) % 128] * 0.1);
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <ESC_initialize+0xec>)
 8001c6c:	7d1b      	ldrb	r3, [r3, #20]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7ff fa3c 	bl	80010ec <__aeabi_i2d>
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <ESC_initialize+0xf0>)
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <ESC_initialize+0xf4>)
 8001c78:	f7fe fc04 	bl	8000484 <__aeabi_dmul>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	000b      	movs	r3, r1
 8001c80:	0010      	movs	r0, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	f7fe fb14 	bl	80002b0 <__aeabi_d2uiz>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	0011      	movs	r1, r2
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff fd4b 	bl	800172c <LL_TIM_OC_SetCompareCH1>
	while (HAL_GetTick() - timer < 200) {
 8001c96:	f000 fbd5 	bl	8002444 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2bc7      	cmp	r3, #199	; 0xc7
 8001ca2:	d9b6      	bls.n	8001c12 <ESC_initialize+0x42>
//		LL_TIM_OC_SetCompareCH4(TIM2, waveTable[(10) % 128] * 0.1);
//		LL_TIM_OC_SetCompareCH1(TIM2, waveTable[(20) % 128] * 0.1);
//	}


	changeFreq(125000);
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <ESC_initialize+0xf8>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7ff fdca 	bl	8001840 <changeFreq>
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	00000417 	.word	0x00000417
 8001cb8:	50000800 	.word	0x50000800
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	9999999a 	.word	0x9999999a
 8001cc4:	3fb99999 	.word	0x3fb99999
 8001cc8:	0001e848 	.word	0x0001e848

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd0:	f000 fb52 	bl	8002378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 f826 	bl	8001d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f000 f9ea 	bl	80020b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001cdc:	f000 f8e4 	bl	8001ea8 <MX_TIM2_Init>
  MX_ADC_Init();
 8001ce0:	f000 f87c 	bl	8001ddc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  LL_TIM_EnableCounter(TIM2);
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	05db      	lsls	r3, r3, #23
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff fc3d 	bl	8001568 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	005a      	lsls	r2, r3, #1
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff fc60 	bl	80015be <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH4);
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	05db      	lsls	r3, r3, #23
 8001d06:	0011      	movs	r1, r2
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff fc58 	bl	80015be <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	2101      	movs	r1, #1
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff fc52 	bl	80015be <LL_TIM_CC_EnableChannel>

  ESC_initialize();
 8001d1a:	f7ff ff59 	bl	8001bd0 <ESC_initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ESC_Drive();
 8001d1e:	f7ff feb3 	bl	8001a88 <ESC_Drive>
 8001d22:	e7fc      	b.n	8001d1e <main+0x52>

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b093      	sub	sp, #76	; 0x4c
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	2414      	movs	r4, #20
 8001d2c:	193b      	adds	r3, r7, r4
 8001d2e:	0018      	movs	r0, r3
 8001d30:	2334      	movs	r3, #52	; 0x34
 8001d32:	001a      	movs	r2, r3
 8001d34:	2100      	movs	r1, #0
 8001d36:	f002 f871 	bl	8003e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3a:	003b      	movs	r3, r7
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	2314      	movs	r3, #20
 8001d40:	001a      	movs	r2, r3
 8001d42:	2100      	movs	r1, #0
 8001d44:	f002 f86a 	bl	8003e1c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <SystemClock_Config+0xb0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <SystemClock_Config+0xb4>)
 8001d4e:	401a      	ands	r2, r3
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <SystemClock_Config+0xb0>)
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	0109      	lsls	r1, r1, #4
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d5a:	0021      	movs	r1, r4
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2202      	movs	r2, #2
 8001d60:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2201      	movs	r2, #1
 8001d66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2202      	movs	r2, #2
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2200      	movs	r2, #0
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	02d2      	lsls	r2, r2, #11
 8001d80:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	03d2      	lsls	r2, r2, #15
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 ff7d 	bl	8002c8c <HAL_RCC_OscConfig>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d001      	beq.n	8001d9a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001d96:	f000 f9fd 	bl	8002194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9a:	003b      	movs	r3, r7
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da0:	003b      	movs	r3, r7
 8001da2:	2203      	movs	r2, #3
 8001da4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da6:	003b      	movs	r3, r7
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dac:	003b      	movs	r3, r7
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db2:	003b      	movs	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001db8:	003b      	movs	r3, r7
 8001dba:	2101      	movs	r1, #1
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f001 fae1 	bl	8003384 <HAL_RCC_ClockConfig>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dc6:	f000 f9e5 	bl	8002194 <Error_Handler>
  }
}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b013      	add	sp, #76	; 0x4c
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	ffffe7ff 	.word	0xffffe7ff

08001ddc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001de2:	003b      	movs	r3, r7
 8001de4:	0018      	movs	r0, r3
 8001de6:	2308      	movs	r3, #8
 8001de8:	001a      	movs	r2, r3
 8001dea:	2100      	movs	r1, #0
 8001dec:	f002 f816 	bl	8003e1c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001df2:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <MX_ADC_Init+0xc4>)
 8001df4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	05d2      	lsls	r2, r2, #23
 8001e02:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e1e:	2220      	movs	r2, #32
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e26:	2221      	movs	r2, #33	; 0x21
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e34:	22c2      	movs	r2, #194	; 0xc2
 8001e36:	32ff      	adds	r2, #255	; 0xff
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e3c:	222c      	movs	r2, #44	; 0x2c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e44:	2204      	movs	r2, #4
 8001e46:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 fb1c 	bl	80024a0 <HAL_ADC_Init>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001e6c:	f000 f992 	bl	8002194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001e70:	003b      	movs	r3, r7
 8001e72:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <MX_ADC_Init+0xc8>)
 8001e74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001e76:	003b      	movs	r3, r7
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	0152      	lsls	r2, r2, #5
 8001e7c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e7e:	003a      	movs	r2, r7
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_ADC_Init+0xc0>)
 8001e82:	0011      	movs	r1, r2
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 fc7f 	bl	8002788 <HAL_ADC_ConfigChannel>
 8001e8a:	1e03      	subs	r3, r0, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001e8e:	f000 f981 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	200000ac 	.word	0x200000ac
 8001ea0:	40012400 	.word	0x40012400
 8001ea4:	1c000080 	.word	0x1c000080

08001ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	b08e      	sub	sp, #56	; 0x38
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001eae:	2528      	movs	r5, #40	; 0x28
 8001eb0:	197b      	adds	r3, r7, r5
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	2100      	movs	r1, #0
 8001eba:	f001 ffaf 	bl	8003e1c <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001ebe:	2418      	movs	r4, #24
 8001ec0:	193b      	adds	r3, r7, r4
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	2100      	movs	r1, #0
 8001eca:	f001 ffa7 	bl	8003e1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	003b      	movs	r3, r7
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	2318      	movs	r3, #24
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	f001 ffa0 	bl	8003e1c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff fc83 	bl	80017e8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, 0);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	200f      	movs	r0, #15
 8001ee6:	f7ff fad1 	bl	800148c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001eea:	200f      	movs	r0, #15
 8001eec:	f7ff fab4 	bl	8001458 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8001ef0:	197b      	adds	r3, r7, r5
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ef6:	197b      	adds	r3, r7, r5
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 8001efc:	197b      	adds	r3, r7, r5
 8001efe:	22ff      	movs	r2, #255	; 0xff
 8001f00:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f02:	197b      	adds	r3, r7, r5
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001f08:	197a      	adds	r2, r7, r5
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	05db      	lsls	r3, r3, #23
 8001f0e:	0011      	movs	r1, r2
 8001f10:	0018      	movs	r0, r3
 8001f12:	f001 fd93 	bl	8003a3c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	05db      	lsls	r3, r3, #23
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7ff fb32 	bl	8001584 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	05db      	lsls	r3, r3, #23
 8001f24:	2101      	movs	r1, #1
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7ff fb90 	bl	800164c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	2260      	movs	r2, #96	; 0x60
 8001f30:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001f44:	193a      	adds	r2, r7, r4
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	05db      	lsls	r3, r3, #23
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f001 fdbd 	bl	8003acc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	05db      	lsls	r3, r3, #23
 8001f56:	2101      	movs	r1, #1
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fb3f 	bl	80015dc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	005a      	lsls	r2, r3, #1
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	05db      	lsls	r3, r3, #23
 8001f66:	0011      	movs	r1, r2
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff fb6f 	bl	800164c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001f6e:	193a      	adds	r2, r7, r4
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	0059      	lsls	r1, r3, #1
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	05db      	lsls	r3, r3, #23
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f001 fda7 	bl	8003acc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	005a      	lsls	r2, r3, #1
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	05db      	lsls	r3, r3, #23
 8001f86:	0011      	movs	r1, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fb27 	bl	80015dc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	05db      	lsls	r3, r3, #23
 8001f96:	0011      	movs	r1, r2
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff fb57 	bl	800164c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001f9e:	193a      	adds	r2, r7, r4
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	0159      	lsls	r1, r3, #5
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	05db      	lsls	r3, r3, #23
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f001 fd8f 	bl	8003acc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	05db      	lsls	r3, r3, #23
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff fb0f 	bl	80015dc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	05db      	lsls	r3, r3, #23
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff fbd5 	bl	8001774 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	05db      	lsls	r3, r3, #23
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fbe2 	bl	8001798 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	05db      	lsls	r3, r3, #23
 8001fd8:	2101      	movs	r1, #1
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff fb6e 	bl	80016bc <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	005a      	lsls	r2, r3, #1
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	05db      	lsls	r3, r3, #23
 8001fe8:	0011      	movs	r1, r2
 8001fea:	0018      	movs	r0, r3
 8001fec:	f7ff fb66 	bl	80016bc <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	05db      	lsls	r3, r3, #23
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff fb5e 	bl	80016bc <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff fc07 	bl	8001814 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002006:	2002      	movs	r0, #2
 8002008:	f7ff fc04 	bl	8001814 <LL_IOP_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA5   ------> TIM2_CH1
  PB1   ------> TIM2_CH4
  PA10   ------> TIM2_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800200c:	003b      	movs	r3, r7
 800200e:	2220      	movs	r2, #32
 8002010:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002012:	003b      	movs	r3, r7
 8002014:	2202      	movs	r2, #2
 8002016:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002018:	003b      	movs	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800201e:	003b      	movs	r3, r7
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002024:	003b      	movs	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800202a:	003b      	movs	r3, r7
 800202c:	2205      	movs	r2, #5
 800202e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	003a      	movs	r2, r7
 8002032:	23a0      	movs	r3, #160	; 0xa0
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	0011      	movs	r1, r2
 8002038:	0018      	movs	r0, r3
 800203a:	f001 fc4a 	bl	80038d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800203e:	003b      	movs	r3, r7
 8002040:	2202      	movs	r2, #2
 8002042:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002044:	003b      	movs	r3, r7
 8002046:	2202      	movs	r2, #2
 8002048:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800204a:	003b      	movs	r3, r7
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002050:	003b      	movs	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002056:	003b      	movs	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800205c:	003b      	movs	r3, r7
 800205e:	2205      	movs	r2, #5
 8002060:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	003b      	movs	r3, r7
 8002064:	4a11      	ldr	r2, [pc, #68]	; (80020ac <MX_TIM2_Init+0x204>)
 8002066:	0019      	movs	r1, r3
 8002068:	0010      	movs	r0, r2
 800206a:	f001 fc32 	bl	80038d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800206e:	003b      	movs	r3, r7
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	00d2      	lsls	r2, r2, #3
 8002074:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002076:	003b      	movs	r3, r7
 8002078:	2202      	movs	r2, #2
 800207a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800207c:	003b      	movs	r3, r7
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002082:	003b      	movs	r3, r7
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002088:	003b      	movs	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800208e:	003b      	movs	r3, r7
 8002090:	2205      	movs	r2, #5
 8002092:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	003a      	movs	r2, r7
 8002096:	23a0      	movs	r3, #160	; 0xa0
 8002098:	05db      	lsls	r3, r3, #23
 800209a:	0011      	movs	r1, r2
 800209c:	0018      	movs	r0, r3
 800209e:	f001 fc18 	bl	80038d2 <LL_GPIO_Init>

}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b00e      	add	sp, #56	; 0x38
 80020a8:	bdb0      	pop	{r4, r5, r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	50000400 	.word	0x50000400

080020b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	003b      	movs	r3, r7
 80020b8:	0018      	movs	r0, r3
 80020ba:	2318      	movs	r3, #24
 80020bc:	001a      	movs	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f001 feac 	bl	8003e1c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80020c4:	2004      	movs	r0, #4
 80020c6:	f7ff fba5 	bl	8001814 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f7ff fba2 	bl	8001814 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80020d0:	2002      	movs	r0, #2
 80020d2:	f7ff fb9f 	bl	8001814 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14);
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	01db      	lsls	r3, r3, #7
 80020da:	4a2d      	ldr	r2, [pc, #180]	; (8002190 <MX_GPIO_Init+0xe0>)
 80020dc:	0019      	movs	r1, r3
 80020de:	0010      	movs	r0, r2
 80020e0:	f7ff fb75 	bl	80017ce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80020e4:	23a0      	movs	r3, #160	; 0xa0
 80020e6:	05db      	lsls	r3, r3, #23
 80020e8:	2140      	movs	r1, #64	; 0x40
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff fb6f 	bl	80017ce <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	009a      	lsls	r2, r3, #2
 80020f4:	23a0      	movs	r3, #160	; 0xa0
 80020f6:	05db      	lsls	r3, r3, #23
 80020f8:	0011      	movs	r1, r2
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7ff fb67 	bl	80017ce <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8002100:	003b      	movs	r3, r7
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	01d2      	lsls	r2, r2, #7
 8002106:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002108:	003b      	movs	r3, r7
 800210a:	2201      	movs	r2, #1
 800210c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800210e:	003b      	movs	r3, r7
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002114:	003b      	movs	r3, r7
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800211a:	003b      	movs	r3, r7
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	003b      	movs	r3, r7
 8002122:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <MX_GPIO_Init+0xe0>)
 8002124:	0019      	movs	r1, r3
 8002126:	0010      	movs	r0, r2
 8002128:	f001 fbd3 	bl	80038d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800212c:	003b      	movs	r3, r7
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002132:	003b      	movs	r3, r7
 8002134:	2201      	movs	r2, #1
 8002136:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002138:	003b      	movs	r3, r7
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800213e:	003b      	movs	r3, r7
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002144:	003b      	movs	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	003a      	movs	r2, r7
 800214c:	23a0      	movs	r3, #160	; 0xa0
 800214e:	05db      	lsls	r3, r3, #23
 8002150:	0011      	movs	r1, r2
 8002152:	0018      	movs	r0, r3
 8002154:	f001 fbbd 	bl	80038d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002158:	003b      	movs	r3, r7
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002160:	003b      	movs	r3, r7
 8002162:	2201      	movs	r2, #1
 8002164:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002166:	003b      	movs	r3, r7
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800216c:	003b      	movs	r3, r7
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002172:	003b      	movs	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	003a      	movs	r2, r7
 800217a:	23a0      	movs	r3, #160	; 0xa0
 800217c:	05db      	lsls	r3, r3, #23
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f001 fba6 	bl	80038d2 <LL_GPIO_Init>

}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	50000800 	.word	0x50000800

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800219c:	e7fe      	b.n	800219c <Error_Handler+0x8>
	...

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <HAL_MspInit+0x24>)
 80021a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_MspInit+0x24>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_MspInit+0x24>)
 80021b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_MspInit+0x24>)
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	0549      	lsls	r1, r1, #21
 80021ba:	430a      	orrs	r2, r1
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	240c      	movs	r4, #12
 80021d2:	193b      	adds	r3, r7, r4
 80021d4:	0018      	movs	r0, r3
 80021d6:	2314      	movs	r3, #20
 80021d8:	001a      	movs	r2, r3
 80021da:	2100      	movs	r1, #0
 80021dc:	f001 fe1e 	bl	8003e1c <memset>
  if(hadc->Instance==ADC1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_ADC_MspInit+0x70>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d122      	bne.n	8002230 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_ADC_MspInit+0x74>)
 80021ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_ADC_MspInit+0x74>)
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	0089      	lsls	r1, r1, #2
 80021f4:	430a      	orrs	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_ADC_MspInit+0x74>)
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_ADC_MspInit+0x74>)
 80021fe:	2101      	movs	r1, #1
 8002200:	430a      	orrs	r2, r1
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_ADC_MspInit+0x74>)
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	2201      	movs	r2, #1
 800220a:	4013      	ands	r3, r2
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002210:	193b      	adds	r3, r7, r4
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2203      	movs	r2, #3
 800221a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	193a      	adds	r2, r7, r4
 8002224:	23a0      	movs	r3, #160	; 0xa0
 8002226:	05db      	lsls	r3, r3, #23
 8002228:	0011      	movs	r1, r2
 800222a:	0018      	movs	r0, r3
 800222c:	f000 fbc8 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b009      	add	sp, #36	; 0x24
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	40012400 	.word	0x40012400
 800223c:	40021000 	.word	0x40021000

08002240 <LL_GPIO_SetOutputPin>:
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	619a      	str	r2, [r3, #24]
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}

08002258 <LL_GPIO_ResetOutputPin>:
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <NMI_Handler>:
/*           Cortex-M0+ Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002274:	e7fe      	b.n	8002274 <NMI_Handler+0x4>

08002276 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002294:	f000 f8c4 	bl	8002420 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <TIM2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */
	static int toggle = 0;
	/* USER CODE END TIM2_IRQn 0 */
	/* USER CODE BEGIN TIM2_IRQn 1 */
	if (toggle % 2 == 0) {
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <TIM2_IRQHandler+0x44>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	001a      	movs	r2, r3
 80022aa:	2301      	movs	r3, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	d108      	bne.n	80022c2 <TIM2_IRQHandler+0x22>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	009a      	lsls	r2, r3, #2
 80022b4:	23a0      	movs	r3, #160	; 0xa0
 80022b6:	05db      	lsls	r3, r3, #23
 80022b8:	0011      	movs	r1, r2
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff ffc0 	bl	8002240 <LL_GPIO_SetOutputPin>
 80022c0:	e007      	b.n	80022d2 <TIM2_IRQHandler+0x32>
	} else {
		LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_9);
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	009a      	lsls	r2, r3, #2
 80022c6:	23a0      	movs	r3, #160	; 0xa0
 80022c8:	05db      	lsls	r3, r3, #23
 80022ca:	0011      	movs	r1, r2
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ffc3 	bl	8002258 <LL_GPIO_ResetOutputPin>
	}
	toggle++;
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <TIM2_IRQHandler+0x44>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <TIM2_IRQHandler+0x44>)
 80022da:	601a      	str	r2, [r3, #0]
	/* USER CODE END TIM2_IRQn 1 */
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	200000a8 	.word	0x200000a8

080022e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80022f4:	4813      	ldr	r0, [pc, #76]	; (8002344 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80022f6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80022f8:	4813      	ldr	r0, [pc, #76]	; (8002348 <LoopForever+0x6>)
    LDR R1, [R0]
 80022fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80022fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <LoopForever+0xa>)
    CMP R1, R2
 8002300:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002302:	d105      	bne.n	8002310 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002304:	4812      	ldr	r0, [pc, #72]	; (8002350 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002306:	4913      	ldr	r1, [pc, #76]	; (8002354 <LoopForever+0x12>)
    STR R1, [R0]
 8002308:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800230c:	4913      	ldr	r1, [pc, #76]	; (800235c <LoopForever+0x1a>)
    STR R1, [R0]
 800230e:	6001      	str	r1, [r0, #0]

08002310 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002310:	4813      	ldr	r0, [pc, #76]	; (8002360 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002312:	4914      	ldr	r1, [pc, #80]	; (8002364 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <LoopForever+0x26>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a11      	ldr	r2, [pc, #68]	; (800236c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002328:	4c11      	ldr	r4, [pc, #68]	; (8002370 <LoopForever+0x2e>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002336:	f7ff ffd7 	bl	80022e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f001 fd4b 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7ff fcc5 	bl	8001ccc <main>

08002342 <LoopForever>:

LoopForever:
    b LoopForever
 8002342:	e7fe      	b.n	8002342 <LoopForever>
   ldr   r0, =_estack
 8002344:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8002348:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800234c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002350:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002354:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002358:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800235c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002364:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002368:	08003ec0 	.word	0x08003ec0
  ldr r2, =_sbss
 800236c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002370:	2000010c 	.word	0x2000010c

08002374 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC1_IRQHandler>
	...

08002378 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_Init+0x3c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Init+0x3c>)
 800238a:	2140      	movs	r1, #64	; 0x40
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002390:	2003      	movs	r0, #3
 8002392:	f000 f811 	bl	80023b8 <HAL_InitTick>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d003      	beq.n	80023a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e001      	b.n	80023a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023a2:	f7ff fefd 	bl	80021a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	781b      	ldrb	r3, [r3, #0]
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	40022000 	.word	0x40022000

080023b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_InitTick+0x5c>)
 80023c2:	681c      	ldr	r4, [r3, #0]
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_InitTick+0x60>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	0019      	movs	r1, r3
 80023ca:	23fa      	movs	r3, #250	; 0xfa
 80023cc:	0098      	lsls	r0, r3, #2
 80023ce:	f7fd fe9b 	bl	8000108 <__udivsi3>
 80023d2:	0003      	movs	r3, r0
 80023d4:	0019      	movs	r1, r3
 80023d6:	0020      	movs	r0, r4
 80023d8:	f7fd fe96 	bl	8000108 <__udivsi3>
 80023dc:	0003      	movs	r3, r0
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 fae1 	bl	80029a6 <HAL_SYSTICK_Config>
 80023e4:	1e03      	subs	r3, r0, #0
 80023e6:	d001      	beq.n	80023ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e00f      	b.n	800240c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d80b      	bhi.n	800240a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	2301      	movs	r3, #1
 80023f6:	425b      	negs	r3, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 fabe 	bl	800297c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_InitTick+0x64>)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b003      	add	sp, #12
 8002412:	bd90      	pop	{r4, r7, pc}
 8002414:	20000080 	.word	0x20000080
 8002418:	20000088 	.word	0x20000088
 800241c:	20000084 	.word	0x20000084

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_IncTick+0x1c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	001a      	movs	r2, r3
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_IncTick+0x20>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	18d2      	adds	r2, r2, r3
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_IncTick+0x20>)
 8002432:	601a      	str	r2, [r3, #0]
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	20000088 	.word	0x20000088
 8002440:	20000108 	.word	0x20000108

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b02      	ldr	r3, [pc, #8]	; (8002454 <HAL_GetTick+0x10>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	20000108 	.word	0x20000108

08002458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff fff0 	bl	8002444 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3301      	adds	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_Delay+0x44>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	001a      	movs	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	189b      	adds	r3, r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	f7ff ffe0 	bl	8002444 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d8f7      	bhi.n	8002480 <HAL_Delay+0x28>
  {
  }
}
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	20000088 	.word	0x20000088

080024a0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e159      	b.n	8002766 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2250      	movs	r2, #80	; 0x50
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7ff fe7c 	bl	80021c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	2210      	movs	r2, #16
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d005      	beq.n	80024e8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2204      	movs	r2, #4
 80024e4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80024e6:	d00b      	beq.n	8002500 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	2210      	movs	r2, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2250      	movs	r2, #80	; 0x50
 80024f8:	2100      	movs	r1, #0
 80024fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e132      	b.n	8002766 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	4a9a      	ldr	r2, [pc, #616]	; (8002770 <HAL_ADC_Init+0x2d0>)
 8002506:	4013      	ands	r3, r2
 8002508:	2202      	movs	r2, #2
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2203      	movs	r2, #3
 8002518:	4013      	ands	r3, r2
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_ADC_Init+0x90>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	4013      	ands	r3, r2
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_ADC_Init+0x90>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_ADC_Init+0x92>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d149      	bne.n	80025ca <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	23c0      	movs	r3, #192	; 0xc0
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	429a      	cmp	r2, r3
 8002540:	d00b      	beq.n	800255a <HAL_ADC_Init+0xba>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	05db      	lsls	r3, r3, #23
 800254a:	429a      	cmp	r2, r3
 800254c:	d005      	beq.n	800255a <HAL_ADC_Init+0xba>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	429a      	cmp	r2, r3
 8002558:	d111      	bne.n	800257e <HAL_ADC_Init+0xde>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0092      	lsls	r2, r2, #2
 8002566:	0892      	lsrs	r2, r2, #2
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6919      	ldr	r1, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	611a      	str	r2, [r3, #16]
 800257c:	e014      	b.n	80025a8 <HAL_ADC_Init+0x108>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	0892      	lsrs	r2, r2, #2
 800258c:	611a      	str	r2, [r3, #16]
 800258e:	4b79      	ldr	r3, [pc, #484]	; (8002774 <HAL_ADC_Init+0x2d4>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b78      	ldr	r3, [pc, #480]	; (8002774 <HAL_ADC_Init+0x2d4>)
 8002594:	4978      	ldr	r1, [pc, #480]	; (8002778 <HAL_ADC_Init+0x2d8>)
 8002596:	400a      	ands	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	4b76      	ldr	r3, [pc, #472]	; (8002774 <HAL_ADC_Init+0x2d4>)
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4b74      	ldr	r3, [pc, #464]	; (8002774 <HAL_ADC_Init+0x2d4>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2118      	movs	r1, #24
 80025b4:	438a      	bics	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80025ca:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_ADC_Init+0x2d4>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b69      	ldr	r3, [pc, #420]	; (8002774 <HAL_ADC_Init+0x2d4>)
 80025d0:	496a      	ldr	r1, [pc, #424]	; (800277c <HAL_ADC_Init+0x2dc>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_ADC_Init+0x2d4>)
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	065a      	lsls	r2, r3, #25
 80025e0:	4b64      	ldr	r3, [pc, #400]	; (8002774 <HAL_ADC_Init+0x2d4>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	055b      	lsls	r3, r3, #21
 80025f0:	4013      	ands	r3, r2
 80025f2:	d108      	bne.n	8002606 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	0549      	lsls	r1, r1, #21
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	495b      	ldr	r1, [pc, #364]	; (8002780 <HAL_ADC_Init+0x2e0>)
 8002612:	400a      	ands	r2, r1
 8002614:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68d9      	ldr	r1, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d101      	bne.n	800262c <HAL_ADC_Init+0x18c>
 8002628:	2304      	movs	r3, #4
 800262a:	e000      	b.n	800262e <HAL_ADC_Init+0x18e>
 800262c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800262e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2020      	movs	r0, #32
 8002634:	5c1b      	ldrb	r3, [r3, r0]
 8002636:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002638:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	202c      	movs	r0, #44	; 0x2c
 800263e:	5c1b      	ldrb	r3, [r3, r0]
 8002640:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002642:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002648:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002650:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002658:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002666:	23c2      	movs	r3, #194	; 0xc2
 8002668:	33ff      	adds	r3, #255	; 0xff
 800266a:	429a      	cmp	r2, r3
 800266c:	d00b      	beq.n	8002686 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68d9      	ldr	r1, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2221      	movs	r2, #33	; 0x21
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d11a      	bne.n	80026c6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	5c9b      	ldrb	r3, [r3, r2]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0249      	lsls	r1, r1, #9
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	e00b      	b.n	80026c6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	2220      	movs	r2, #32
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	2201      	movs	r2, #1
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d11f      	bne.n	800270e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	492a      	ldr	r1, [pc, #168]	; (8002784 <HAL_ADC_Init+0x2e4>)
 80026da:	400a      	ands	r2, r1
 80026dc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6919      	ldr	r1, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80026ec:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80026f2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	430a      	orrs	r2, r1
 800270a:	611a      	str	r2, [r3, #16]
 800270c:	e00e      	b.n	800272c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2201      	movs	r2, #1
 8002716:	4013      	ands	r3, r2
 8002718:	2b01      	cmp	r3, #1
 800271a:	d107      	bne.n	800272c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2107      	movs	r1, #7
 8002738:	438a      	bics	r2, r1
 800273a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6959      	ldr	r1, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	2203      	movs	r2, #3
 800275a:	4393      	bics	r3, r2
 800275c:	2201      	movs	r2, #1
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b002      	add	sp, #8
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	fffffefd 	.word	0xfffffefd
 8002774:	40012708 	.word	0x40012708
 8002778:	ffc3ffff 	.word	0xffc3ffff
 800277c:	fdffffff 	.word	0xfdffffff
 8002780:	fffe0219 	.word	0xfffe0219
 8002784:	fffffc03 	.word	0xfffffc03

08002788 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2250      	movs	r2, #80	; 0x50
 8002796:	5c9b      	ldrb	r3, [r3, r2]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x18>
 800279c:	2302      	movs	r3, #2
 800279e:	e050      	b.n	8002842 <HAL_ADC_ConfigChannel+0xba>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2250      	movs	r2, #80	; 0x50
 80027a4:	2101      	movs	r1, #1
 80027a6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2204      	movs	r2, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	d00b      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	2220      	movs	r2, #32
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2250      	movs	r2, #80	; 0x50
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e03a      	b.n	8002842 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_ADC_ConfigChannel+0xc4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d018      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	035b      	lsls	r3, r3, #13
 80027e2:	0b5a      	lsrs	r2, r3, #13
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	029b      	lsls	r3, r3, #10
 80027f4:	4013      	ands	r3, r2
 80027f6:	d01f      	beq.n	8002838 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_ADC_ConfigChannel+0xc8>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_ADC_ConfigChannel+0xc8>)
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	03c9      	lsls	r1, r1, #15
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e017      	b.n	8002838 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	035b      	lsls	r3, r3, #13
 8002814:	0b5b      	lsrs	r3, r3, #13
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	400a      	ands	r2, r1
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	4013      	ands	r3, r2
 800282a:	d005      	beq.n	8002838 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_ADC_ConfigChannel+0xc8>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_ADC_ConfigChannel+0xc8>)
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <HAL_ADC_ConfigChannel+0xcc>)
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2250      	movs	r2, #80	; 0x50
 800283c:	2100      	movs	r1, #0
 800283e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	00001001 	.word	0x00001001
 8002850:	40012708 	.word	0x40012708
 8002854:	ffbfffff 	.word	0xffbfffff

08002858 <__NVIC_SetPriority>:
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	0002      	movs	r2, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b7f      	cmp	r3, #127	; 0x7f
 800286c:	d828      	bhi.n	80028c0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800286e:	4a2f      	ldr	r2, [pc, #188]	; (800292c <__NVIC_SetPriority+0xd4>)
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b25b      	sxtb	r3, r3
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	33c0      	adds	r3, #192	; 0xc0
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	589b      	ldr	r3, [r3, r2]
 800287e:	1dfa      	adds	r2, r7, #7
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	0011      	movs	r1, r2
 8002884:	2203      	movs	r2, #3
 8002886:	400a      	ands	r2, r1
 8002888:	00d2      	lsls	r2, r2, #3
 800288a:	21ff      	movs	r1, #255	; 0xff
 800288c:	4091      	lsls	r1, r2
 800288e:	000a      	movs	r2, r1
 8002890:	43d2      	mvns	r2, r2
 8002892:	401a      	ands	r2, r3
 8002894:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	22ff      	movs	r2, #255	; 0xff
 800289c:	401a      	ands	r2, r3
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	0018      	movs	r0, r3
 80028a4:	2303      	movs	r3, #3
 80028a6:	4003      	ands	r3, r0
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ac:	481f      	ldr	r0, [pc, #124]	; (800292c <__NVIC_SetPriority+0xd4>)
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	430a      	orrs	r2, r1
 80028b8:	33c0      	adds	r3, #192	; 0xc0
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	501a      	str	r2, [r3, r0]
}
 80028be:	e031      	b.n	8002924 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <__NVIC_SetPriority+0xd8>)
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	0019      	movs	r1, r3
 80028c8:	230f      	movs	r3, #15
 80028ca:	400b      	ands	r3, r1
 80028cc:	3b08      	subs	r3, #8
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3306      	adds	r3, #6
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	18d3      	adds	r3, r2, r3
 80028d6:	3304      	adds	r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1dfa      	adds	r2, r7, #7
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	0011      	movs	r1, r2
 80028e0:	2203      	movs	r2, #3
 80028e2:	400a      	ands	r2, r1
 80028e4:	00d2      	lsls	r2, r2, #3
 80028e6:	21ff      	movs	r1, #255	; 0xff
 80028e8:	4091      	lsls	r1, r2
 80028ea:	000a      	movs	r2, r1
 80028ec:	43d2      	mvns	r2, r2
 80028ee:	401a      	ands	r2, r3
 80028f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	019b      	lsls	r3, r3, #6
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	401a      	ands	r2, r3
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	0018      	movs	r0, r3
 8002900:	2303      	movs	r3, #3
 8002902:	4003      	ands	r3, r0
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <__NVIC_SetPriority+0xd8>)
 800290a:	1dfb      	adds	r3, r7, #7
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	001c      	movs	r4, r3
 8002910:	230f      	movs	r3, #15
 8002912:	4023      	ands	r3, r4
 8002914:	3b08      	subs	r3, #8
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	430a      	orrs	r2, r1
 800291a:	3306      	adds	r3, #6
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	18c3      	adds	r3, r0, r3
 8002920:	3304      	adds	r3, #4
 8002922:	601a      	str	r2, [r3, #0]
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b003      	add	sp, #12
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	e000e100 	.word	0xe000e100
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	045b      	lsls	r3, r3, #17
 8002944:	429a      	cmp	r2, r3
 8002946:	d301      	bcc.n	800294c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002948:	2301      	movs	r3, #1
 800294a:	e010      	b.n	800296e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <SysTick_Config+0x44>)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	3a01      	subs	r2, #1
 8002952:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002954:	2301      	movs	r3, #1
 8002956:	425b      	negs	r3, r3
 8002958:	2103      	movs	r1, #3
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff ff7c 	bl	8002858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Config+0x44>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SysTick_Config+0x44>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	210f      	movs	r1, #15
 8002988:	187b      	adds	r3, r7, r1
 800298a:	1c02      	adds	r2, r0, #0
 800298c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	187b      	adds	r3, r7, r1
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f7ff ff5d 	bl	8002858 <__NVIC_SetPriority>
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b004      	add	sp, #16
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7ff ffbf 	bl	8002934 <SysTick_Config>
 80029b6:	0003      	movs	r3, r0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80029d6:	e143      	b.n	8002c60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4091      	lsls	r1, r2
 80029e2:	000a      	movs	r2, r1
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d100      	bne.n	80029f0 <HAL_GPIO_Init+0x30>
 80029ee:	e134      	b.n	8002c5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2203      	movs	r2, #3
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d005      	beq.n	8002a08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2203      	movs	r2, #3
 8002a02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d130      	bne.n	8002a6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	409a      	lsls	r2, r3
 8002a16:	0013      	movs	r3, r2
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3e:	2201      	movs	r2, #1
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	43da      	mvns	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	2201      	movs	r2, #1
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d017      	beq.n	8002aa6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	409a      	lsls	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	43da      	mvns	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	409a      	lsls	r2, r3
 8002a98:	0013      	movs	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d123      	bne.n	8002afa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	58d3      	ldr	r3, [r2, r3]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	220f      	movs	r2, #15
 8002aca:	409a      	lsls	r2, r3
 8002acc:	0013      	movs	r3, r2
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2107      	movs	r1, #7
 8002ade:	400b      	ands	r3, r1
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	6939      	ldr	r1, [r7, #16]
 8002af8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	4013      	ands	r3, r2
 8002b38:	d100      	bne.n	8002b3c <HAL_GPIO_Init+0x17c>
 8002b3a:	e08e      	b.n	8002c5a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3c:	4b4e      	ldr	r3, [pc, #312]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b40:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	430a      	orrs	r2, r1
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b48:	4a4c      	ldr	r2, [pc, #304]	; (8002c7c <HAL_GPIO_Init+0x2bc>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	589b      	ldr	r3, [r3, r2]
 8002b54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	409a      	lsls	r2, r3
 8002b62:	0013      	movs	r3, r2
 8002b64:	43da      	mvns	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	23a0      	movs	r3, #160	; 0xa0
 8002b70:	05db      	lsls	r3, r3, #23
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x1d2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a41      	ldr	r2, [pc, #260]	; (8002c80 <HAL_GPIO_Init+0x2c0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x1ce>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a40      	ldr	r2, [pc, #256]	; (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x1ca>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e004      	b.n	8002b94 <HAL_GPIO_Init+0x1d4>
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	e002      	b.n	8002b94 <HAL_GPIO_Init+0x1d4>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_GPIO_Init+0x1d4>
 8002b92:	2300      	movs	r3, #0
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	2103      	movs	r1, #3
 8002b98:	400a      	ands	r2, r1
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	4093      	lsls	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba4:	4935      	ldr	r1, [pc, #212]	; (8002c7c <HAL_GPIO_Init+0x2bc>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb2:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	025b      	lsls	r3, r3, #9
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	43da      	mvns	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	029b      	lsls	r3, r3, #10
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	035b      	lsls	r3, r3, #13
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	039b      	lsls	r3, r3, #14
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	40da      	lsrs	r2, r3
 8002c68:	1e13      	subs	r3, r2, #0
 8002c6a:	d000      	beq.n	8002c6e <HAL_GPIO_Init+0x2ae>
 8002c6c:	e6b4      	b.n	80029d8 <HAL_GPIO_Init+0x18>
  }
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b006      	add	sp, #24
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	50000400 	.word	0x50000400
 8002c84:	50000800 	.word	0x50000800
 8002c88:	40010400 	.word	0x40010400

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f000 fb6c 	bl	8003378 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca0:	4bc8      	ldr	r3, [pc, #800]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	220c      	movs	r2, #12
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002caa:	4bc6      	ldr	r3, [pc, #792]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	025b      	lsls	r3, r3, #9
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d100      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x36>
 8002cc0:	e07d      	b.n	8002dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d007      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x68>
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	025b      	lsls	r3, r3, #9
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	4bba      	ldr	r3, [pc, #744]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	029b      	lsls	r3, r3, #10
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5a>
 8002ce4:	e06a      	b.n	8002dbc <HAL_RCC_OscConfig+0x130>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d166      	bne.n	8002dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f000 fb42 	bl	8003378 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	025b      	lsls	r3, r3, #9
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x84>
 8002d00:	4bb0      	ldr	r3, [pc, #704]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4baf      	ldr	r3, [pc, #700]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	0249      	lsls	r1, r1, #9
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e027      	b.n	8002d60 <HAL_RCC_OscConfig+0xd4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	23a0      	movs	r3, #160	; 0xa0
 8002d16:	02db      	lsls	r3, r3, #11
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d10e      	bne.n	8002d3a <HAL_RCC_OscConfig+0xae>
 8002d1c:	4ba9      	ldr	r3, [pc, #676]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4ba8      	ldr	r3, [pc, #672]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d22:	2180      	movs	r1, #128	; 0x80
 8002d24:	02c9      	lsls	r1, r1, #11
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	4ba6      	ldr	r3, [pc, #664]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4ba5      	ldr	r3, [pc, #660]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	0249      	lsls	r1, r1, #9
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e012      	b.n	8002d60 <HAL_RCC_OscConfig+0xd4>
 8002d3a:	4ba2      	ldr	r3, [pc, #648]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4ba1      	ldr	r3, [pc, #644]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d40:	49a1      	ldr	r1, [pc, #644]	; (8002fc8 <HAL_RCC_OscConfig+0x33c>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	4b9f      	ldr	r3, [pc, #636]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	025b      	lsls	r3, r3, #9
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4b9b      	ldr	r3, [pc, #620]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b9a      	ldr	r3, [pc, #616]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d5a:	499c      	ldr	r1, [pc, #624]	; (8002fcc <HAL_RCC_OscConfig+0x340>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d014      	beq.n	8002d92 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7ff fb6c 	bl	8002444 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d72:	f7ff fb67 	bl	8002444 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b64      	cmp	r3, #100	; 0x64
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e2f9      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d84:	4b8f      	ldr	r3, [pc, #572]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	029b      	lsls	r3, r3, #10
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0xe6>
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7ff fb57 	bl	8002444 <HAL_GetTick>
 8002d96:	0003      	movs	r3, r0
 8002d98:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7ff fb52 	bl	8002444 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e2e4      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dae:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	4013      	ands	r3, r2
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x110>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d100      	bne.n	8002dca <HAL_RCC_OscConfig+0x13e>
 8002dc8:	e099      	b.n	8002efe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002dd8:	4b7a      	ldr	r3, [pc, #488]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b79      	ldr	r3, [pc, #484]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002dde:	2120      	movs	r1, #32
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	2220      	movs	r2, #32
 8002de8:	4393      	bics	r3, r2
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d13e      	bne.n	8002e76 <HAL_RCC_OscConfig+0x1ea>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d13b      	bne.n	8002e76 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002dfe:	4b71      	ldr	r3, [pc, #452]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2204      	movs	r2, #4
 8002e04:	4013      	ands	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_RCC_OscConfig+0x186>
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e2b2      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4a6e      	ldr	r2, [pc, #440]	; (8002fd0 <HAL_RCC_OscConfig+0x344>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e28:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2209      	movs	r2, #9
 8002e2e:	4393      	bics	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e3a:	f000 fbeb 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 8002e3e:	0001      	movs	r1, r0
 8002e40:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	220f      	movs	r2, #15
 8002e48:	4013      	ands	r3, r2
 8002e4a:	4a62      	ldr	r2, [pc, #392]	; (8002fd4 <HAL_RCC_OscConfig+0x348>)
 8002e4c:	5cd3      	ldrb	r3, [r2, r3]
 8002e4e:	000a      	movs	r2, r1
 8002e50:	40da      	lsrs	r2, r3
 8002e52:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <HAL_RCC_OscConfig+0x34c>)
 8002e54:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e56:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_RCC_OscConfig+0x350>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2513      	movs	r5, #19
 8002e5c:	197c      	adds	r4, r7, r5
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff faaa 	bl	80023b8 <HAL_InitTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e68:	197b      	adds	r3, r7, r5
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d046      	beq.n	8002efe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002e70:	197b      	adds	r3, r7, r5
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	e280      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d027      	beq.n	8002ecc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e7c:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2209      	movs	r2, #9
 8002e82:	4393      	bics	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7ff fad9 	bl	8002444 <HAL_GetTick>
 8002e92:	0003      	movs	r3, r0
 8002e94:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e98:	f7ff fad4 	bl	8002444 <HAL_GetTick>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e266      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eaa:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d0f1      	beq.n	8002e98 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a45      	ldr	r2, [pc, #276]	; (8002fd0 <HAL_RCC_OscConfig+0x344>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	021a      	lsls	r2, r3, #8
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	e018      	b.n	8002efe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	438a      	bics	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fab4 	bl	8002444 <HAL_GetTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7ff faaf 	bl	8002444 <HAL_GetTick>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e241      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef4:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2204      	movs	r2, #4
 8002efa:	4013      	ands	r3, r2
 8002efc:	d1f1      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2210      	movs	r2, #16
 8002f04:	4013      	ands	r3, r2
 8002f06:	d100      	bne.n	8002f0a <HAL_RCC_OscConfig+0x27e>
 8002f08:	e0a1      	b.n	800304e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d140      	bne.n	8002f92 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f10:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_OscConfig+0x29c>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e227      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f28:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <HAL_RCC_OscConfig+0x354>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	0a19      	lsrs	r1, r3, #8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	061a      	lsls	r2, r3, #24
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	0b5b      	lsrs	r3, r3, #13
 8002f56:	3301      	adds	r3, #1
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	0212      	lsls	r2, r2, #8
 8002f5c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	210f      	movs	r1, #15
 8002f66:	400b      	ands	r3, r1
 8002f68:	491a      	ldr	r1, [pc, #104]	; (8002fd4 <HAL_RCC_OscConfig+0x348>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_RCC_OscConfig+0x34c>)
 8002f70:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <HAL_RCC_OscConfig+0x350>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2513      	movs	r5, #19
 8002f78:	197c      	adds	r4, r7, r5
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7ff fa1c 	bl	80023b8 <HAL_InitTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f84:	197b      	adds	r3, r7, r5
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d060      	beq.n	800304e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002f8c:	197b      	adds	r3, r7, r5
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	e1f2      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03f      	beq.n	800301a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_OscConfig+0x338>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff fa4c 	bl	8002444 <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fb0:	e018      	b.n	8002fe4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fb2:	f7ff fa47 	bl	8002444 <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d911      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1d9      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	fffeffff 	.word	0xfffeffff
 8002fcc:	fffbffff 	.word	0xfffbffff
 8002fd0:	ffffe0ff 	.word	0xffffe0ff
 8002fd4:	08003e94 	.word	0x08003e94
 8002fd8:	20000080 	.word	0x20000080
 8002fdc:	20000084 	.word	0x20000084
 8002fe0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fe4:	4bc9      	ldr	r3, [pc, #804]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4013      	ands	r3, r2
 8002fee:	d0e0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff0:	4bc6      	ldr	r3, [pc, #792]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4ac6      	ldr	r2, [pc, #792]	; (8003310 <HAL_RCC_OscConfig+0x684>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1a      	ldr	r2, [r3, #32]
 8002ffe:	4bc3      	ldr	r3, [pc, #780]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003004:	4bc1      	ldr	r3, [pc, #772]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	0a19      	lsrs	r1, r3, #8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	061a      	lsls	r2, r3, #24
 8003012:	4bbe      	ldr	r3, [pc, #760]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	e019      	b.n	800304e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800301a:	4bbc      	ldr	r3, [pc, #752]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4bbb      	ldr	r3, [pc, #748]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003020:	49bc      	ldr	r1, [pc, #752]	; (8003314 <HAL_RCC_OscConfig+0x688>)
 8003022:	400a      	ands	r2, r1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7ff fa0d 	bl	8002444 <HAL_GetTick>
 800302a:	0003      	movs	r3, r0
 800302c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003030:	f7ff fa08 	bl	8002444 <HAL_GetTick>
 8003034:	0002      	movs	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e19a      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003042:	4bb2      	ldr	r3, [pc, #712]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4013      	ands	r3, r2
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2208      	movs	r2, #8
 8003054:	4013      	ands	r3, r2
 8003056:	d036      	beq.n	80030c6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d019      	beq.n	8003094 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003060:	4baa      	ldr	r3, [pc, #680]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003064:	4ba9      	ldr	r3, [pc, #676]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003066:	2101      	movs	r1, #1
 8003068:	430a      	orrs	r2, r1
 800306a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7ff f9ea 	bl	8002444 <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003076:	f7ff f9e5 	bl	8002444 <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e177      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003088:	4ba0      	ldr	r3, [pc, #640]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800308a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308c:	2202      	movs	r2, #2
 800308e:	4013      	ands	r3, r2
 8003090:	d0f1      	beq.n	8003076 <HAL_RCC_OscConfig+0x3ea>
 8003092:	e018      	b.n	80030c6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003094:	4b9d      	ldr	r3, [pc, #628]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003098:	4b9c      	ldr	r3, [pc, #624]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800309a:	2101      	movs	r1, #1
 800309c:	438a      	bics	r2, r1
 800309e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7ff f9d0 	bl	8002444 <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030aa:	f7ff f9cb 	bl	8002444 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e15d      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030bc:	4b93      	ldr	r3, [pc, #588]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80030be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d1f1      	bne.n	80030aa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2204      	movs	r2, #4
 80030cc:	4013      	ands	r3, r2
 80030ce:	d100      	bne.n	80030d2 <HAL_RCC_OscConfig+0x446>
 80030d0:	e0ae      	b.n	8003230 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2023      	movs	r0, #35	; 0x23
 80030d4:	183b      	adds	r3, r7, r0
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b8c      	ldr	r3, [pc, #560]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80030dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	055b      	lsls	r3, r3, #21
 80030e2:	4013      	ands	r3, r2
 80030e4:	d109      	bne.n	80030fa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	4b89      	ldr	r3, [pc, #548]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80030e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ea:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	0549      	lsls	r1, r1, #21
 80030f0:	430a      	orrs	r2, r1
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b87      	ldr	r3, [pc, #540]	; (8003318 <HAL_RCC_OscConfig+0x68c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4013      	ands	r3, r2
 8003104:	d11a      	bne.n	800313c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003106:	4b84      	ldr	r3, [pc, #528]	; (8003318 <HAL_RCC_OscConfig+0x68c>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b83      	ldr	r3, [pc, #524]	; (8003318 <HAL_RCC_OscConfig+0x68c>)
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	0049      	lsls	r1, r1, #1
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003114:	f7ff f996 	bl	8002444 <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311e:	f7ff f991 	bl	8002444 <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e123      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	4b79      	ldr	r3, [pc, #484]	; (8003318 <HAL_RCC_OscConfig+0x68c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4013      	ands	r3, r2
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	429a      	cmp	r2, r3
 8003146:	d107      	bne.n	8003158 <HAL_RCC_OscConfig+0x4cc>
 8003148:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800314a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800314c:	4b6f      	ldr	r3, [pc, #444]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	0049      	lsls	r1, r1, #1
 8003152:	430a      	orrs	r2, r1
 8003154:	651a      	str	r2, [r3, #80]	; 0x50
 8003156:	e031      	b.n	80031bc <HAL_RCC_OscConfig+0x530>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <HAL_RCC_OscConfig+0x4ee>
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003164:	4b69      	ldr	r3, [pc, #420]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003166:	496b      	ldr	r1, [pc, #428]	; (8003314 <HAL_RCC_OscConfig+0x688>)
 8003168:	400a      	ands	r2, r1
 800316a:	651a      	str	r2, [r3, #80]	; 0x50
 800316c:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800316e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003170:	4b66      	ldr	r3, [pc, #408]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003172:	496a      	ldr	r1, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0x690>)
 8003174:	400a      	ands	r2, r1
 8003176:	651a      	str	r2, [r3, #80]	; 0x50
 8003178:	e020      	b.n	80031bc <HAL_RCC_OscConfig+0x530>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	23a0      	movs	r3, #160	; 0xa0
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	429a      	cmp	r2, r3
 8003184:	d10e      	bne.n	80031a4 <HAL_RCC_OscConfig+0x518>
 8003186:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800318a:	4b60      	ldr	r3, [pc, #384]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	00c9      	lsls	r1, r1, #3
 8003190:	430a      	orrs	r2, r1
 8003192:	651a      	str	r2, [r3, #80]	; 0x50
 8003194:	4b5d      	ldr	r3, [pc, #372]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003198:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	0049      	lsls	r1, r1, #1
 800319e:	430a      	orrs	r2, r1
 80031a0:	651a      	str	r2, [r3, #80]	; 0x50
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0x530>
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80031a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031a8:	4b58      	ldr	r3, [pc, #352]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80031aa:	495a      	ldr	r1, [pc, #360]	; (8003314 <HAL_RCC_OscConfig+0x688>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	651a      	str	r2, [r3, #80]	; 0x50
 80031b0:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80031b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80031b6:	4959      	ldr	r1, [pc, #356]	; (800331c <HAL_RCC_OscConfig+0x690>)
 80031b8:	400a      	ands	r2, r1
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d015      	beq.n	80031f0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c4:	f7ff f93e 	bl	8002444 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031cc:	e009      	b.n	80031e2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7ff f939 	bl	8002444 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	4a51      	ldr	r2, [pc, #324]	; (8003320 <HAL_RCC_OscConfig+0x694>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0ca      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e2:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80031e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4013      	ands	r3, r2
 80031ec:	d0ef      	beq.n	80031ce <HAL_RCC_OscConfig+0x542>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7ff f928 	bl	8002444 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031f8:	e009      	b.n	800320e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7ff f923 	bl	8002444 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	4a46      	ldr	r2, [pc, #280]	; (8003320 <HAL_RCC_OscConfig+0x694>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0b4      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800320e:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4013      	ands	r3, r2
 8003218:	d1ef      	bne.n	80031fa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800321a:	2323      	movs	r3, #35	; 0x23
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003228:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800322a:	493e      	ldr	r1, [pc, #248]	; (8003324 <HAL_RCC_OscConfig+0x698>)
 800322c:	400a      	ands	r2, r1
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d100      	bne.n	800323a <HAL_RCC_OscConfig+0x5ae>
 8003238:	e09d      	b.n	8003376 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d100      	bne.n	8003242 <HAL_RCC_OscConfig+0x5b6>
 8003240:	e076      	b.n	8003330 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2b02      	cmp	r3, #2
 8003248:	d145      	bne.n	80032d6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003250:	4935      	ldr	r1, [pc, #212]	; (8003328 <HAL_RCC_OscConfig+0x69c>)
 8003252:	400a      	ands	r2, r1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7ff f8f5 	bl	8002444 <HAL_GetTick>
 800325a:	0003      	movs	r3, r0
 800325c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7ff f8f0 	bl	8002444 <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e082      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	049b      	lsls	r3, r3, #18
 800327a:	4013      	ands	r3, r2
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4a2a      	ldr	r2, [pc, #168]	; (800332c <HAL_RCC_OscConfig+0x6a0>)
 8003284:	4013      	ands	r3, r2
 8003286:	0019      	movs	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	431a      	orrs	r2, r3
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCC_OscConfig+0x680>)
 800329a:	430a      	orrs	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	0449      	lsls	r1, r1, #17
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7ff f8ca 	bl	8002444 <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7ff f8c5 	bl	8002444 <HAL_GetTick>
 80032ba:	0002      	movs	r2, r0
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e057      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	049b      	lsls	r3, r3, #18
 80032d0:	4013      	ands	r3, r2
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x62a>
 80032d4:	e04f      	b.n	8003376 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_RCC_OscConfig+0x680>)
 80032dc:	4912      	ldr	r1, [pc, #72]	; (8003328 <HAL_RCC_OscConfig+0x69c>)
 80032de:	400a      	ands	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e2:	f7ff f8af 	bl	8002444 <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7ff f8aa 	bl	8002444 <HAL_GetTick>
 80032f0:	0002      	movs	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e03c      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032fe:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_RCC_OscConfig+0x680>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	049b      	lsls	r3, r3, #18
 8003306:	4013      	ands	r3, r2
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x660>
 800330a:	e034      	b.n	8003376 <HAL_RCC_OscConfig+0x6ea>
 800330c:	40021000 	.word	0x40021000
 8003310:	ffff1fff 	.word	0xffff1fff
 8003314:	fffffeff 	.word	0xfffffeff
 8003318:	40007000 	.word	0x40007000
 800331c:	fffffbff 	.word	0xfffffbff
 8003320:	00001388 	.word	0x00001388
 8003324:	efffffff 	.word	0xefffffff
 8003328:	feffffff 	.word	0xfeffffff
 800332c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e01d      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_OscConfig+0x6f4>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	025b      	lsls	r3, r3, #9
 8003348:	401a      	ands	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	429a      	cmp	r2, r3
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	23f0      	movs	r3, #240	; 0xf0
 8003356:	039b      	lsls	r3, r3, #14
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d107      	bne.n	8003372 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	23c0      	movs	r3, #192	; 0xc0
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	401a      	ands	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b00a      	add	sp, #40	; 0x28
 800337e:	bdb0      	pop	{r4, r5, r7, pc}
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e128      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b96      	ldr	r3, [pc, #600]	; (80035f4 <HAL_RCC_ClockConfig+0x270>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2201      	movs	r2, #1
 800339e:	4013      	ands	r3, r2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d91e      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b93      	ldr	r3, [pc, #588]	; (80035f4 <HAL_RCC_ClockConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	4393      	bics	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	4b90      	ldr	r3, [pc, #576]	; (80035f4 <HAL_RCC_ClockConfig+0x270>)
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033b8:	f7ff f844 	bl	8002444 <HAL_GetTick>
 80033bc:	0003      	movs	r3, r0
 80033be:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c0:	e009      	b.n	80033d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c2:	f7ff f83f 	bl	8002444 <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	4a8a      	ldr	r2, [pc, #552]	; (80035f8 <HAL_RCC_ClockConfig+0x274>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e109      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b87      	ldr	r3, [pc, #540]	; (80035f4 <HAL_RCC_ClockConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1ee      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2202      	movs	r2, #2
 80033ea:	4013      	ands	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ee:	4b83      	ldr	r3, [pc, #524]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	22f0      	movs	r2, #240	; 0xf0
 80033f4:	4393      	bics	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 80033fe:	430a      	orrs	r2, r1
 8003400:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	d100      	bne.n	800340e <HAL_RCC_ClockConfig+0x8a>
 800340c:	e089      	b.n	8003522 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003416:	4b79      	ldr	r3, [pc, #484]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	029b      	lsls	r3, r3, #10
 800341e:	4013      	ands	r3, r2
 8003420:	d120      	bne.n	8003464 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e0e1      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800342e:	4b73      	ldr	r3, [pc, #460]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	049b      	lsls	r3, r3, #18
 8003436:	4013      	ands	r3, r2
 8003438:	d114      	bne.n	8003464 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0d5      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d106      	bne.n	8003454 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003446:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2204      	movs	r2, #4
 800344c:	4013      	ands	r3, r2
 800344e:	d109      	bne.n	8003464 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0ca      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003454:	4b69      	ldr	r3, [pc, #420]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4013      	ands	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0c2      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003464:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2203      	movs	r2, #3
 800346a:	4393      	bics	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4b62      	ldr	r3, [pc, #392]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 8003474:	430a      	orrs	r2, r1
 8003476:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fe ffe4 	bl	8002444 <HAL_GetTick>
 800347c:	0003      	movs	r3, r0
 800347e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d111      	bne.n	80034ac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003488:	e009      	b.n	800349e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348a:	f7fe ffdb 	bl	8002444 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_RCC_ClockConfig+0x274>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0a5      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800349e:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	220c      	movs	r2, #12
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d1ef      	bne.n	800348a <HAL_RCC_ClockConfig+0x106>
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d111      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b4:	e009      	b.n	80034ca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b6:	f7fe ffc5 	bl	8002444 <HAL_GetTick>
 80034ba:	0002      	movs	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	4a4d      	ldr	r2, [pc, #308]	; (80035f8 <HAL_RCC_ClockConfig+0x274>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e08f      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ca:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	220c      	movs	r2, #12
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d1ef      	bne.n	80034b6 <HAL_RCC_ClockConfig+0x132>
 80034d6:	e024      	b.n	8003522 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d11b      	bne.n	8003518 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e0:	e009      	b.n	80034f6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e2:	f7fe ffaf 	bl	8002444 <HAL_GetTick>
 80034e6:	0002      	movs	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	4a42      	ldr	r2, [pc, #264]	; (80035f8 <HAL_RCC_ClockConfig+0x274>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e079      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	220c      	movs	r2, #12
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d1ef      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x15e>
 8003502:	e00e      	b.n	8003522 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fe ff9e 	bl	8002444 <HAL_GetTick>
 8003508:	0002      	movs	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <HAL_RCC_ClockConfig+0x274>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e068      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003518:	4b38      	ldr	r3, [pc, #224]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	220c      	movs	r2, #12
 800351e:	4013      	ands	r3, r2
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003522:	4b34      	ldr	r3, [pc, #208]	; (80035f4 <HAL_RCC_ClockConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2201      	movs	r2, #1
 8003528:	4013      	ands	r3, r2
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d21e      	bcs.n	800356e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003530:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <HAL_RCC_ClockConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2201      	movs	r2, #1
 8003536:	4393      	bics	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCC_ClockConfig+0x270>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003542:	f7fe ff7f 	bl	8002444 <HAL_GetTick>
 8003546:	0003      	movs	r3, r0
 8003548:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	e009      	b.n	8003560 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fe ff7a 	bl	8002444 <HAL_GetTick>
 8003550:	0002      	movs	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <HAL_RCC_ClockConfig+0x274>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e044      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_RCC_ClockConfig+0x270>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2201      	movs	r2, #1
 8003566:	4013      	ands	r3, r2
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d1ee      	bne.n	800354c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	4013      	ands	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x27c>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 8003588:	430a      	orrs	r2, r1
 800358a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2208      	movs	r2, #8
 8003592:	4013      	ands	r3, r2
 8003594:	d00a      	beq.n	80035ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <HAL_RCC_ClockConfig+0x280>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	00da      	lsls	r2, r3, #3
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ac:	f000 f832 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035b0:	0001      	movs	r1, r0
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_ClockConfig+0x278>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	220f      	movs	r2, #15
 80035ba:	4013      	ands	r3, r2
 80035bc:	4a12      	ldr	r2, [pc, #72]	; (8003608 <HAL_RCC_ClockConfig+0x284>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	000a      	movs	r2, r1
 80035c2:	40da      	lsrs	r2, r3
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_RCC_ClockConfig+0x288>)
 80035c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <HAL_RCC_ClockConfig+0x28c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	250b      	movs	r5, #11
 80035ce:	197c      	adds	r4, r7, r5
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7fe fef1 	bl	80023b8 <HAL_InitTick>
 80035d6:	0003      	movs	r3, r0
 80035d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80035da:	197b      	adds	r3, r7, r5
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80035e2:	197b      	adds	r3, r7, r5
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	e000      	b.n	80035ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	0018      	movs	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b004      	add	sp, #16
 80035f0:	bdb0      	pop	{r4, r5, r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40022000 	.word	0x40022000
 80035f8:	00001388 	.word	0x00001388
 80035fc:	40021000 	.word	0x40021000
 8003600:	fffff8ff 	.word	0xfffff8ff
 8003604:	ffffc7ff 	.word	0xffffc7ff
 8003608:	08003e94 	.word	0x08003e94
 800360c:	20000080 	.word	0x20000080
 8003610:	20000084 	.word	0x20000084

08003614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	b5b0      	push	{r4, r5, r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800361a:	4b4c      	ldr	r3, [pc, #304]	; (800374c <HAL_RCC_GetSysClockFreq+0x138>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003622:	230c      	movs	r3, #12
 8003624:	4013      	ands	r3, r2
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d014      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x40>
 800362a:	d900      	bls.n	800362e <HAL_RCC_GetSysClockFreq+0x1a>
 800362c:	e07b      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x112>
 800362e:	2b04      	cmp	r3, #4
 8003630:	d002      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x24>
 8003632:	2b08      	cmp	r3, #8
 8003634:	d00b      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x3a>
 8003636:	e076      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003638:	4b44      	ldr	r3, [pc, #272]	; (800374c <HAL_RCC_GetSysClockFreq+0x138>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2210      	movs	r2, #16
 800363e:	4013      	ands	r3, r2
 8003640:	d002      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003642:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003646:	e07c      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003648:	4b42      	ldr	r3, [pc, #264]	; (8003754 <HAL_RCC_GetSysClockFreq+0x140>)
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800364c:	e079      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800364e:	4b42      	ldr	r3, [pc, #264]	; (8003758 <HAL_RCC_GetSysClockFreq+0x144>)
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003652:	e076      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	0c9a      	lsrs	r2, r3, #18
 8003658:	230f      	movs	r3, #15
 800365a:	401a      	ands	r2, r3
 800365c:	4b3f      	ldr	r3, [pc, #252]	; (800375c <HAL_RCC_GetSysClockFreq+0x148>)
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	0d9a      	lsrs	r2, r3, #22
 8003666:	2303      	movs	r3, #3
 8003668:	4013      	ands	r3, r2
 800366a:	3301      	adds	r3, #1
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCC_GetSysClockFreq+0x138>)
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	025b      	lsls	r3, r3, #9
 8003676:	4013      	ands	r3, r2
 8003678:	d01a      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	4a35      	ldr	r2, [pc, #212]	; (8003758 <HAL_RCC_GetSysClockFreq+0x144>)
 8003684:	2300      	movs	r3, #0
 8003686:	69b8      	ldr	r0, [r7, #24]
 8003688:	69f9      	ldr	r1, [r7, #28]
 800368a:	f7fc fde9 	bl	8000260 <__aeabi_lmul>
 800368e:	0002      	movs	r2, r0
 8003690:	000b      	movs	r3, r1
 8003692:	0010      	movs	r0, r2
 8003694:	0019      	movs	r1, r3
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f7fc fdbd 	bl	8000220 <__aeabi_uldivmod>
 80036a6:	0002      	movs	r2, r0
 80036a8:	000b      	movs	r3, r1
 80036aa:	0013      	movs	r3, r2
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
 80036ae:	e037      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036b0:	4b26      	ldr	r3, [pc, #152]	; (800374c <HAL_RCC_GetSysClockFreq+0x138>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2210      	movs	r2, #16
 80036b6:	4013      	ands	r3, r2
 80036b8:	d01a      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036c4:	2300      	movs	r3, #0
 80036c6:	68b8      	ldr	r0, [r7, #8]
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	f7fc fdc9 	bl	8000260 <__aeabi_lmul>
 80036ce:	0002      	movs	r2, r0
 80036d0:	000b      	movs	r3, r1
 80036d2:	0010      	movs	r0, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f7fc fd9d 	bl	8000220 <__aeabi_uldivmod>
 80036e6:	0002      	movs	r2, r0
 80036e8:	000b      	movs	r3, r1
 80036ea:	0013      	movs	r3, r2
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
 80036ee:	e017      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	0018      	movs	r0, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	0019      	movs	r1, r3
 80036f8:	4a16      	ldr	r2, [pc, #88]	; (8003754 <HAL_RCC_GetSysClockFreq+0x140>)
 80036fa:	2300      	movs	r3, #0
 80036fc:	f7fc fdb0 	bl	8000260 <__aeabi_lmul>
 8003700:	0002      	movs	r2, r0
 8003702:	000b      	movs	r3, r1
 8003704:	0010      	movs	r0, r2
 8003706:	0019      	movs	r1, r3
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	001c      	movs	r4, r3
 800370c:	2300      	movs	r3, #0
 800370e:	001d      	movs	r5, r3
 8003710:	0022      	movs	r2, r4
 8003712:	002b      	movs	r3, r5
 8003714:	f7fc fd84 	bl	8000220 <__aeabi_uldivmod>
 8003718:	0002      	movs	r2, r0
 800371a:	000b      	movs	r3, r1
 800371c:	0013      	movs	r3, r2
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003724:	e00d      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_GetSysClockFreq+0x138>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	0b5b      	lsrs	r3, r3, #13
 800372c:	2207      	movs	r2, #7
 800372e:	4013      	ands	r3, r2
 8003730:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	3301      	adds	r3, #1
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	0212      	lsls	r2, r2, #8
 800373a:	409a      	lsls	r2, r3
 800373c:	0013      	movs	r3, r2
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003740:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b00e      	add	sp, #56	; 0x38
 800374a:	bdb0      	pop	{r4, r5, r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	003d0900 	.word	0x003d0900
 8003754:	00f42400 	.word	0x00f42400
 8003758:	007a1200 	.word	0x007a1200
 800375c:	08003ea4 	.word	0x08003ea4

08003760 <LL_GPIO_SetPinMode>:
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	435b      	muls	r3, r3
 8003774:	001a      	movs	r2, r3
 8003776:	0013      	movs	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	189b      	adds	r3, r3, r2
 800377c:	43db      	mvns	r3, r3
 800377e:	400b      	ands	r3, r1
 8003780:	001a      	movs	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	435b      	muls	r3, r3
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	434b      	muls	r3, r1
 800378a:	431a      	orrs	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}

08003798 <LL_GPIO_SetPinOutputType>:
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	43d2      	mvns	r2, r2
 80037ac:	401a      	ands	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	434b      	muls	r3, r1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b004      	add	sp, #16
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <LL_GPIO_SetPinSpeed>:
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	435b      	muls	r3, r3
 80037d6:	001a      	movs	r2, r3
 80037d8:	0013      	movs	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	43db      	mvns	r3, r3
 80037e0:	400b      	ands	r3, r1
 80037e2:	001a      	movs	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	435b      	muls	r3, r3
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	434b      	muls	r3, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	609a      	str	r2, [r3, #8]
}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b004      	add	sp, #16
 80037f8:	bd80      	pop	{r7, pc}

080037fa <LL_GPIO_SetPinPull>:
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68d9      	ldr	r1, [r3, #12]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	435b      	muls	r3, r3
 800380e:	001a      	movs	r2, r3
 8003810:	0013      	movs	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	189b      	adds	r3, r3, r2
 8003816:	43db      	mvns	r3, r3
 8003818:	400b      	ands	r3, r1
 800381a:	001a      	movs	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	435b      	muls	r3, r3
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	434b      	muls	r3, r1
 8003824:	431a      	orrs	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	60da      	str	r2, [r3, #12]
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b004      	add	sp, #16
 8003830:	bd80      	pop	{r7, pc}

08003832 <LL_GPIO_SetAFPin_0_7>:
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a19      	ldr	r1, [r3, #32]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	435b      	muls	r3, r3
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4353      	muls	r3, r2
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	435a      	muls	r2, r3
 800384e:	0013      	movs	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	43db      	mvns	r3, r3
 8003856:	400b      	ands	r3, r1
 8003858:	001a      	movs	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	435b      	muls	r3, r3
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	434b      	muls	r3, r1
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	434b      	muls	r3, r1
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	434b      	muls	r3, r1
 800386a:	431a      	orrs	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	621a      	str	r2, [r3, #32]
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b004      	add	sp, #16
 8003876:	bd80      	pop	{r7, pc}

08003878 <LL_GPIO_SetAFPin_8_15>:
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	0a12      	lsrs	r2, r2, #8
 8003890:	4353      	muls	r3, r2
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	0a12      	lsrs	r2, r2, #8
 8003896:	4353      	muls	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	0a12      	lsrs	r2, r2, #8
 800389c:	435a      	muls	r2, r3
 800389e:	0013      	movs	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	43db      	mvns	r3, r3
 80038a6:	400b      	ands	r3, r1
 80038a8:	001a      	movs	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	0a09      	lsrs	r1, r1, #8
 80038b2:	434b      	muls	r3, r1
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	0a09      	lsrs	r1, r1, #8
 80038b8:	434b      	muls	r3, r1
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	0a09      	lsrs	r1, r1, #8
 80038be:	434b      	muls	r3, r1
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	434b      	muls	r3, r1
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b004      	add	sp, #16
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80038e4:	e048      	b.n	8003978 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4091      	lsls	r1, r2
 80038f0:	000a      	movs	r2, r1
 80038f2:	4013      	ands	r3, r2
 80038f4:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d03a      	beq.n	8003972 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d003      	beq.n	800390c <LL_GPIO_Init+0x3a>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d10e      	bne.n	800392a <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0018      	movs	r0, r3
 8003916:	f7ff ff54 	bl	80037c2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f7ff ff37 	bl	8003798 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0018      	movs	r0, r3
 8003934:	f7ff ff61 	bl	80037fa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d111      	bne.n	8003964 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2bff      	cmp	r3, #255	; 0xff
 8003944:	d807      	bhi.n	8003956 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f7ff ff6f 	bl	8003832 <LL_GPIO_SetAFPin_0_7>
 8003954:	e006      	b.n	8003964 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f7ff ff8a 	bl	8003878 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	0018      	movs	r0, r3
 800396e:	f7ff fef7 	bl	8003760 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	40da      	lsrs	r2, r3
 8003980:	1e13      	subs	r3, r2, #0
 8003982:	d1b0      	bne.n	80038e6 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b004      	add	sp, #16
 800398c:	bd80      	pop	{r7, pc}

0800398e <LL_TIM_SetPrescaler>:
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b002      	add	sp, #8
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <LL_TIM_SetAutoReload>:
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b002      	add	sp, #8
 80039bc:	bd80      	pop	{r7, pc}

080039be <LL_TIM_OC_SetCompareCH1>:
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b002      	add	sp, #8
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <LL_TIM_OC_SetCompareCH2>:
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b002      	add	sp, #8
 80039ec:	bd80      	pop	{r7, pc}

080039ee <LL_TIM_OC_SetCompareCH3>:
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b002      	add	sp, #8
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <LL_TIM_OC_SetCompareCH4>:
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b002      	add	sp, #8
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	615a      	str	r2, [r3, #20]
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b002      	add	sp, #8
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	05db      	lsls	r3, r3, #23
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d003      	beq.n	8003a5e <LL_TIM_Init+0x22>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1a      	ldr	r2, [pc, #104]	; (8003ac4 <LL_TIM_Init+0x88>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d107      	bne.n	8003a6e <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2270      	movs	r2, #112	; 0x70
 8003a62:	4393      	bics	r3, r2
 8003a64:	001a      	movs	r2, r3
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	05db      	lsls	r3, r3, #23
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d003      	beq.n	8003a80 <LL_TIM_Init+0x44>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <LL_TIM_Init+0x88>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d106      	bne.n	8003a8e <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <LL_TIM_Init+0x8c>)
 8003a84:	401a      	ands	r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0011      	movs	r1, r2
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7ff ff82 	bl	80039a6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0011      	movs	r1, r2
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7ff ff6e 	bl	800398e <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7ff ffb2 	bl	8003a1e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40010800 	.word	0x40010800
 8003ac8:	fffffcff 	.word	0xfffffcff

08003acc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003ad8:	2317      	movs	r3, #23
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	015b      	lsls	r3, r3, #5
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d036      	beq.n	8003b58 <LL_TIM_OC_Init+0x8c>
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	015b      	lsls	r3, r3, #5
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d83c      	bhi.n	8003b6e <LL_TIM_OC_Init+0xa2>
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d021      	beq.n	8003b42 <LL_TIM_OC_Init+0x76>
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d832      	bhi.n	8003b6e <LL_TIM_OC_Init+0xa2>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d003      	beq.n	8003b16 <LL_TIM_OC_Init+0x4a>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d00b      	beq.n	8003b2c <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003b14:	e02b      	b.n	8003b6e <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003b16:	2317      	movs	r3, #23
 8003b18:	18fc      	adds	r4, r7, r3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	0011      	movs	r1, r2
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f82c 	bl	8003b7e <OC1Config>
 8003b26:	0003      	movs	r3, r0
 8003b28:	7023      	strb	r3, [r4, #0]
      break;
 8003b2a:	e021      	b.n	8003b70 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003b2c:	2317      	movs	r3, #23
 8003b2e:	18fc      	adds	r4, r7, r3
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0011      	movs	r1, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f868 	bl	8003c0c <OC2Config>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	7023      	strb	r3, [r4, #0]
      break;
 8003b40:	e016      	b.n	8003b70 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003b42:	2317      	movs	r3, #23
 8003b44:	18fc      	adds	r4, r7, r3
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f000 f8a9 	bl	8003ca4 <OC3Config>
 8003b52:	0003      	movs	r3, r0
 8003b54:	7023      	strb	r3, [r4, #0]
      break;
 8003b56:	e00b      	b.n	8003b70 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003b58:	2317      	movs	r3, #23
 8003b5a:	18fc      	adds	r4, r7, r3
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	0011      	movs	r1, r2
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 f8e8 	bl	8003d38 <OC4Config>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	7023      	strb	r3, [r4, #0]
      break;
 8003b6c:	e000      	b.n	8003b70 <LL_TIM_OC_Init+0xa4>
      break;
 8003b6e:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8003b70:	2317      	movs	r3, #23
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781b      	ldrb	r3, [r3, #0]
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b007      	add	sp, #28
 8003b7c:	bd90      	pop	{r4, r7, pc}

08003b7e <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	4393      	bics	r3, r2
 8003b90:	001a      	movs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2203      	movs	r2, #3
 8003bac:	4393      	bics	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2270      	movs	r2, #112	; 0x70
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	4393      	bics	r3, r2
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4393      	bics	r3, r2
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff fee2 	bl	80039be <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b006      	add	sp, #24
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	001a      	movs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <OC2Config+0x90>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a17      	ldr	r2, [pc, #92]	; (8003ca0 <OC2Config+0x94>)
 8003c42:	401a      	ands	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2220      	movs	r2, #32
 8003c52:	4393      	bics	r3, r2
 8003c54:	001a      	movs	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2210      	movs	r2, #16
 8003c64:	4393      	bics	r3, r2
 8003c66:	001a      	movs	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0011      	movs	r1, r2
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7ff fea5 	bl	80039d6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b006      	add	sp, #24
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	fffffcff 	.word	0xfffffcff
 8003ca0:	ffff8fff 	.word	0xffff8fff

08003ca4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <OC3Config+0x8c>)
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2270      	movs	r2, #112	; 0x70
 8003cd8:	4393      	bics	r3, r2
 8003cda:	001a      	movs	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <OC3Config+0x90>)
 8003ce8:	401a      	ands	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <OC3Config+0x8c>)
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	0011      	movs	r1, r2
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7ff fe68 	bl	80039ee <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b006      	add	sp, #24
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	fffffeff 	.word	0xfffffeff
 8003d34:	fffffdff 	.word	0xfffffdff

08003d38 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <OC4Config+0x8c>)
 8003d48:	401a      	ands	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <OC4Config+0x90>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <OC4Config+0x94>)
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <OC4Config+0x98>)
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	031b      	lsls	r3, r3, #12
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <OC4Config+0x8c>)
 8003d8c:	401a      	ands	r2, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	031b      	lsls	r3, r3, #12
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0011      	movs	r1, r2
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff fe2a 	bl	8003a06 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b006      	add	sp, #24
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	ffffefff 	.word	0xffffefff
 8003dc8:	fffffcff 	.word	0xfffffcff
 8003dcc:	ffff8fff 	.word	0xffff8fff
 8003dd0:	ffffdfff 	.word	0xffffdfff

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	2600      	movs	r6, #0
 8003dd8:	4d0c      	ldr	r5, [pc, #48]	; (8003e0c <__libc_init_array+0x38>)
 8003dda:	4c0d      	ldr	r4, [pc, #52]	; (8003e10 <__libc_init_array+0x3c>)
 8003ddc:	1b64      	subs	r4, r4, r5
 8003dde:	10a4      	asrs	r4, r4, #2
 8003de0:	42a6      	cmp	r6, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	2600      	movs	r6, #0
 8003de6:	f000 f821 	bl	8003e2c <_init>
 8003dea:	4d0a      	ldr	r5, [pc, #40]	; (8003e14 <__libc_init_array+0x40>)
 8003dec:	4c0a      	ldr	r4, [pc, #40]	; (8003e18 <__libc_init_array+0x44>)
 8003dee:	1b64      	subs	r4, r4, r5
 8003df0:	10a4      	asrs	r4, r4, #2
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	00b3      	lsls	r3, r6, #2
 8003dfa:	58eb      	ldr	r3, [r5, r3]
 8003dfc:	4798      	blx	r3
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	00b3      	lsls	r3, r6, #2
 8003e04:	58eb      	ldr	r3, [r5, r3]
 8003e06:	4798      	blx	r3
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	08003eb8 	.word	0x08003eb8
 8003e10:	08003eb8 	.word	0x08003eb8
 8003e14:	08003eb8 	.word	0x08003eb8
 8003e18:	08003ebc 	.word	0x08003ebc

08003e1c <memset>:
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	1882      	adds	r2, r0, r2
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d100      	bne.n	8003e26 <memset+0xa>
 8003e24:	4770      	bx	lr
 8003e26:	7019      	strb	r1, [r3, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	e7f9      	b.n	8003e20 <memset+0x4>

08003e2c <_init>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr

08003e38 <_fini>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr
