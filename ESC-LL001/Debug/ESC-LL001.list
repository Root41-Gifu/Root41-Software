
ESC-LL001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e4  080031e4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031ec  080031ec  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080031f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000008c  08003280  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003280  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004436  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001096  00000000  00000000  000244ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  00025580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00025aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107c7  00000000  00000000  00025f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a64  00000000  00000000  000366ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000619b2  00000000  00000000  0003c163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009db15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000132c  00000000  00000000  0009db68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003160 	.word	0x08003160

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08003160 	.word	0x08003160

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__aeabi_d2uiz>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	2200      	movs	r2, #0
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <__aeabi_d2uiz+0x38>)
 80002b6:	0004      	movs	r4, r0
 80002b8:	000d      	movs	r5, r1
 80002ba:	f000 ff7b 	bl	80011b4 <__aeabi_dcmpge>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d104      	bne.n	80002cc <__aeabi_d2uiz+0x1c>
 80002c2:	0020      	movs	r0, r4
 80002c4:	0029      	movs	r1, r5
 80002c6:	f000 fedb 	bl	8001080 <__aeabi_d2iz>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <__aeabi_d2uiz+0x38>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	0020      	movs	r0, r4
 80002d2:	0029      	movs	r1, r5
 80002d4:	f000 fb42 	bl	800095c <__aeabi_dsub>
 80002d8:	f000 fed2 	bl	8001080 <__aeabi_d2iz>
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	061b      	lsls	r3, r3, #24
 80002e0:	469c      	mov	ip, r3
 80002e2:	4460      	add	r0, ip
 80002e4:	e7f1      	b.n	80002ca <__aeabi_d2uiz+0x1a>
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	41e00000 	.word	0x41e00000

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f000 ff7a 	bl	8001204 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f000 ff75 	bl	8001204 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	469b      	mov	fp, r3
 8000322:	d433      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000324:	465a      	mov	r2, fp
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83a      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e078      	b.n	8000430 <__udivmoddi4+0x144>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e075      	b.n	8000436 <__udivmoddi4+0x14a>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e028      	b.n	80003b6 <__udivmoddi4+0xca>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	2320      	movs	r3, #32
 8000390:	1a9b      	subs	r3, r3, r2
 8000392:	4652      	mov	r2, sl
 8000394:	40da      	lsrs	r2, r3
 8000396:	4641      	mov	r1, r8
 8000398:	0013      	movs	r3, r2
 800039a:	464a      	mov	r2, r9
 800039c:	408a      	lsls	r2, r1
 800039e:	0017      	movs	r7, r2
 80003a0:	4642      	mov	r2, r8
 80003a2:	431f      	orrs	r7, r3
 80003a4:	4653      	mov	r3, sl
 80003a6:	4093      	lsls	r3, r2
 80003a8:	001e      	movs	r6, r3
 80003aa:	42af      	cmp	r7, r5
 80003ac:	d9c4      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003ae:	2200      	movs	r2, #0
 80003b0:	2300      	movs	r3, #0
 80003b2:	9200      	str	r2, [sp, #0]
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	4643      	mov	r3, r8
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0d9      	beq.n	8000370 <__udivmoddi4+0x84>
 80003bc:	07fb      	lsls	r3, r7, #31
 80003be:	0872      	lsrs	r2, r6, #1
 80003c0:	431a      	orrs	r2, r3
 80003c2:	4646      	mov	r6, r8
 80003c4:	087b      	lsrs	r3, r7, #1
 80003c6:	e00e      	b.n	80003e6 <__udivmoddi4+0xfa>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d101      	bne.n	80003d0 <__udivmoddi4+0xe4>
 80003cc:	42a2      	cmp	r2, r4
 80003ce:	d80c      	bhi.n	80003ea <__udivmoddi4+0xfe>
 80003d0:	1aa4      	subs	r4, r4, r2
 80003d2:	419d      	sbcs	r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	1924      	adds	r4, r4, r4
 80003d8:	416d      	adcs	r5, r5
 80003da:	2100      	movs	r1, #0
 80003dc:	3e01      	subs	r6, #1
 80003de:	1824      	adds	r4, r4, r0
 80003e0:	414d      	adcs	r5, r1
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d006      	beq.n	80003f4 <__udivmoddi4+0x108>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d9ee      	bls.n	80003c8 <__udivmoddi4+0xdc>
 80003ea:	3e01      	subs	r6, #1
 80003ec:	1924      	adds	r4, r4, r4
 80003ee:	416d      	adcs	r5, r5
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d1f8      	bne.n	80003e6 <__udivmoddi4+0xfa>
 80003f4:	9800      	ldr	r0, [sp, #0]
 80003f6:	9901      	ldr	r1, [sp, #4]
 80003f8:	465b      	mov	r3, fp
 80003fa:	1900      	adds	r0, r0, r4
 80003fc:	4169      	adcs	r1, r5
 80003fe:	2b00      	cmp	r3, #0
 8000400:	db24      	blt.n	800044c <__udivmoddi4+0x160>
 8000402:	002b      	movs	r3, r5
 8000404:	465a      	mov	r2, fp
 8000406:	4644      	mov	r4, r8
 8000408:	40d3      	lsrs	r3, r2
 800040a:	002a      	movs	r2, r5
 800040c:	40e2      	lsrs	r2, r4
 800040e:	001c      	movs	r4, r3
 8000410:	465b      	mov	r3, fp
 8000412:	0015      	movs	r5, r2
 8000414:	2b00      	cmp	r3, #0
 8000416:	db2a      	blt.n	800046e <__udivmoddi4+0x182>
 8000418:	0026      	movs	r6, r4
 800041a:	409e      	lsls	r6, r3
 800041c:	0033      	movs	r3, r6
 800041e:	0026      	movs	r6, r4
 8000420:	4647      	mov	r7, r8
 8000422:	40be      	lsls	r6, r7
 8000424:	0032      	movs	r2, r6
 8000426:	1a80      	subs	r0, r0, r2
 8000428:	4199      	sbcs	r1, r3
 800042a:	9000      	str	r0, [sp, #0]
 800042c:	9101      	str	r1, [sp, #4]
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x84>
 8000430:	42a3      	cmp	r3, r4
 8000432:	d8bc      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000434:	e783      	b.n	800033e <__udivmoddi4+0x52>
 8000436:	4642      	mov	r2, r8
 8000438:	2320      	movs	r3, #32
 800043a:	2100      	movs	r1, #0
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	2200      	movs	r2, #0
 8000440:	9100      	str	r1, [sp, #0]
 8000442:	9201      	str	r2, [sp, #4]
 8000444:	2201      	movs	r2, #1
 8000446:	40da      	lsrs	r2, r3
 8000448:	9201      	str	r2, [sp, #4]
 800044a:	e786      	b.n	800035a <__udivmoddi4+0x6e>
 800044c:	4642      	mov	r2, r8
 800044e:	2320      	movs	r3, #32
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	002a      	movs	r2, r5
 8000454:	4646      	mov	r6, r8
 8000456:	409a      	lsls	r2, r3
 8000458:	0023      	movs	r3, r4
 800045a:	40f3      	lsrs	r3, r6
 800045c:	4644      	mov	r4, r8
 800045e:	4313      	orrs	r3, r2
 8000460:	002a      	movs	r2, r5
 8000462:	40e2      	lsrs	r2, r4
 8000464:	001c      	movs	r4, r3
 8000466:	465b      	mov	r3, fp
 8000468:	0015      	movs	r5, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	dad4      	bge.n	8000418 <__udivmoddi4+0x12c>
 800046e:	4642      	mov	r2, r8
 8000470:	002f      	movs	r7, r5
 8000472:	2320      	movs	r3, #32
 8000474:	0026      	movs	r6, r4
 8000476:	4097      	lsls	r7, r2
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	40de      	lsrs	r6, r3
 800047c:	003b      	movs	r3, r7
 800047e:	4333      	orrs	r3, r6
 8000480:	e7cd      	b.n	800041e <__udivmoddi4+0x132>
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dmul>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	4698      	mov	r8, r3
 8000492:	030c      	lsls	r4, r1, #12
 8000494:	004b      	lsls	r3, r1, #1
 8000496:	0006      	movs	r6, r0
 8000498:	4692      	mov	sl, r2
 800049a:	b087      	sub	sp, #28
 800049c:	0b24      	lsrs	r4, r4, #12
 800049e:	0d5b      	lsrs	r3, r3, #21
 80004a0:	0fcf      	lsrs	r7, r1, #31
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d06c      	beq.n	8000580 <__aeabi_dmul+0xfc>
 80004a6:	4add      	ldr	r2, [pc, #884]	; (800081c <__aeabi_dmul+0x398>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d100      	bne.n	80004ae <__aeabi_dmul+0x2a>
 80004ac:	e086      	b.n	80005bc <__aeabi_dmul+0x138>
 80004ae:	0f42      	lsrs	r2, r0, #29
 80004b0:	00e4      	lsls	r4, r4, #3
 80004b2:	4314      	orrs	r4, r2
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	0412      	lsls	r2, r2, #16
 80004b8:	4314      	orrs	r4, r2
 80004ba:	4ad9      	ldr	r2, [pc, #868]	; (8000820 <__aeabi_dmul+0x39c>)
 80004bc:	00c5      	lsls	r5, r0, #3
 80004be:	4694      	mov	ip, r2
 80004c0:	4463      	add	r3, ip
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	2300      	movs	r3, #0
 80004c6:	4699      	mov	r9, r3
 80004c8:	469b      	mov	fp, r3
 80004ca:	4643      	mov	r3, r8
 80004cc:	4642      	mov	r2, r8
 80004ce:	031e      	lsls	r6, r3, #12
 80004d0:	0fd2      	lsrs	r2, r2, #31
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4650      	mov	r0, sl
 80004d6:	4690      	mov	r8, r2
 80004d8:	0b36      	lsrs	r6, r6, #12
 80004da:	0d5b      	lsrs	r3, r3, #21
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dmul+0x5c>
 80004de:	e078      	b.n	80005d2 <__aeabi_dmul+0x14e>
 80004e0:	4ace      	ldr	r2, [pc, #824]	; (800081c <__aeabi_dmul+0x398>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d01d      	beq.n	8000522 <__aeabi_dmul+0x9e>
 80004e6:	49ce      	ldr	r1, [pc, #824]	; (8000820 <__aeabi_dmul+0x39c>)
 80004e8:	0f42      	lsrs	r2, r0, #29
 80004ea:	468c      	mov	ip, r1
 80004ec:	9900      	ldr	r1, [sp, #0]
 80004ee:	4463      	add	r3, ip
 80004f0:	00f6      	lsls	r6, r6, #3
 80004f2:	468c      	mov	ip, r1
 80004f4:	4316      	orrs	r6, r2
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	449c      	add	ip, r3
 80004fa:	0412      	lsls	r2, r2, #16
 80004fc:	4663      	mov	r3, ip
 80004fe:	4316      	orrs	r6, r2
 8000500:	00c2      	lsls	r2, r0, #3
 8000502:	2000      	movs	r0, #0
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	9900      	ldr	r1, [sp, #0]
 8000508:	4643      	mov	r3, r8
 800050a:	3101      	adds	r1, #1
 800050c:	468c      	mov	ip, r1
 800050e:	4649      	mov	r1, r9
 8000510:	407b      	eors	r3, r7
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	290f      	cmp	r1, #15
 8000516:	d900      	bls.n	800051a <__aeabi_dmul+0x96>
 8000518:	e07e      	b.n	8000618 <__aeabi_dmul+0x194>
 800051a:	4bc2      	ldr	r3, [pc, #776]	; (8000824 <__aeabi_dmul+0x3a0>)
 800051c:	0089      	lsls	r1, r1, #2
 800051e:	5859      	ldr	r1, [r3, r1]
 8000520:	468f      	mov	pc, r1
 8000522:	4652      	mov	r2, sl
 8000524:	9b00      	ldr	r3, [sp, #0]
 8000526:	4332      	orrs	r2, r6
 8000528:	d000      	beq.n	800052c <__aeabi_dmul+0xa8>
 800052a:	e156      	b.n	80007da <__aeabi_dmul+0x356>
 800052c:	49bb      	ldr	r1, [pc, #748]	; (800081c <__aeabi_dmul+0x398>)
 800052e:	2600      	movs	r6, #0
 8000530:	468c      	mov	ip, r1
 8000532:	4463      	add	r3, ip
 8000534:	4649      	mov	r1, r9
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	4319      	orrs	r1, r3
 800053c:	4689      	mov	r9, r1
 800053e:	2002      	movs	r0, #2
 8000540:	e7e1      	b.n	8000506 <__aeabi_dmul+0x82>
 8000542:	4643      	mov	r3, r8
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	0034      	movs	r4, r6
 8000548:	0015      	movs	r5, r2
 800054a:	4683      	mov	fp, r0
 800054c:	465b      	mov	r3, fp
 800054e:	2b02      	cmp	r3, #2
 8000550:	d05e      	beq.n	8000610 <__aeabi_dmul+0x18c>
 8000552:	2b03      	cmp	r3, #3
 8000554:	d100      	bne.n	8000558 <__aeabi_dmul+0xd4>
 8000556:	e1f3      	b.n	8000940 <__aeabi_dmul+0x4bc>
 8000558:	2b01      	cmp	r3, #1
 800055a:	d000      	beq.n	800055e <__aeabi_dmul+0xda>
 800055c:	e118      	b.n	8000790 <__aeabi_dmul+0x30c>
 800055e:	2200      	movs	r2, #0
 8000560:	2400      	movs	r4, #0
 8000562:	2500      	movs	r5, #0
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	0512      	lsls	r2, r2, #20
 8000568:	4322      	orrs	r2, r4
 800056a:	07db      	lsls	r3, r3, #31
 800056c:	431a      	orrs	r2, r3
 800056e:	0028      	movs	r0, r5
 8000570:	0011      	movs	r1, r2
 8000572:	b007      	add	sp, #28
 8000574:	bcf0      	pop	{r4, r5, r6, r7}
 8000576:	46bb      	mov	fp, r7
 8000578:	46b2      	mov	sl, r6
 800057a:	46a9      	mov	r9, r5
 800057c:	46a0      	mov	r8, r4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	0025      	movs	r5, r4
 8000582:	4305      	orrs	r5, r0
 8000584:	d100      	bne.n	8000588 <__aeabi_dmul+0x104>
 8000586:	e141      	b.n	800080c <__aeabi_dmul+0x388>
 8000588:	2c00      	cmp	r4, #0
 800058a:	d100      	bne.n	800058e <__aeabi_dmul+0x10a>
 800058c:	e1ad      	b.n	80008ea <__aeabi_dmul+0x466>
 800058e:	0020      	movs	r0, r4
 8000590:	f000 fe1a 	bl	80011c8 <__clzsi2>
 8000594:	0001      	movs	r1, r0
 8000596:	0002      	movs	r2, r0
 8000598:	390b      	subs	r1, #11
 800059a:	231d      	movs	r3, #29
 800059c:	0010      	movs	r0, r2
 800059e:	1a5b      	subs	r3, r3, r1
 80005a0:	0031      	movs	r1, r6
 80005a2:	0035      	movs	r5, r6
 80005a4:	3808      	subs	r0, #8
 80005a6:	4084      	lsls	r4, r0
 80005a8:	40d9      	lsrs	r1, r3
 80005aa:	4085      	lsls	r5, r0
 80005ac:	430c      	orrs	r4, r1
 80005ae:	489e      	ldr	r0, [pc, #632]	; (8000828 <__aeabi_dmul+0x3a4>)
 80005b0:	1a83      	subs	r3, r0, r2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	4699      	mov	r9, r3
 80005b8:	469b      	mov	fp, r3
 80005ba:	e786      	b.n	80004ca <__aeabi_dmul+0x46>
 80005bc:	0005      	movs	r5, r0
 80005be:	4325      	orrs	r5, r4
 80005c0:	d000      	beq.n	80005c4 <__aeabi_dmul+0x140>
 80005c2:	e11c      	b.n	80007fe <__aeabi_dmul+0x37a>
 80005c4:	2208      	movs	r2, #8
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2302      	movs	r3, #2
 80005ca:	2400      	movs	r4, #0
 80005cc:	4691      	mov	r9, r2
 80005ce:	469b      	mov	fp, r3
 80005d0:	e77b      	b.n	80004ca <__aeabi_dmul+0x46>
 80005d2:	4652      	mov	r2, sl
 80005d4:	4332      	orrs	r2, r6
 80005d6:	d100      	bne.n	80005da <__aeabi_dmul+0x156>
 80005d8:	e10a      	b.n	80007f0 <__aeabi_dmul+0x36c>
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_dmul+0x15c>
 80005de:	e176      	b.n	80008ce <__aeabi_dmul+0x44a>
 80005e0:	0030      	movs	r0, r6
 80005e2:	f000 fdf1 	bl	80011c8 <__clzsi2>
 80005e6:	0002      	movs	r2, r0
 80005e8:	3a0b      	subs	r2, #11
 80005ea:	231d      	movs	r3, #29
 80005ec:	0001      	movs	r1, r0
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	4652      	mov	r2, sl
 80005f2:	3908      	subs	r1, #8
 80005f4:	40da      	lsrs	r2, r3
 80005f6:	408e      	lsls	r6, r1
 80005f8:	4316      	orrs	r6, r2
 80005fa:	4652      	mov	r2, sl
 80005fc:	408a      	lsls	r2, r1
 80005fe:	9b00      	ldr	r3, [sp, #0]
 8000600:	4989      	ldr	r1, [pc, #548]	; (8000828 <__aeabi_dmul+0x3a4>)
 8000602:	1a18      	subs	r0, r3, r0
 8000604:	0003      	movs	r3, r0
 8000606:	468c      	mov	ip, r1
 8000608:	4463      	add	r3, ip
 800060a:	2000      	movs	r0, #0
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	e77a      	b.n	8000506 <__aeabi_dmul+0x82>
 8000610:	2400      	movs	r4, #0
 8000612:	2500      	movs	r5, #0
 8000614:	4a81      	ldr	r2, [pc, #516]	; (800081c <__aeabi_dmul+0x398>)
 8000616:	e7a5      	b.n	8000564 <__aeabi_dmul+0xe0>
 8000618:	0c2f      	lsrs	r7, r5, #16
 800061a:	042d      	lsls	r5, r5, #16
 800061c:	0c2d      	lsrs	r5, r5, #16
 800061e:	002b      	movs	r3, r5
 8000620:	0c11      	lsrs	r1, r2, #16
 8000622:	0412      	lsls	r2, r2, #16
 8000624:	0c12      	lsrs	r2, r2, #16
 8000626:	4353      	muls	r3, r2
 8000628:	4698      	mov	r8, r3
 800062a:	0013      	movs	r3, r2
 800062c:	0028      	movs	r0, r5
 800062e:	437b      	muls	r3, r7
 8000630:	4699      	mov	r9, r3
 8000632:	4348      	muls	r0, r1
 8000634:	4448      	add	r0, r9
 8000636:	4683      	mov	fp, r0
 8000638:	4640      	mov	r0, r8
 800063a:	000b      	movs	r3, r1
 800063c:	0c00      	lsrs	r0, r0, #16
 800063e:	4682      	mov	sl, r0
 8000640:	4658      	mov	r0, fp
 8000642:	437b      	muls	r3, r7
 8000644:	4450      	add	r0, sl
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	4581      	cmp	r9, r0
 800064a:	d906      	bls.n	800065a <__aeabi_dmul+0x1d6>
 800064c:	469a      	mov	sl, r3
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	4699      	mov	r9, r3
 8000654:	44ca      	add	sl, r9
 8000656:	4653      	mov	r3, sl
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	0c03      	lsrs	r3, r0, #16
 800065c:	469b      	mov	fp, r3
 800065e:	4643      	mov	r3, r8
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0400      	lsls	r0, r0, #16
 8000664:	0c1b      	lsrs	r3, r3, #16
 8000666:	4698      	mov	r8, r3
 8000668:	0003      	movs	r3, r0
 800066a:	4443      	add	r3, r8
 800066c:	9304      	str	r3, [sp, #16]
 800066e:	0c33      	lsrs	r3, r6, #16
 8000670:	4699      	mov	r9, r3
 8000672:	002b      	movs	r3, r5
 8000674:	0436      	lsls	r6, r6, #16
 8000676:	0c36      	lsrs	r6, r6, #16
 8000678:	4373      	muls	r3, r6
 800067a:	4698      	mov	r8, r3
 800067c:	0033      	movs	r3, r6
 800067e:	437b      	muls	r3, r7
 8000680:	469a      	mov	sl, r3
 8000682:	464b      	mov	r3, r9
 8000684:	435d      	muls	r5, r3
 8000686:	435f      	muls	r7, r3
 8000688:	4643      	mov	r3, r8
 800068a:	4455      	add	r5, sl
 800068c:	0c18      	lsrs	r0, r3, #16
 800068e:	1940      	adds	r0, r0, r5
 8000690:	4582      	cmp	sl, r0
 8000692:	d903      	bls.n	800069c <__aeabi_dmul+0x218>
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	025b      	lsls	r3, r3, #9
 8000698:	469a      	mov	sl, r3
 800069a:	4457      	add	r7, sl
 800069c:	0c05      	lsrs	r5, r0, #16
 800069e:	19eb      	adds	r3, r5, r7
 80006a0:	9305      	str	r3, [sp, #20]
 80006a2:	4643      	mov	r3, r8
 80006a4:	041d      	lsls	r5, r3, #16
 80006a6:	0c2d      	lsrs	r5, r5, #16
 80006a8:	0400      	lsls	r0, r0, #16
 80006aa:	1940      	adds	r0, r0, r5
 80006ac:	0c25      	lsrs	r5, r4, #16
 80006ae:	0424      	lsls	r4, r4, #16
 80006b0:	0c24      	lsrs	r4, r4, #16
 80006b2:	0027      	movs	r7, r4
 80006b4:	4357      	muls	r7, r2
 80006b6:	436a      	muls	r2, r5
 80006b8:	4690      	mov	r8, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	0c3b      	lsrs	r3, r7, #16
 80006be:	469a      	mov	sl, r3
 80006c0:	434a      	muls	r2, r1
 80006c2:	4361      	muls	r1, r4
 80006c4:	4441      	add	r1, r8
 80006c6:	4451      	add	r1, sl
 80006c8:	4483      	add	fp, r0
 80006ca:	4588      	cmp	r8, r1
 80006cc:	d903      	bls.n	80006d6 <__aeabi_dmul+0x252>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	025b      	lsls	r3, r3, #9
 80006d2:	4698      	mov	r8, r3
 80006d4:	4442      	add	r2, r8
 80006d6:	043f      	lsls	r7, r7, #16
 80006d8:	0c0b      	lsrs	r3, r1, #16
 80006da:	0c3f      	lsrs	r7, r7, #16
 80006dc:	0409      	lsls	r1, r1, #16
 80006de:	19c9      	adds	r1, r1, r7
 80006e0:	0027      	movs	r7, r4
 80006e2:	4698      	mov	r8, r3
 80006e4:	464b      	mov	r3, r9
 80006e6:	4377      	muls	r7, r6
 80006e8:	435c      	muls	r4, r3
 80006ea:	436e      	muls	r6, r5
 80006ec:	435d      	muls	r5, r3
 80006ee:	0c3b      	lsrs	r3, r7, #16
 80006f0:	4699      	mov	r9, r3
 80006f2:	19a4      	adds	r4, r4, r6
 80006f4:	444c      	add	r4, r9
 80006f6:	4442      	add	r2, r8
 80006f8:	9503      	str	r5, [sp, #12]
 80006fa:	42a6      	cmp	r6, r4
 80006fc:	d904      	bls.n	8000708 <__aeabi_dmul+0x284>
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	025b      	lsls	r3, r3, #9
 8000702:	4698      	mov	r8, r3
 8000704:	4445      	add	r5, r8
 8000706:	9503      	str	r5, [sp, #12]
 8000708:	9b02      	ldr	r3, [sp, #8]
 800070a:	043f      	lsls	r7, r7, #16
 800070c:	445b      	add	r3, fp
 800070e:	001e      	movs	r6, r3
 8000710:	4283      	cmp	r3, r0
 8000712:	4180      	sbcs	r0, r0
 8000714:	0423      	lsls	r3, r4, #16
 8000716:	4698      	mov	r8, r3
 8000718:	9b05      	ldr	r3, [sp, #20]
 800071a:	0c3f      	lsrs	r7, r7, #16
 800071c:	4447      	add	r7, r8
 800071e:	4698      	mov	r8, r3
 8000720:	1876      	adds	r6, r6, r1
 8000722:	428e      	cmp	r6, r1
 8000724:	4189      	sbcs	r1, r1
 8000726:	4447      	add	r7, r8
 8000728:	4240      	negs	r0, r0
 800072a:	183d      	adds	r5, r7, r0
 800072c:	46a8      	mov	r8, r5
 800072e:	4693      	mov	fp, r2
 8000730:	4249      	negs	r1, r1
 8000732:	468a      	mov	sl, r1
 8000734:	44c3      	add	fp, r8
 8000736:	429f      	cmp	r7, r3
 8000738:	41bf      	sbcs	r7, r7
 800073a:	4580      	cmp	r8, r0
 800073c:	4180      	sbcs	r0, r0
 800073e:	9b03      	ldr	r3, [sp, #12]
 8000740:	44da      	add	sl, fp
 8000742:	4698      	mov	r8, r3
 8000744:	4653      	mov	r3, sl
 8000746:	4240      	negs	r0, r0
 8000748:	427f      	negs	r7, r7
 800074a:	4307      	orrs	r7, r0
 800074c:	0c24      	lsrs	r4, r4, #16
 800074e:	4593      	cmp	fp, r2
 8000750:	4192      	sbcs	r2, r2
 8000752:	458a      	cmp	sl, r1
 8000754:	4189      	sbcs	r1, r1
 8000756:	193f      	adds	r7, r7, r4
 8000758:	0ddc      	lsrs	r4, r3, #23
 800075a:	9b04      	ldr	r3, [sp, #16]
 800075c:	0275      	lsls	r5, r6, #9
 800075e:	431d      	orrs	r5, r3
 8000760:	1e68      	subs	r0, r5, #1
 8000762:	4185      	sbcs	r5, r0
 8000764:	4653      	mov	r3, sl
 8000766:	4252      	negs	r2, r2
 8000768:	4249      	negs	r1, r1
 800076a:	430a      	orrs	r2, r1
 800076c:	18bf      	adds	r7, r7, r2
 800076e:	4447      	add	r7, r8
 8000770:	0df6      	lsrs	r6, r6, #23
 8000772:	027f      	lsls	r7, r7, #9
 8000774:	4335      	orrs	r5, r6
 8000776:	025a      	lsls	r2, r3, #9
 8000778:	433c      	orrs	r4, r7
 800077a:	4315      	orrs	r5, r2
 800077c:	01fb      	lsls	r3, r7, #7
 800077e:	d400      	bmi.n	8000782 <__aeabi_dmul+0x2fe>
 8000780:	e0c1      	b.n	8000906 <__aeabi_dmul+0x482>
 8000782:	2101      	movs	r1, #1
 8000784:	086a      	lsrs	r2, r5, #1
 8000786:	400d      	ands	r5, r1
 8000788:	4315      	orrs	r5, r2
 800078a:	07e2      	lsls	r2, r4, #31
 800078c:	4315      	orrs	r5, r2
 800078e:	0864      	lsrs	r4, r4, #1
 8000790:	4926      	ldr	r1, [pc, #152]	; (800082c <__aeabi_dmul+0x3a8>)
 8000792:	4461      	add	r1, ip
 8000794:	2900      	cmp	r1, #0
 8000796:	dd56      	ble.n	8000846 <__aeabi_dmul+0x3c2>
 8000798:	076b      	lsls	r3, r5, #29
 800079a:	d009      	beq.n	80007b0 <__aeabi_dmul+0x32c>
 800079c:	220f      	movs	r2, #15
 800079e:	402a      	ands	r2, r5
 80007a0:	2a04      	cmp	r2, #4
 80007a2:	d005      	beq.n	80007b0 <__aeabi_dmul+0x32c>
 80007a4:	1d2a      	adds	r2, r5, #4
 80007a6:	42aa      	cmp	r2, r5
 80007a8:	41ad      	sbcs	r5, r5
 80007aa:	426d      	negs	r5, r5
 80007ac:	1964      	adds	r4, r4, r5
 80007ae:	0015      	movs	r5, r2
 80007b0:	01e3      	lsls	r3, r4, #7
 80007b2:	d504      	bpl.n	80007be <__aeabi_dmul+0x33a>
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <__aeabi_dmul+0x3ac>)
 80007b8:	00c9      	lsls	r1, r1, #3
 80007ba:	4014      	ands	r4, r2
 80007bc:	4461      	add	r1, ip
 80007be:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <__aeabi_dmul+0x3b0>)
 80007c0:	4291      	cmp	r1, r2
 80007c2:	dd00      	ble.n	80007c6 <__aeabi_dmul+0x342>
 80007c4:	e724      	b.n	8000610 <__aeabi_dmul+0x18c>
 80007c6:	0762      	lsls	r2, r4, #29
 80007c8:	08ed      	lsrs	r5, r5, #3
 80007ca:	0264      	lsls	r4, r4, #9
 80007cc:	0549      	lsls	r1, r1, #21
 80007ce:	4315      	orrs	r5, r2
 80007d0:	0b24      	lsrs	r4, r4, #12
 80007d2:	0d4a      	lsrs	r2, r1, #21
 80007d4:	e6c6      	b.n	8000564 <__aeabi_dmul+0xe0>
 80007d6:	9701      	str	r7, [sp, #4]
 80007d8:	e6b8      	b.n	800054c <__aeabi_dmul+0xc8>
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <__aeabi_dmul+0x398>)
 80007dc:	2003      	movs	r0, #3
 80007de:	4694      	mov	ip, r2
 80007e0:	4463      	add	r3, ip
 80007e2:	464a      	mov	r2, r9
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2303      	movs	r3, #3
 80007e8:	431a      	orrs	r2, r3
 80007ea:	4691      	mov	r9, r2
 80007ec:	4652      	mov	r2, sl
 80007ee:	e68a      	b.n	8000506 <__aeabi_dmul+0x82>
 80007f0:	4649      	mov	r1, r9
 80007f2:	2301      	movs	r3, #1
 80007f4:	4319      	orrs	r1, r3
 80007f6:	4689      	mov	r9, r1
 80007f8:	2600      	movs	r6, #0
 80007fa:	2001      	movs	r0, #1
 80007fc:	e683      	b.n	8000506 <__aeabi_dmul+0x82>
 80007fe:	220c      	movs	r2, #12
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2303      	movs	r3, #3
 8000804:	0005      	movs	r5, r0
 8000806:	4691      	mov	r9, r2
 8000808:	469b      	mov	fp, r3
 800080a:	e65e      	b.n	80004ca <__aeabi_dmul+0x46>
 800080c:	2304      	movs	r3, #4
 800080e:	4699      	mov	r9, r3
 8000810:	2300      	movs	r3, #0
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	2400      	movs	r4, #0
 8000818:	469b      	mov	fp, r3
 800081a:	e656      	b.n	80004ca <__aeabi_dmul+0x46>
 800081c:	000007ff 	.word	0x000007ff
 8000820:	fffffc01 	.word	0xfffffc01
 8000824:	08003178 	.word	0x08003178
 8000828:	fffffc0d 	.word	0xfffffc0d
 800082c:	000003ff 	.word	0x000003ff
 8000830:	feffffff 	.word	0xfeffffff
 8000834:	000007fe 	.word	0x000007fe
 8000838:	2300      	movs	r3, #0
 800083a:	2480      	movs	r4, #128	; 0x80
 800083c:	2500      	movs	r5, #0
 800083e:	4a44      	ldr	r2, [pc, #272]	; (8000950 <__aeabi_dmul+0x4cc>)
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	0324      	lsls	r4, r4, #12
 8000844:	e68e      	b.n	8000564 <__aeabi_dmul+0xe0>
 8000846:	2001      	movs	r0, #1
 8000848:	1a40      	subs	r0, r0, r1
 800084a:	2838      	cmp	r0, #56	; 0x38
 800084c:	dd00      	ble.n	8000850 <__aeabi_dmul+0x3cc>
 800084e:	e686      	b.n	800055e <__aeabi_dmul+0xda>
 8000850:	281f      	cmp	r0, #31
 8000852:	dd5b      	ble.n	800090c <__aeabi_dmul+0x488>
 8000854:	221f      	movs	r2, #31
 8000856:	0023      	movs	r3, r4
 8000858:	4252      	negs	r2, r2
 800085a:	1a51      	subs	r1, r2, r1
 800085c:	40cb      	lsrs	r3, r1
 800085e:	0019      	movs	r1, r3
 8000860:	2820      	cmp	r0, #32
 8000862:	d003      	beq.n	800086c <__aeabi_dmul+0x3e8>
 8000864:	4a3b      	ldr	r2, [pc, #236]	; (8000954 <__aeabi_dmul+0x4d0>)
 8000866:	4462      	add	r2, ip
 8000868:	4094      	lsls	r4, r2
 800086a:	4325      	orrs	r5, r4
 800086c:	1e6a      	subs	r2, r5, #1
 800086e:	4195      	sbcs	r5, r2
 8000870:	002a      	movs	r2, r5
 8000872:	430a      	orrs	r2, r1
 8000874:	2107      	movs	r1, #7
 8000876:	000d      	movs	r5, r1
 8000878:	2400      	movs	r4, #0
 800087a:	4015      	ands	r5, r2
 800087c:	4211      	tst	r1, r2
 800087e:	d05b      	beq.n	8000938 <__aeabi_dmul+0x4b4>
 8000880:	210f      	movs	r1, #15
 8000882:	2400      	movs	r4, #0
 8000884:	4011      	ands	r1, r2
 8000886:	2904      	cmp	r1, #4
 8000888:	d053      	beq.n	8000932 <__aeabi_dmul+0x4ae>
 800088a:	1d11      	adds	r1, r2, #4
 800088c:	4291      	cmp	r1, r2
 800088e:	4192      	sbcs	r2, r2
 8000890:	4252      	negs	r2, r2
 8000892:	18a4      	adds	r4, r4, r2
 8000894:	000a      	movs	r2, r1
 8000896:	0223      	lsls	r3, r4, #8
 8000898:	d54b      	bpl.n	8000932 <__aeabi_dmul+0x4ae>
 800089a:	2201      	movs	r2, #1
 800089c:	2400      	movs	r4, #0
 800089e:	2500      	movs	r5, #0
 80008a0:	e660      	b.n	8000564 <__aeabi_dmul+0xe0>
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	031b      	lsls	r3, r3, #12
 80008a6:	421c      	tst	r4, r3
 80008a8:	d009      	beq.n	80008be <__aeabi_dmul+0x43a>
 80008aa:	421e      	tst	r6, r3
 80008ac:	d107      	bne.n	80008be <__aeabi_dmul+0x43a>
 80008ae:	4333      	orrs	r3, r6
 80008b0:	031c      	lsls	r4, r3, #12
 80008b2:	4643      	mov	r3, r8
 80008b4:	0015      	movs	r5, r2
 80008b6:	0b24      	lsrs	r4, r4, #12
 80008b8:	4a25      	ldr	r2, [pc, #148]	; (8000950 <__aeabi_dmul+0x4cc>)
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	e652      	b.n	8000564 <__aeabi_dmul+0xe0>
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	0312      	lsls	r2, r2, #12
 80008c2:	4314      	orrs	r4, r2
 80008c4:	0324      	lsls	r4, r4, #12
 80008c6:	4a22      	ldr	r2, [pc, #136]	; (8000950 <__aeabi_dmul+0x4cc>)
 80008c8:	0b24      	lsrs	r4, r4, #12
 80008ca:	9701      	str	r7, [sp, #4]
 80008cc:	e64a      	b.n	8000564 <__aeabi_dmul+0xe0>
 80008ce:	f000 fc7b 	bl	80011c8 <__clzsi2>
 80008d2:	0003      	movs	r3, r0
 80008d4:	001a      	movs	r2, r3
 80008d6:	3215      	adds	r2, #21
 80008d8:	3020      	adds	r0, #32
 80008da:	2a1c      	cmp	r2, #28
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_dmul+0x45c>
 80008de:	e684      	b.n	80005ea <__aeabi_dmul+0x166>
 80008e0:	4656      	mov	r6, sl
 80008e2:	3b08      	subs	r3, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	409e      	lsls	r6, r3
 80008e8:	e689      	b.n	80005fe <__aeabi_dmul+0x17a>
 80008ea:	f000 fc6d 	bl	80011c8 <__clzsi2>
 80008ee:	0001      	movs	r1, r0
 80008f0:	0002      	movs	r2, r0
 80008f2:	3115      	adds	r1, #21
 80008f4:	3220      	adds	r2, #32
 80008f6:	291c      	cmp	r1, #28
 80008f8:	dc00      	bgt.n	80008fc <__aeabi_dmul+0x478>
 80008fa:	e64e      	b.n	800059a <__aeabi_dmul+0x116>
 80008fc:	0034      	movs	r4, r6
 80008fe:	3808      	subs	r0, #8
 8000900:	2500      	movs	r5, #0
 8000902:	4084      	lsls	r4, r0
 8000904:	e653      	b.n	80005ae <__aeabi_dmul+0x12a>
 8000906:	9b00      	ldr	r3, [sp, #0]
 8000908:	469c      	mov	ip, r3
 800090a:	e741      	b.n	8000790 <__aeabi_dmul+0x30c>
 800090c:	4912      	ldr	r1, [pc, #72]	; (8000958 <__aeabi_dmul+0x4d4>)
 800090e:	0022      	movs	r2, r4
 8000910:	4461      	add	r1, ip
 8000912:	002e      	movs	r6, r5
 8000914:	408d      	lsls	r5, r1
 8000916:	408a      	lsls	r2, r1
 8000918:	40c6      	lsrs	r6, r0
 800091a:	1e69      	subs	r1, r5, #1
 800091c:	418d      	sbcs	r5, r1
 800091e:	4332      	orrs	r2, r6
 8000920:	432a      	orrs	r2, r5
 8000922:	40c4      	lsrs	r4, r0
 8000924:	0753      	lsls	r3, r2, #29
 8000926:	d0b6      	beq.n	8000896 <__aeabi_dmul+0x412>
 8000928:	210f      	movs	r1, #15
 800092a:	4011      	ands	r1, r2
 800092c:	2904      	cmp	r1, #4
 800092e:	d1ac      	bne.n	800088a <__aeabi_dmul+0x406>
 8000930:	e7b1      	b.n	8000896 <__aeabi_dmul+0x412>
 8000932:	0765      	lsls	r5, r4, #29
 8000934:	0264      	lsls	r4, r4, #9
 8000936:	0b24      	lsrs	r4, r4, #12
 8000938:	08d2      	lsrs	r2, r2, #3
 800093a:	4315      	orrs	r5, r2
 800093c:	2200      	movs	r2, #0
 800093e:	e611      	b.n	8000564 <__aeabi_dmul+0xe0>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	0312      	lsls	r2, r2, #12
 8000944:	4314      	orrs	r4, r2
 8000946:	0324      	lsls	r4, r4, #12
 8000948:	4a01      	ldr	r2, [pc, #4]	; (8000950 <__aeabi_dmul+0x4cc>)
 800094a:	0b24      	lsrs	r4, r4, #12
 800094c:	e60a      	b.n	8000564 <__aeabi_dmul+0xe0>
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	000007ff 	.word	0x000007ff
 8000954:	0000043e 	.word	0x0000043e
 8000958:	0000041e 	.word	0x0000041e

0800095c <__aeabi_dsub>:
 800095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095e:	4657      	mov	r7, sl
 8000960:	464e      	mov	r6, r9
 8000962:	4645      	mov	r5, r8
 8000964:	46de      	mov	lr, fp
 8000966:	0004      	movs	r4, r0
 8000968:	b5e0      	push	{r5, r6, r7, lr}
 800096a:	001f      	movs	r7, r3
 800096c:	0010      	movs	r0, r2
 800096e:	030b      	lsls	r3, r1, #12
 8000970:	0f62      	lsrs	r2, r4, #29
 8000972:	004e      	lsls	r6, r1, #1
 8000974:	0fcd      	lsrs	r5, r1, #31
 8000976:	0a5b      	lsrs	r3, r3, #9
 8000978:	0339      	lsls	r1, r7, #12
 800097a:	4313      	orrs	r3, r2
 800097c:	0a49      	lsrs	r1, r1, #9
 800097e:	00e2      	lsls	r2, r4, #3
 8000980:	0f44      	lsrs	r4, r0, #29
 8000982:	4321      	orrs	r1, r4
 8000984:	4cc2      	ldr	r4, [pc, #776]	; (8000c90 <__aeabi_dsub+0x334>)
 8000986:	4691      	mov	r9, r2
 8000988:	4692      	mov	sl, r2
 800098a:	00c0      	lsls	r0, r0, #3
 800098c:	007a      	lsls	r2, r7, #1
 800098e:	4680      	mov	r8, r0
 8000990:	0d76      	lsrs	r6, r6, #21
 8000992:	0d52      	lsrs	r2, r2, #21
 8000994:	0fff      	lsrs	r7, r7, #31
 8000996:	42a2      	cmp	r2, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dsub+0x40>
 800099a:	e0b4      	b.n	8000b06 <__aeabi_dsub+0x1aa>
 800099c:	2401      	movs	r4, #1
 800099e:	4067      	eors	r7, r4
 80009a0:	46bb      	mov	fp, r7
 80009a2:	42bd      	cmp	r5, r7
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dsub+0x4c>
 80009a6:	e088      	b.n	8000aba <__aeabi_dsub+0x15e>
 80009a8:	1ab4      	subs	r4, r6, r2
 80009aa:	46a4      	mov	ip, r4
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	dc00      	bgt.n	80009b2 <__aeabi_dsub+0x56>
 80009b0:	e0b2      	b.n	8000b18 <__aeabi_dsub+0x1bc>
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dsub+0x5c>
 80009b6:	e0c5      	b.n	8000b44 <__aeabi_dsub+0x1e8>
 80009b8:	4ab5      	ldr	r2, [pc, #724]	; (8000c90 <__aeabi_dsub+0x334>)
 80009ba:	4296      	cmp	r6, r2
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dsub+0x64>
 80009be:	e28b      	b.n	8000ed8 <__aeabi_dsub+0x57c>
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	0412      	lsls	r2, r2, #16
 80009c4:	4311      	orrs	r1, r2
 80009c6:	4662      	mov	r2, ip
 80009c8:	2a38      	cmp	r2, #56	; 0x38
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dsub+0x72>
 80009cc:	e1a1      	b.n	8000d12 <__aeabi_dsub+0x3b6>
 80009ce:	2a1f      	cmp	r2, #31
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_dsub+0x78>
 80009d2:	e216      	b.n	8000e02 <__aeabi_dsub+0x4a6>
 80009d4:	2720      	movs	r7, #32
 80009d6:	000c      	movs	r4, r1
 80009d8:	1abf      	subs	r7, r7, r2
 80009da:	40bc      	lsls	r4, r7
 80009dc:	0002      	movs	r2, r0
 80009de:	46a0      	mov	r8, r4
 80009e0:	4664      	mov	r4, ip
 80009e2:	40b8      	lsls	r0, r7
 80009e4:	40e2      	lsrs	r2, r4
 80009e6:	4644      	mov	r4, r8
 80009e8:	4314      	orrs	r4, r2
 80009ea:	0002      	movs	r2, r0
 80009ec:	1e50      	subs	r0, r2, #1
 80009ee:	4182      	sbcs	r2, r0
 80009f0:	4660      	mov	r0, ip
 80009f2:	40c1      	lsrs	r1, r0
 80009f4:	4322      	orrs	r2, r4
 80009f6:	1a5b      	subs	r3, r3, r1
 80009f8:	4649      	mov	r1, r9
 80009fa:	1a8c      	subs	r4, r1, r2
 80009fc:	45a1      	cmp	r9, r4
 80009fe:	4192      	sbcs	r2, r2
 8000a00:	4252      	negs	r2, r2
 8000a02:	1a9b      	subs	r3, r3, r2
 8000a04:	4698      	mov	r8, r3
 8000a06:	4643      	mov	r3, r8
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	d400      	bmi.n	8000a0e <__aeabi_dsub+0xb2>
 8000a0c:	e117      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	025b      	lsls	r3, r3, #9
 8000a12:	0a5b      	lsrs	r3, r3, #9
 8000a14:	4698      	mov	r8, r3
 8000a16:	4643      	mov	r3, r8
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dsub+0xc2>
 8000a1c:	e16c      	b.n	8000cf8 <__aeabi_dsub+0x39c>
 8000a1e:	4640      	mov	r0, r8
 8000a20:	f000 fbd2 	bl	80011c8 <__clzsi2>
 8000a24:	0002      	movs	r2, r0
 8000a26:	3a08      	subs	r2, #8
 8000a28:	2120      	movs	r1, #32
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	4643      	mov	r3, r8
 8000a2e:	1a89      	subs	r1, r1, r2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	40c8      	lsrs	r0, r1
 8000a34:	4094      	lsls	r4, r2
 8000a36:	4303      	orrs	r3, r0
 8000a38:	4296      	cmp	r6, r2
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dsub+0xe2>
 8000a3c:	e157      	b.n	8000cee <__aeabi_dsub+0x392>
 8000a3e:	1b96      	subs	r6, r2, r6
 8000a40:	1c71      	adds	r1, r6, #1
 8000a42:	291f      	cmp	r1, #31
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_dsub+0xec>
 8000a46:	e1cb      	b.n	8000de0 <__aeabi_dsub+0x484>
 8000a48:	2220      	movs	r2, #32
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	0026      	movs	r6, r4
 8000a4e:	1a52      	subs	r2, r2, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	4090      	lsls	r0, r2
 8000a54:	40ce      	lsrs	r6, r1
 8000a56:	40cb      	lsrs	r3, r1
 8000a58:	1e62      	subs	r2, r4, #1
 8000a5a:	4194      	sbcs	r4, r2
 8000a5c:	4330      	orrs	r0, r6
 8000a5e:	4698      	mov	r8, r3
 8000a60:	2600      	movs	r6, #0
 8000a62:	4304      	orrs	r4, r0
 8000a64:	0763      	lsls	r3, r4, #29
 8000a66:	d009      	beq.n	8000a7c <__aeabi_dsub+0x120>
 8000a68:	230f      	movs	r3, #15
 8000a6a:	4023      	ands	r3, r4
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d005      	beq.n	8000a7c <__aeabi_dsub+0x120>
 8000a70:	1d23      	adds	r3, r4, #4
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	41a4      	sbcs	r4, r4
 8000a76:	4264      	negs	r4, r4
 8000a78:	44a0      	add	r8, r4
 8000a7a:	001c      	movs	r4, r3
 8000a7c:	4643      	mov	r3, r8
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	d400      	bmi.n	8000a84 <__aeabi_dsub+0x128>
 8000a82:	e0df      	b.n	8000c44 <__aeabi_dsub+0x2e8>
 8000a84:	4b82      	ldr	r3, [pc, #520]	; (8000c90 <__aeabi_dsub+0x334>)
 8000a86:	3601      	adds	r6, #1
 8000a88:	429e      	cmp	r6, r3
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dsub+0x132>
 8000a8c:	e0fb      	b.n	8000c86 <__aeabi_dsub+0x32a>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	4b80      	ldr	r3, [pc, #512]	; (8000c94 <__aeabi_dsub+0x338>)
 8000a92:	08e4      	lsrs	r4, r4, #3
 8000a94:	401a      	ands	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	0571      	lsls	r1, r6, #21
 8000a9a:	0752      	lsls	r2, r2, #29
 8000a9c:	025b      	lsls	r3, r3, #9
 8000a9e:	4322      	orrs	r2, r4
 8000aa0:	0b1b      	lsrs	r3, r3, #12
 8000aa2:	0d49      	lsrs	r1, r1, #21
 8000aa4:	0509      	lsls	r1, r1, #20
 8000aa6:	07ed      	lsls	r5, r5, #31
 8000aa8:	4319      	orrs	r1, r3
 8000aaa:	4329      	orrs	r1, r5
 8000aac:	0010      	movs	r0, r2
 8000aae:	bcf0      	pop	{r4, r5, r6, r7}
 8000ab0:	46bb      	mov	fp, r7
 8000ab2:	46b2      	mov	sl, r6
 8000ab4:	46a9      	mov	r9, r5
 8000ab6:	46a0      	mov	r8, r4
 8000ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aba:	1ab4      	subs	r4, r6, r2
 8000abc:	46a4      	mov	ip, r4
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	dd58      	ble.n	8000b74 <__aeabi_dsub+0x218>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dsub+0x16c>
 8000ac6:	e09e      	b.n	8000c06 <__aeabi_dsub+0x2aa>
 8000ac8:	4a71      	ldr	r2, [pc, #452]	; (8000c90 <__aeabi_dsub+0x334>)
 8000aca:	4296      	cmp	r6, r2
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dsub+0x174>
 8000ace:	e13b      	b.n	8000d48 <__aeabi_dsub+0x3ec>
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0412      	lsls	r2, r2, #16
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	2a38      	cmp	r2, #56	; 0x38
 8000ada:	dd00      	ble.n	8000ade <__aeabi_dsub+0x182>
 8000adc:	e0c1      	b.n	8000c62 <__aeabi_dsub+0x306>
 8000ade:	2a1f      	cmp	r2, #31
 8000ae0:	dc00      	bgt.n	8000ae4 <__aeabi_dsub+0x188>
 8000ae2:	e1bb      	b.n	8000e5c <__aeabi_dsub+0x500>
 8000ae4:	000c      	movs	r4, r1
 8000ae6:	3a20      	subs	r2, #32
 8000ae8:	40d4      	lsrs	r4, r2
 8000aea:	0022      	movs	r2, r4
 8000aec:	4664      	mov	r4, ip
 8000aee:	2c20      	cmp	r4, #32
 8000af0:	d004      	beq.n	8000afc <__aeabi_dsub+0x1a0>
 8000af2:	2740      	movs	r7, #64	; 0x40
 8000af4:	1b3f      	subs	r7, r7, r4
 8000af6:	40b9      	lsls	r1, r7
 8000af8:	4308      	orrs	r0, r1
 8000afa:	4680      	mov	r8, r0
 8000afc:	4644      	mov	r4, r8
 8000afe:	1e61      	subs	r1, r4, #1
 8000b00:	418c      	sbcs	r4, r1
 8000b02:	4314      	orrs	r4, r2
 8000b04:	e0b1      	b.n	8000c6a <__aeabi_dsub+0x30e>
 8000b06:	000c      	movs	r4, r1
 8000b08:	4304      	orrs	r4, r0
 8000b0a:	d02a      	beq.n	8000b62 <__aeabi_dsub+0x206>
 8000b0c:	46bb      	mov	fp, r7
 8000b0e:	42bd      	cmp	r5, r7
 8000b10:	d02d      	beq.n	8000b6e <__aeabi_dsub+0x212>
 8000b12:	4c61      	ldr	r4, [pc, #388]	; (8000c98 <__aeabi_dsub+0x33c>)
 8000b14:	46a4      	mov	ip, r4
 8000b16:	44b4      	add	ip, r6
 8000b18:	4664      	mov	r4, ip
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d05c      	beq.n	8000bd8 <__aeabi_dsub+0x27c>
 8000b1e:	1b94      	subs	r4, r2, r6
 8000b20:	46a4      	mov	ip, r4
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d000      	beq.n	8000b28 <__aeabi_dsub+0x1cc>
 8000b26:	e115      	b.n	8000d54 <__aeabi_dsub+0x3f8>
 8000b28:	464d      	mov	r5, r9
 8000b2a:	431d      	orrs	r5, r3
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dsub+0x1d4>
 8000b2e:	e1c3      	b.n	8000eb8 <__aeabi_dsub+0x55c>
 8000b30:	1e65      	subs	r5, r4, #1
 8000b32:	2c01      	cmp	r4, #1
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dsub+0x1dc>
 8000b36:	e20c      	b.n	8000f52 <__aeabi_dsub+0x5f6>
 8000b38:	4e55      	ldr	r6, [pc, #340]	; (8000c90 <__aeabi_dsub+0x334>)
 8000b3a:	42b4      	cmp	r4, r6
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dsub+0x1e4>
 8000b3e:	e1f8      	b.n	8000f32 <__aeabi_dsub+0x5d6>
 8000b40:	46ac      	mov	ip, r5
 8000b42:	e10e      	b.n	8000d62 <__aeabi_dsub+0x406>
 8000b44:	000a      	movs	r2, r1
 8000b46:	4302      	orrs	r2, r0
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dsub+0x1f0>
 8000b4a:	e136      	b.n	8000dba <__aeabi_dsub+0x45e>
 8000b4c:	0022      	movs	r2, r4
 8000b4e:	3a01      	subs	r2, #1
 8000b50:	2c01      	cmp	r4, #1
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dsub+0x1fa>
 8000b54:	e1c6      	b.n	8000ee4 <__aeabi_dsub+0x588>
 8000b56:	4c4e      	ldr	r4, [pc, #312]	; (8000c90 <__aeabi_dsub+0x334>)
 8000b58:	45a4      	cmp	ip, r4
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dsub+0x202>
 8000b5c:	e0f4      	b.n	8000d48 <__aeabi_dsub+0x3ec>
 8000b5e:	4694      	mov	ip, r2
 8000b60:	e731      	b.n	80009c6 <__aeabi_dsub+0x6a>
 8000b62:	2401      	movs	r4, #1
 8000b64:	4067      	eors	r7, r4
 8000b66:	46bb      	mov	fp, r7
 8000b68:	42bd      	cmp	r5, r7
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_dsub+0x212>
 8000b6c:	e71c      	b.n	80009a8 <__aeabi_dsub+0x4c>
 8000b6e:	4c4a      	ldr	r4, [pc, #296]	; (8000c98 <__aeabi_dsub+0x33c>)
 8000b70:	46a4      	mov	ip, r4
 8000b72:	44b4      	add	ip, r6
 8000b74:	4664      	mov	r4, ip
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dsub+0x220>
 8000b7a:	e0cf      	b.n	8000d1c <__aeabi_dsub+0x3c0>
 8000b7c:	1b94      	subs	r4, r2, r6
 8000b7e:	46a4      	mov	ip, r4
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dsub+0x22a>
 8000b84:	e15c      	b.n	8000e40 <__aeabi_dsub+0x4e4>
 8000b86:	4e42      	ldr	r6, [pc, #264]	; (8000c90 <__aeabi_dsub+0x334>)
 8000b88:	42b2      	cmp	r2, r6
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dsub+0x232>
 8000b8c:	e1ec      	b.n	8000f68 <__aeabi_dsub+0x60c>
 8000b8e:	2680      	movs	r6, #128	; 0x80
 8000b90:	0436      	lsls	r6, r6, #16
 8000b92:	4333      	orrs	r3, r6
 8000b94:	4664      	mov	r4, ip
 8000b96:	2c38      	cmp	r4, #56	; 0x38
 8000b98:	dd00      	ble.n	8000b9c <__aeabi_dsub+0x240>
 8000b9a:	e1b3      	b.n	8000f04 <__aeabi_dsub+0x5a8>
 8000b9c:	2c1f      	cmp	r4, #31
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dsub+0x246>
 8000ba0:	e238      	b.n	8001014 <__aeabi_dsub+0x6b8>
 8000ba2:	2620      	movs	r6, #32
 8000ba4:	1b36      	subs	r6, r6, r4
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	40b4      	lsls	r4, r6
 8000baa:	464f      	mov	r7, r9
 8000bac:	46a0      	mov	r8, r4
 8000bae:	4664      	mov	r4, ip
 8000bb0:	40e7      	lsrs	r7, r4
 8000bb2:	4644      	mov	r4, r8
 8000bb4:	433c      	orrs	r4, r7
 8000bb6:	464f      	mov	r7, r9
 8000bb8:	40b7      	lsls	r7, r6
 8000bba:	003e      	movs	r6, r7
 8000bbc:	1e77      	subs	r7, r6, #1
 8000bbe:	41be      	sbcs	r6, r7
 8000bc0:	4334      	orrs	r4, r6
 8000bc2:	4666      	mov	r6, ip
 8000bc4:	40f3      	lsrs	r3, r6
 8000bc6:	18c9      	adds	r1, r1, r3
 8000bc8:	1824      	adds	r4, r4, r0
 8000bca:	4284      	cmp	r4, r0
 8000bcc:	419b      	sbcs	r3, r3
 8000bce:	425b      	negs	r3, r3
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	0016      	movs	r6, r2
 8000bd4:	4488      	add	r8, r1
 8000bd6:	e04e      	b.n	8000c76 <__aeabi_dsub+0x31a>
 8000bd8:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <__aeabi_dsub+0x340>)
 8000bda:	1c74      	adds	r4, r6, #1
 8000bdc:	4214      	tst	r4, r2
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dsub+0x286>
 8000be0:	e0d6      	b.n	8000d90 <__aeabi_dsub+0x434>
 8000be2:	464a      	mov	r2, r9
 8000be4:	431a      	orrs	r2, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d000      	beq.n	8000bec <__aeabi_dsub+0x290>
 8000bea:	e15b      	b.n	8000ea4 <__aeabi_dsub+0x548>
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dsub+0x296>
 8000bf0:	e1a5      	b.n	8000f3e <__aeabi_dsub+0x5e2>
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	4302      	orrs	r2, r0
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_dsub+0x29e>
 8000bf8:	e1bb      	b.n	8000f72 <__aeabi_dsub+0x616>
 8000bfa:	464a      	mov	r2, r9
 8000bfc:	0759      	lsls	r1, r3, #29
 8000bfe:	08d2      	lsrs	r2, r2, #3
 8000c00:	430a      	orrs	r2, r1
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	e027      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000c06:	000a      	movs	r2, r1
 8000c08:	4302      	orrs	r2, r0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dsub+0x2b2>
 8000c0c:	e174      	b.n	8000ef8 <__aeabi_dsub+0x59c>
 8000c0e:	0022      	movs	r2, r4
 8000c10:	3a01      	subs	r2, #1
 8000c12:	2c01      	cmp	r4, #1
 8000c14:	d005      	beq.n	8000c22 <__aeabi_dsub+0x2c6>
 8000c16:	4c1e      	ldr	r4, [pc, #120]	; (8000c90 <__aeabi_dsub+0x334>)
 8000c18:	45a4      	cmp	ip, r4
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dsub+0x2c2>
 8000c1c:	e094      	b.n	8000d48 <__aeabi_dsub+0x3ec>
 8000c1e:	4694      	mov	ip, r2
 8000c20:	e759      	b.n	8000ad6 <__aeabi_dsub+0x17a>
 8000c22:	4448      	add	r0, r9
 8000c24:	4548      	cmp	r0, r9
 8000c26:	4192      	sbcs	r2, r2
 8000c28:	185b      	adds	r3, r3, r1
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	0004      	movs	r4, r0
 8000c2e:	4252      	negs	r2, r2
 8000c30:	4490      	add	r8, r2
 8000c32:	4643      	mov	r3, r8
 8000c34:	2602      	movs	r6, #2
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	d500      	bpl.n	8000c3c <__aeabi_dsub+0x2e0>
 8000c3a:	e0c4      	b.n	8000dc6 <__aeabi_dsub+0x46a>
 8000c3c:	3e01      	subs	r6, #1
 8000c3e:	0763      	lsls	r3, r4, #29
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dsub+0x2e8>
 8000c42:	e711      	b.n	8000a68 <__aeabi_dsub+0x10c>
 8000c44:	4643      	mov	r3, r8
 8000c46:	46b4      	mov	ip, r6
 8000c48:	0759      	lsls	r1, r3, #29
 8000c4a:	08e2      	lsrs	r2, r4, #3
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	08db      	lsrs	r3, r3, #3
 8000c50:	490f      	ldr	r1, [pc, #60]	; (8000c90 <__aeabi_dsub+0x334>)
 8000c52:	458c      	cmp	ip, r1
 8000c54:	d040      	beq.n	8000cd8 <__aeabi_dsub+0x37c>
 8000c56:	4661      	mov	r1, ip
 8000c58:	031b      	lsls	r3, r3, #12
 8000c5a:	0549      	lsls	r1, r1, #21
 8000c5c:	0b1b      	lsrs	r3, r3, #12
 8000c5e:	0d49      	lsrs	r1, r1, #21
 8000c60:	e720      	b.n	8000aa4 <__aeabi_dsub+0x148>
 8000c62:	4301      	orrs	r1, r0
 8000c64:	000c      	movs	r4, r1
 8000c66:	1e61      	subs	r1, r4, #1
 8000c68:	418c      	sbcs	r4, r1
 8000c6a:	444c      	add	r4, r9
 8000c6c:	454c      	cmp	r4, r9
 8000c6e:	4192      	sbcs	r2, r2
 8000c70:	4252      	negs	r2, r2
 8000c72:	4690      	mov	r8, r2
 8000c74:	4498      	add	r8, r3
 8000c76:	4643      	mov	r3, r8
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	d5e0      	bpl.n	8000c3e <__aeabi_dsub+0x2e2>
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__aeabi_dsub+0x334>)
 8000c7e:	3601      	adds	r6, #1
 8000c80:	429e      	cmp	r6, r3
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dsub+0x32a>
 8000c84:	e09f      	b.n	8000dc6 <__aeabi_dsub+0x46a>
 8000c86:	0031      	movs	r1, r6
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	e70a      	b.n	8000aa4 <__aeabi_dsub+0x148>
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	000007ff 	.word	0x000007ff
 8000c94:	ff7fffff 	.word	0xff7fffff
 8000c98:	fffff801 	.word	0xfffff801
 8000c9c:	000007fe 	.word	0x000007fe
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dsub+0x34a>
 8000ca4:	e160      	b.n	8000f68 <__aeabi_dsub+0x60c>
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	4302      	orrs	r2, r0
 8000caa:	d04d      	beq.n	8000d48 <__aeabi_dsub+0x3ec>
 8000cac:	464a      	mov	r2, r9
 8000cae:	075c      	lsls	r4, r3, #29
 8000cb0:	08d2      	lsrs	r2, r2, #3
 8000cb2:	4322      	orrs	r2, r4
 8000cb4:	2480      	movs	r4, #128	; 0x80
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	0324      	lsls	r4, r4, #12
 8000cba:	4223      	tst	r3, r4
 8000cbc:	d007      	beq.n	8000cce <__aeabi_dsub+0x372>
 8000cbe:	08ce      	lsrs	r6, r1, #3
 8000cc0:	4226      	tst	r6, r4
 8000cc2:	d104      	bne.n	8000cce <__aeabi_dsub+0x372>
 8000cc4:	465d      	mov	r5, fp
 8000cc6:	0033      	movs	r3, r6
 8000cc8:	08c2      	lsrs	r2, r0, #3
 8000cca:	0749      	lsls	r1, r1, #29
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	0f51      	lsrs	r1, r2, #29
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	08d2      	lsrs	r2, r2, #3
 8000cd4:	0749      	lsls	r1, r1, #29
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	0011      	movs	r1, r2
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dsub+0x384>
 8000cde:	e1c8      	b.n	8001072 <__aeabi_dsub+0x716>
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	0309      	lsls	r1, r1, #12
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	031b      	lsls	r3, r3, #12
 8000ce8:	49d5      	ldr	r1, [pc, #852]	; (8001040 <__aeabi_dsub+0x6e4>)
 8000cea:	0b1b      	lsrs	r3, r3, #12
 8000cec:	e6da      	b.n	8000aa4 <__aeabi_dsub+0x148>
 8000cee:	49d5      	ldr	r1, [pc, #852]	; (8001044 <__aeabi_dsub+0x6e8>)
 8000cf0:	1ab6      	subs	r6, r6, r2
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	4698      	mov	r8, r3
 8000cf6:	e6b5      	b.n	8000a64 <__aeabi_dsub+0x108>
 8000cf8:	0020      	movs	r0, r4
 8000cfa:	f000 fa65 	bl	80011c8 <__clzsi2>
 8000cfe:	0002      	movs	r2, r0
 8000d00:	3218      	adds	r2, #24
 8000d02:	2a1f      	cmp	r2, #31
 8000d04:	dc00      	bgt.n	8000d08 <__aeabi_dsub+0x3ac>
 8000d06:	e68f      	b.n	8000a28 <__aeabi_dsub+0xcc>
 8000d08:	0023      	movs	r3, r4
 8000d0a:	3808      	subs	r0, #8
 8000d0c:	4083      	lsls	r3, r0
 8000d0e:	2400      	movs	r4, #0
 8000d10:	e692      	b.n	8000a38 <__aeabi_dsub+0xdc>
 8000d12:	4308      	orrs	r0, r1
 8000d14:	0002      	movs	r2, r0
 8000d16:	1e50      	subs	r0, r2, #1
 8000d18:	4182      	sbcs	r2, r0
 8000d1a:	e66d      	b.n	80009f8 <__aeabi_dsub+0x9c>
 8000d1c:	4cca      	ldr	r4, [pc, #808]	; (8001048 <__aeabi_dsub+0x6ec>)
 8000d1e:	1c72      	adds	r2, r6, #1
 8000d20:	4222      	tst	r2, r4
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dsub+0x3ca>
 8000d24:	e0ad      	b.n	8000e82 <__aeabi_dsub+0x526>
 8000d26:	464a      	mov	r2, r9
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d1b8      	bne.n	8000ca0 <__aeabi_dsub+0x344>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dsub+0x3d8>
 8000d32:	e158      	b.n	8000fe6 <__aeabi_dsub+0x68a>
 8000d34:	000a      	movs	r2, r1
 8000d36:	4302      	orrs	r2, r0
 8000d38:	d000      	beq.n	8000d3c <__aeabi_dsub+0x3e0>
 8000d3a:	e159      	b.n	8000ff0 <__aeabi_dsub+0x694>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	0759      	lsls	r1, r3, #29
 8000d40:	08d2      	lsrs	r2, r2, #3
 8000d42:	430a      	orrs	r2, r1
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	e786      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	0759      	lsls	r1, r3, #29
 8000d4c:	08d2      	lsrs	r2, r2, #3
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	e7c1      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000d54:	4dba      	ldr	r5, [pc, #744]	; (8001040 <__aeabi_dsub+0x6e4>)
 8000d56:	42aa      	cmp	r2, r5
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dsub+0x400>
 8000d5a:	e11e      	b.n	8000f9a <__aeabi_dsub+0x63e>
 8000d5c:	2580      	movs	r5, #128	; 0x80
 8000d5e:	042d      	lsls	r5, r5, #16
 8000d60:	432b      	orrs	r3, r5
 8000d62:	4664      	mov	r4, ip
 8000d64:	2c38      	cmp	r4, #56	; 0x38
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_dsub+0x4c8>
 8000d68:	2c1f      	cmp	r4, #31
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_dsub+0x412>
 8000d6c:	e0d0      	b.n	8000f10 <__aeabi_dsub+0x5b4>
 8000d6e:	2520      	movs	r5, #32
 8000d70:	4667      	mov	r7, ip
 8000d72:	1b2d      	subs	r5, r5, r4
 8000d74:	464e      	mov	r6, r9
 8000d76:	001c      	movs	r4, r3
 8000d78:	40fe      	lsrs	r6, r7
 8000d7a:	40ac      	lsls	r4, r5
 8000d7c:	4334      	orrs	r4, r6
 8000d7e:	464e      	mov	r6, r9
 8000d80:	40ae      	lsls	r6, r5
 8000d82:	0035      	movs	r5, r6
 8000d84:	40fb      	lsrs	r3, r7
 8000d86:	1e6e      	subs	r6, r5, #1
 8000d88:	41b5      	sbcs	r5, r6
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	432c      	orrs	r4, r5
 8000d8e:	e04e      	b.n	8000e2e <__aeabi_dsub+0x4d2>
 8000d90:	464a      	mov	r2, r9
 8000d92:	1a14      	subs	r4, r2, r0
 8000d94:	45a1      	cmp	r9, r4
 8000d96:	4192      	sbcs	r2, r2
 8000d98:	4252      	negs	r2, r2
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	1a5f      	subs	r7, r3, r1
 8000d9e:	003a      	movs	r2, r7
 8000da0:	4647      	mov	r7, r8
 8000da2:	1bd2      	subs	r2, r2, r7
 8000da4:	4690      	mov	r8, r2
 8000da6:	0212      	lsls	r2, r2, #8
 8000da8:	d500      	bpl.n	8000dac <__aeabi_dsub+0x450>
 8000daa:	e08b      	b.n	8000ec4 <__aeabi_dsub+0x568>
 8000dac:	4642      	mov	r2, r8
 8000dae:	4322      	orrs	r2, r4
 8000db0:	d000      	beq.n	8000db4 <__aeabi_dsub+0x458>
 8000db2:	e630      	b.n	8000a16 <__aeabi_dsub+0xba>
 8000db4:	2300      	movs	r3, #0
 8000db6:	2500      	movs	r5, #0
 8000db8:	e74d      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000dba:	464a      	mov	r2, r9
 8000dbc:	0759      	lsls	r1, r3, #29
 8000dbe:	08d2      	lsrs	r2, r2, #3
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	e744      	b.n	8000c50 <__aeabi_dsub+0x2f4>
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	4b9e      	ldr	r3, [pc, #632]	; (8001044 <__aeabi_dsub+0x6e8>)
 8000dca:	0861      	lsrs	r1, r4, #1
 8000dcc:	401a      	ands	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4014      	ands	r4, r2
 8000dd4:	430c      	orrs	r4, r1
 8000dd6:	07da      	lsls	r2, r3, #31
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	4698      	mov	r8, r3
 8000ddc:	4314      	orrs	r4, r2
 8000dde:	e641      	b.n	8000a64 <__aeabi_dsub+0x108>
 8000de0:	001a      	movs	r2, r3
 8000de2:	3e1f      	subs	r6, #31
 8000de4:	40f2      	lsrs	r2, r6
 8000de6:	0016      	movs	r6, r2
 8000de8:	2920      	cmp	r1, #32
 8000dea:	d003      	beq.n	8000df4 <__aeabi_dsub+0x498>
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	1a51      	subs	r1, r2, r1
 8000df0:	408b      	lsls	r3, r1
 8000df2:	431c      	orrs	r4, r3
 8000df4:	1e62      	subs	r2, r4, #1
 8000df6:	4194      	sbcs	r4, r2
 8000df8:	2300      	movs	r3, #0
 8000dfa:	4334      	orrs	r4, r6
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	2600      	movs	r6, #0
 8000e00:	e71d      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8000e02:	000c      	movs	r4, r1
 8000e04:	3a20      	subs	r2, #32
 8000e06:	40d4      	lsrs	r4, r2
 8000e08:	0022      	movs	r2, r4
 8000e0a:	4664      	mov	r4, ip
 8000e0c:	2c20      	cmp	r4, #32
 8000e0e:	d004      	beq.n	8000e1a <__aeabi_dsub+0x4be>
 8000e10:	2740      	movs	r7, #64	; 0x40
 8000e12:	1b3f      	subs	r7, r7, r4
 8000e14:	40b9      	lsls	r1, r7
 8000e16:	4308      	orrs	r0, r1
 8000e18:	4680      	mov	r8, r0
 8000e1a:	4644      	mov	r4, r8
 8000e1c:	1e61      	subs	r1, r4, #1
 8000e1e:	418c      	sbcs	r4, r1
 8000e20:	4322      	orrs	r2, r4
 8000e22:	e5e9      	b.n	80009f8 <__aeabi_dsub+0x9c>
 8000e24:	464c      	mov	r4, r9
 8000e26:	4323      	orrs	r3, r4
 8000e28:	001c      	movs	r4, r3
 8000e2a:	1e63      	subs	r3, r4, #1
 8000e2c:	419c      	sbcs	r4, r3
 8000e2e:	1b04      	subs	r4, r0, r4
 8000e30:	42a0      	cmp	r0, r4
 8000e32:	419b      	sbcs	r3, r3
 8000e34:	425b      	negs	r3, r3
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	4698      	mov	r8, r3
 8000e3a:	465d      	mov	r5, fp
 8000e3c:	0016      	movs	r6, r2
 8000e3e:	e5e2      	b.n	8000a06 <__aeabi_dsub+0xaa>
 8000e40:	464e      	mov	r6, r9
 8000e42:	431e      	orrs	r6, r3
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dsub+0x4ec>
 8000e46:	e0ae      	b.n	8000fa6 <__aeabi_dsub+0x64a>
 8000e48:	1e66      	subs	r6, r4, #1
 8000e4a:	2c01      	cmp	r4, #1
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dsub+0x4f4>
 8000e4e:	e0fd      	b.n	800104c <__aeabi_dsub+0x6f0>
 8000e50:	4f7b      	ldr	r7, [pc, #492]	; (8001040 <__aeabi_dsub+0x6e4>)
 8000e52:	42bc      	cmp	r4, r7
 8000e54:	d100      	bne.n	8000e58 <__aeabi_dsub+0x4fc>
 8000e56:	e107      	b.n	8001068 <__aeabi_dsub+0x70c>
 8000e58:	46b4      	mov	ip, r6
 8000e5a:	e69b      	b.n	8000b94 <__aeabi_dsub+0x238>
 8000e5c:	4664      	mov	r4, ip
 8000e5e:	2220      	movs	r2, #32
 8000e60:	1b12      	subs	r2, r2, r4
 8000e62:	000c      	movs	r4, r1
 8000e64:	4094      	lsls	r4, r2
 8000e66:	0007      	movs	r7, r0
 8000e68:	4090      	lsls	r0, r2
 8000e6a:	46a0      	mov	r8, r4
 8000e6c:	4664      	mov	r4, ip
 8000e6e:	1e42      	subs	r2, r0, #1
 8000e70:	4190      	sbcs	r0, r2
 8000e72:	4662      	mov	r2, ip
 8000e74:	40e7      	lsrs	r7, r4
 8000e76:	4644      	mov	r4, r8
 8000e78:	40d1      	lsrs	r1, r2
 8000e7a:	433c      	orrs	r4, r7
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	185b      	adds	r3, r3, r1
 8000e80:	e6f3      	b.n	8000c6a <__aeabi_dsub+0x30e>
 8000e82:	4c6f      	ldr	r4, [pc, #444]	; (8001040 <__aeabi_dsub+0x6e4>)
 8000e84:	42a2      	cmp	r2, r4
 8000e86:	d100      	bne.n	8000e8a <__aeabi_dsub+0x52e>
 8000e88:	e0d5      	b.n	8001036 <__aeabi_dsub+0x6da>
 8000e8a:	4448      	add	r0, r9
 8000e8c:	185b      	adds	r3, r3, r1
 8000e8e:	4548      	cmp	r0, r9
 8000e90:	4189      	sbcs	r1, r1
 8000e92:	4249      	negs	r1, r1
 8000e94:	185b      	adds	r3, r3, r1
 8000e96:	07dc      	lsls	r4, r3, #31
 8000e98:	0840      	lsrs	r0, r0, #1
 8000e9a:	085b      	lsrs	r3, r3, #1
 8000e9c:	4698      	mov	r8, r3
 8000e9e:	0016      	movs	r6, r2
 8000ea0:	4304      	orrs	r4, r0
 8000ea2:	e6cc      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_dsub+0x54e>
 8000ea8:	e082      	b.n	8000fb0 <__aeabi_dsub+0x654>
 8000eaa:	000a      	movs	r2, r1
 8000eac:	4302      	orrs	r2, r0
 8000eae:	d140      	bne.n	8000f32 <__aeabi_dsub+0x5d6>
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	031b      	lsls	r3, r3, #12
 8000eb6:	e713      	b.n	8000ce0 <__aeabi_dsub+0x384>
 8000eb8:	074b      	lsls	r3, r1, #29
 8000eba:	08c2      	lsrs	r2, r0, #3
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	465d      	mov	r5, fp
 8000ec0:	08cb      	lsrs	r3, r1, #3
 8000ec2:	e6c5      	b.n	8000c50 <__aeabi_dsub+0x2f4>
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	1a84      	subs	r4, r0, r2
 8000ec8:	42a0      	cmp	r0, r4
 8000eca:	4192      	sbcs	r2, r2
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	4252      	negs	r2, r2
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	4698      	mov	r8, r3
 8000ed4:	465d      	mov	r5, fp
 8000ed6:	e59e      	b.n	8000a16 <__aeabi_dsub+0xba>
 8000ed8:	464a      	mov	r2, r9
 8000eda:	0759      	lsls	r1, r3, #29
 8000edc:	08d2      	lsrs	r2, r2, #3
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	e6f9      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000ee4:	464a      	mov	r2, r9
 8000ee6:	1a14      	subs	r4, r2, r0
 8000ee8:	45a1      	cmp	r9, r4
 8000eea:	4192      	sbcs	r2, r2
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	4252      	negs	r2, r2
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	4698      	mov	r8, r3
 8000ef4:	2601      	movs	r6, #1
 8000ef6:	e586      	b.n	8000a06 <__aeabi_dsub+0xaa>
 8000ef8:	464a      	mov	r2, r9
 8000efa:	0759      	lsls	r1, r3, #29
 8000efc:	08d2      	lsrs	r2, r2, #3
 8000efe:	430a      	orrs	r2, r1
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	e6a5      	b.n	8000c50 <__aeabi_dsub+0x2f4>
 8000f04:	464c      	mov	r4, r9
 8000f06:	4323      	orrs	r3, r4
 8000f08:	001c      	movs	r4, r3
 8000f0a:	1e63      	subs	r3, r4, #1
 8000f0c:	419c      	sbcs	r4, r3
 8000f0e:	e65b      	b.n	8000bc8 <__aeabi_dsub+0x26c>
 8000f10:	4665      	mov	r5, ip
 8000f12:	001e      	movs	r6, r3
 8000f14:	3d20      	subs	r5, #32
 8000f16:	40ee      	lsrs	r6, r5
 8000f18:	2c20      	cmp	r4, #32
 8000f1a:	d005      	beq.n	8000f28 <__aeabi_dsub+0x5cc>
 8000f1c:	2540      	movs	r5, #64	; 0x40
 8000f1e:	1b2d      	subs	r5, r5, r4
 8000f20:	40ab      	lsls	r3, r5
 8000f22:	464c      	mov	r4, r9
 8000f24:	431c      	orrs	r4, r3
 8000f26:	46a2      	mov	sl, r4
 8000f28:	4654      	mov	r4, sl
 8000f2a:	1e63      	subs	r3, r4, #1
 8000f2c:	419c      	sbcs	r4, r3
 8000f2e:	4334      	orrs	r4, r6
 8000f30:	e77d      	b.n	8000e2e <__aeabi_dsub+0x4d2>
 8000f32:	074b      	lsls	r3, r1, #29
 8000f34:	08c2      	lsrs	r2, r0, #3
 8000f36:	431a      	orrs	r2, r3
 8000f38:	465d      	mov	r5, fp
 8000f3a:	08cb      	lsrs	r3, r1, #3
 8000f3c:	e6cc      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000f3e:	000a      	movs	r2, r1
 8000f40:	4302      	orrs	r2, r0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dsub+0x5ea>
 8000f44:	e736      	b.n	8000db4 <__aeabi_dsub+0x458>
 8000f46:	074b      	lsls	r3, r1, #29
 8000f48:	08c2      	lsrs	r2, r0, #3
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	465d      	mov	r5, fp
 8000f4e:	08cb      	lsrs	r3, r1, #3
 8000f50:	e681      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000f52:	464a      	mov	r2, r9
 8000f54:	1a84      	subs	r4, r0, r2
 8000f56:	42a0      	cmp	r0, r4
 8000f58:	4192      	sbcs	r2, r2
 8000f5a:	1acb      	subs	r3, r1, r3
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	4698      	mov	r8, r3
 8000f62:	465d      	mov	r5, fp
 8000f64:	2601      	movs	r6, #1
 8000f66:	e54e      	b.n	8000a06 <__aeabi_dsub+0xaa>
 8000f68:	074b      	lsls	r3, r1, #29
 8000f6a:	08c2      	lsrs	r2, r0, #3
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	08cb      	lsrs	r3, r1, #3
 8000f70:	e6b2      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000f72:	464a      	mov	r2, r9
 8000f74:	1a14      	subs	r4, r2, r0
 8000f76:	45a1      	cmp	r9, r4
 8000f78:	4192      	sbcs	r2, r2
 8000f7a:	1a5f      	subs	r7, r3, r1
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	1aba      	subs	r2, r7, r2
 8000f80:	4690      	mov	r8, r2
 8000f82:	0212      	lsls	r2, r2, #8
 8000f84:	d56b      	bpl.n	800105e <__aeabi_dsub+0x702>
 8000f86:	464a      	mov	r2, r9
 8000f88:	1a84      	subs	r4, r0, r2
 8000f8a:	42a0      	cmp	r0, r4
 8000f8c:	4192      	sbcs	r2, r2
 8000f8e:	1acb      	subs	r3, r1, r3
 8000f90:	4252      	negs	r2, r2
 8000f92:	1a9b      	subs	r3, r3, r2
 8000f94:	4698      	mov	r8, r3
 8000f96:	465d      	mov	r5, fp
 8000f98:	e564      	b.n	8000a64 <__aeabi_dsub+0x108>
 8000f9a:	074b      	lsls	r3, r1, #29
 8000f9c:	08c2      	lsrs	r2, r0, #3
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	465d      	mov	r5, fp
 8000fa2:	08cb      	lsrs	r3, r1, #3
 8000fa4:	e698      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000fa6:	074b      	lsls	r3, r1, #29
 8000fa8:	08c2      	lsrs	r2, r0, #3
 8000faa:	431a      	orrs	r2, r3
 8000fac:	08cb      	lsrs	r3, r1, #3
 8000fae:	e64f      	b.n	8000c50 <__aeabi_dsub+0x2f4>
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	4302      	orrs	r2, r0
 8000fb4:	d090      	beq.n	8000ed8 <__aeabi_dsub+0x57c>
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	075c      	lsls	r4, r3, #29
 8000fba:	08d2      	lsrs	r2, r2, #3
 8000fbc:	4314      	orrs	r4, r2
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	0312      	lsls	r2, r2, #12
 8000fc4:	4213      	tst	r3, r2
 8000fc6:	d008      	beq.n	8000fda <__aeabi_dsub+0x67e>
 8000fc8:	08ce      	lsrs	r6, r1, #3
 8000fca:	4216      	tst	r6, r2
 8000fcc:	d105      	bne.n	8000fda <__aeabi_dsub+0x67e>
 8000fce:	08c0      	lsrs	r0, r0, #3
 8000fd0:	0749      	lsls	r1, r1, #29
 8000fd2:	4308      	orrs	r0, r1
 8000fd4:	0004      	movs	r4, r0
 8000fd6:	465d      	mov	r5, fp
 8000fd8:	0033      	movs	r3, r6
 8000fda:	0f61      	lsrs	r1, r4, #29
 8000fdc:	00e2      	lsls	r2, r4, #3
 8000fde:	0749      	lsls	r1, r1, #29
 8000fe0:	08d2      	lsrs	r2, r2, #3
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	e678      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8000fe6:	074b      	lsls	r3, r1, #29
 8000fe8:	08c2      	lsrs	r2, r0, #3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	08cb      	lsrs	r3, r1, #3
 8000fee:	e632      	b.n	8000c56 <__aeabi_dsub+0x2fa>
 8000ff0:	4448      	add	r0, r9
 8000ff2:	185b      	adds	r3, r3, r1
 8000ff4:	4548      	cmp	r0, r9
 8000ff6:	4192      	sbcs	r2, r2
 8000ff8:	4698      	mov	r8, r3
 8000ffa:	4252      	negs	r2, r2
 8000ffc:	4490      	add	r8, r2
 8000ffe:	4643      	mov	r3, r8
 8001000:	0004      	movs	r4, r0
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	d400      	bmi.n	8001008 <__aeabi_dsub+0x6ac>
 8001006:	e61a      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8001008:	4642      	mov	r2, r8
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <__aeabi_dsub+0x6e8>)
 800100c:	2601      	movs	r6, #1
 800100e:	401a      	ands	r2, r3
 8001010:	4690      	mov	r8, r2
 8001012:	e614      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8001014:	4666      	mov	r6, ip
 8001016:	001f      	movs	r7, r3
 8001018:	3e20      	subs	r6, #32
 800101a:	40f7      	lsrs	r7, r6
 800101c:	2c20      	cmp	r4, #32
 800101e:	d005      	beq.n	800102c <__aeabi_dsub+0x6d0>
 8001020:	2640      	movs	r6, #64	; 0x40
 8001022:	1b36      	subs	r6, r6, r4
 8001024:	40b3      	lsls	r3, r6
 8001026:	464c      	mov	r4, r9
 8001028:	431c      	orrs	r4, r3
 800102a:	46a2      	mov	sl, r4
 800102c:	4654      	mov	r4, sl
 800102e:	1e63      	subs	r3, r4, #1
 8001030:	419c      	sbcs	r4, r3
 8001032:	433c      	orrs	r4, r7
 8001034:	e5c8      	b.n	8000bc8 <__aeabi_dsub+0x26c>
 8001036:	0011      	movs	r1, r2
 8001038:	2300      	movs	r3, #0
 800103a:	2200      	movs	r2, #0
 800103c:	e532      	b.n	8000aa4 <__aeabi_dsub+0x148>
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	000007ff 	.word	0x000007ff
 8001044:	ff7fffff 	.word	0xff7fffff
 8001048:	000007fe 	.word	0x000007fe
 800104c:	464a      	mov	r2, r9
 800104e:	1814      	adds	r4, r2, r0
 8001050:	4284      	cmp	r4, r0
 8001052:	4192      	sbcs	r2, r2
 8001054:	185b      	adds	r3, r3, r1
 8001056:	4698      	mov	r8, r3
 8001058:	4252      	negs	r2, r2
 800105a:	4490      	add	r8, r2
 800105c:	e5e9      	b.n	8000c32 <__aeabi_dsub+0x2d6>
 800105e:	4642      	mov	r2, r8
 8001060:	4322      	orrs	r2, r4
 8001062:	d100      	bne.n	8001066 <__aeabi_dsub+0x70a>
 8001064:	e6a6      	b.n	8000db4 <__aeabi_dsub+0x458>
 8001066:	e5ea      	b.n	8000c3e <__aeabi_dsub+0x2e2>
 8001068:	074b      	lsls	r3, r1, #29
 800106a:	08c2      	lsrs	r2, r0, #3
 800106c:	431a      	orrs	r2, r3
 800106e:	08cb      	lsrs	r3, r1, #3
 8001070:	e632      	b.n	8000cd8 <__aeabi_dsub+0x37c>
 8001072:	2200      	movs	r2, #0
 8001074:	4901      	ldr	r1, [pc, #4]	; (800107c <__aeabi_dsub+0x720>)
 8001076:	0013      	movs	r3, r2
 8001078:	e514      	b.n	8000aa4 <__aeabi_dsub+0x148>
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	000007ff 	.word	0x000007ff

08001080 <__aeabi_d2iz>:
 8001080:	000a      	movs	r2, r1
 8001082:	b530      	push	{r4, r5, lr}
 8001084:	4c13      	ldr	r4, [pc, #76]	; (80010d4 <__aeabi_d2iz+0x54>)
 8001086:	0053      	lsls	r3, r2, #1
 8001088:	0309      	lsls	r1, r1, #12
 800108a:	0005      	movs	r5, r0
 800108c:	0b09      	lsrs	r1, r1, #12
 800108e:	2000      	movs	r0, #0
 8001090:	0d5b      	lsrs	r3, r3, #21
 8001092:	0fd2      	lsrs	r2, r2, #31
 8001094:	42a3      	cmp	r3, r4
 8001096:	dd04      	ble.n	80010a2 <__aeabi_d2iz+0x22>
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <__aeabi_d2iz+0x58>)
 800109a:	4283      	cmp	r3, r0
 800109c:	dd02      	ble.n	80010a4 <__aeabi_d2iz+0x24>
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <__aeabi_d2iz+0x5c>)
 80010a0:	18d0      	adds	r0, r2, r3
 80010a2:	bd30      	pop	{r4, r5, pc}
 80010a4:	2080      	movs	r0, #128	; 0x80
 80010a6:	0340      	lsls	r0, r0, #13
 80010a8:	4301      	orrs	r1, r0
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <__aeabi_d2iz+0x60>)
 80010ac:	1ac0      	subs	r0, r0, r3
 80010ae:	281f      	cmp	r0, #31
 80010b0:	dd08      	ble.n	80010c4 <__aeabi_d2iz+0x44>
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <__aeabi_d2iz+0x64>)
 80010b4:	1ac3      	subs	r3, r0, r3
 80010b6:	40d9      	lsrs	r1, r3
 80010b8:	000b      	movs	r3, r1
 80010ba:	4258      	negs	r0, r3
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d1f0      	bne.n	80010a2 <__aeabi_d2iz+0x22>
 80010c0:	0018      	movs	r0, r3
 80010c2:	e7ee      	b.n	80010a2 <__aeabi_d2iz+0x22>
 80010c4:	4c08      	ldr	r4, [pc, #32]	; (80010e8 <__aeabi_d2iz+0x68>)
 80010c6:	40c5      	lsrs	r5, r0
 80010c8:	46a4      	mov	ip, r4
 80010ca:	4463      	add	r3, ip
 80010cc:	4099      	lsls	r1, r3
 80010ce:	000b      	movs	r3, r1
 80010d0:	432b      	orrs	r3, r5
 80010d2:	e7f2      	b.n	80010ba <__aeabi_d2iz+0x3a>
 80010d4:	000003fe 	.word	0x000003fe
 80010d8:	0000041d 	.word	0x0000041d
 80010dc:	7fffffff 	.word	0x7fffffff
 80010e0:	00000433 	.word	0x00000433
 80010e4:	00000413 	.word	0x00000413
 80010e8:	fffffbed 	.word	0xfffffbed

080010ec <__aeabi_i2d>:
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d016      	beq.n	8001120 <__aeabi_i2d+0x34>
 80010f2:	17c3      	asrs	r3, r0, #31
 80010f4:	18c5      	adds	r5, r0, r3
 80010f6:	405d      	eors	r5, r3
 80010f8:	0fc4      	lsrs	r4, r0, #31
 80010fa:	0028      	movs	r0, r5
 80010fc:	f000 f864 	bl	80011c8 <__clzsi2>
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <__aeabi_i2d+0x5c>)
 8001102:	1a12      	subs	r2, r2, r0
 8001104:	280a      	cmp	r0, #10
 8001106:	dc16      	bgt.n	8001136 <__aeabi_i2d+0x4a>
 8001108:	0003      	movs	r3, r0
 800110a:	002e      	movs	r6, r5
 800110c:	3315      	adds	r3, #21
 800110e:	409e      	lsls	r6, r3
 8001110:	230b      	movs	r3, #11
 8001112:	1a18      	subs	r0, r3, r0
 8001114:	40c5      	lsrs	r5, r0
 8001116:	0553      	lsls	r3, r2, #21
 8001118:	032d      	lsls	r5, r5, #12
 800111a:	0b2d      	lsrs	r5, r5, #12
 800111c:	0d5b      	lsrs	r3, r3, #21
 800111e:	e003      	b.n	8001128 <__aeabi_i2d+0x3c>
 8001120:	2400      	movs	r4, #0
 8001122:	2300      	movs	r3, #0
 8001124:	2500      	movs	r5, #0
 8001126:	2600      	movs	r6, #0
 8001128:	051b      	lsls	r3, r3, #20
 800112a:	432b      	orrs	r3, r5
 800112c:	07e4      	lsls	r4, r4, #31
 800112e:	4323      	orrs	r3, r4
 8001130:	0030      	movs	r0, r6
 8001132:	0019      	movs	r1, r3
 8001134:	bd70      	pop	{r4, r5, r6, pc}
 8001136:	380b      	subs	r0, #11
 8001138:	4085      	lsls	r5, r0
 800113a:	0553      	lsls	r3, r2, #21
 800113c:	032d      	lsls	r5, r5, #12
 800113e:	2600      	movs	r6, #0
 8001140:	0b2d      	lsrs	r5, r5, #12
 8001142:	0d5b      	lsrs	r3, r3, #21
 8001144:	e7f0      	b.n	8001128 <__aeabi_i2d+0x3c>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	0000041e 	.word	0x0000041e

0800114c <__aeabi_cdrcmple>:
 800114c:	4684      	mov	ip, r0
 800114e:	1c10      	adds	r0, r2, #0
 8001150:	4662      	mov	r2, ip
 8001152:	468c      	mov	ip, r1
 8001154:	1c19      	adds	r1, r3, #0
 8001156:	4663      	mov	r3, ip
 8001158:	e000      	b.n	800115c <__aeabi_cdcmpeq>
 800115a:	46c0      	nop			; (mov r8, r8)

0800115c <__aeabi_cdcmpeq>:
 800115c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800115e:	f000 f90b 	bl	8001378 <__ledf2>
 8001162:	2800      	cmp	r0, #0
 8001164:	d401      	bmi.n	800116a <__aeabi_cdcmpeq+0xe>
 8001166:	2100      	movs	r1, #0
 8001168:	42c8      	cmn	r0, r1
 800116a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800116c <__aeabi_dcmpeq>:
 800116c:	b510      	push	{r4, lr}
 800116e:	f000 f855 	bl	800121c <__eqdf2>
 8001172:	4240      	negs	r0, r0
 8001174:	3001      	adds	r0, #1
 8001176:	bd10      	pop	{r4, pc}

08001178 <__aeabi_dcmplt>:
 8001178:	b510      	push	{r4, lr}
 800117a:	f000 f8fd 	bl	8001378 <__ledf2>
 800117e:	2800      	cmp	r0, #0
 8001180:	db01      	blt.n	8001186 <__aeabi_dcmplt+0xe>
 8001182:	2000      	movs	r0, #0
 8001184:	bd10      	pop	{r4, pc}
 8001186:	2001      	movs	r0, #1
 8001188:	bd10      	pop	{r4, pc}
 800118a:	46c0      	nop			; (mov r8, r8)

0800118c <__aeabi_dcmple>:
 800118c:	b510      	push	{r4, lr}
 800118e:	f000 f8f3 	bl	8001378 <__ledf2>
 8001192:	2800      	cmp	r0, #0
 8001194:	dd01      	ble.n	800119a <__aeabi_dcmple+0xe>
 8001196:	2000      	movs	r0, #0
 8001198:	bd10      	pop	{r4, pc}
 800119a:	2001      	movs	r0, #1
 800119c:	bd10      	pop	{r4, pc}
 800119e:	46c0      	nop			; (mov r8, r8)

080011a0 <__aeabi_dcmpgt>:
 80011a0:	b510      	push	{r4, lr}
 80011a2:	f000 f877 	bl	8001294 <__gedf2>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	dc01      	bgt.n	80011ae <__aeabi_dcmpgt+0xe>
 80011aa:	2000      	movs	r0, #0
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	2001      	movs	r0, #1
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)

080011b4 <__aeabi_dcmpge>:
 80011b4:	b510      	push	{r4, lr}
 80011b6:	f000 f86d 	bl	8001294 <__gedf2>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	da01      	bge.n	80011c2 <__aeabi_dcmpge+0xe>
 80011be:	2000      	movs	r0, #0
 80011c0:	bd10      	pop	{r4, pc}
 80011c2:	2001      	movs	r0, #1
 80011c4:	bd10      	pop	{r4, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)

080011c8 <__clzsi2>:
 80011c8:	211c      	movs	r1, #28
 80011ca:	2301      	movs	r3, #1
 80011cc:	041b      	lsls	r3, r3, #16
 80011ce:	4298      	cmp	r0, r3
 80011d0:	d301      	bcc.n	80011d6 <__clzsi2+0xe>
 80011d2:	0c00      	lsrs	r0, r0, #16
 80011d4:	3910      	subs	r1, #16
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	4298      	cmp	r0, r3
 80011da:	d301      	bcc.n	80011e0 <__clzsi2+0x18>
 80011dc:	0a00      	lsrs	r0, r0, #8
 80011de:	3908      	subs	r1, #8
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d301      	bcc.n	80011ea <__clzsi2+0x22>
 80011e6:	0900      	lsrs	r0, r0, #4
 80011e8:	3904      	subs	r1, #4
 80011ea:	a202      	add	r2, pc, #8	; (adr r2, 80011f4 <__clzsi2+0x2c>)
 80011ec:	5c10      	ldrb	r0, [r2, r0]
 80011ee:	1840      	adds	r0, r0, r1
 80011f0:	4770      	bx	lr
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	02020304 	.word	0x02020304
 80011f8:	01010101 	.word	0x01010101
	...

08001204 <__clzdi2>:
 8001204:	b510      	push	{r4, lr}
 8001206:	2900      	cmp	r1, #0
 8001208:	d103      	bne.n	8001212 <__clzdi2+0xe>
 800120a:	f7ff ffdd 	bl	80011c8 <__clzsi2>
 800120e:	3020      	adds	r0, #32
 8001210:	e002      	b.n	8001218 <__clzdi2+0x14>
 8001212:	1c08      	adds	r0, r1, #0
 8001214:	f7ff ffd8 	bl	80011c8 <__clzsi2>
 8001218:	bd10      	pop	{r4, pc}
 800121a:	46c0      	nop			; (mov r8, r8)

0800121c <__eqdf2>:
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	464f      	mov	r7, r9
 8001220:	4646      	mov	r6, r8
 8001222:	46d6      	mov	lr, sl
 8001224:	4694      	mov	ip, r2
 8001226:	4691      	mov	r9, r2
 8001228:	031a      	lsls	r2, r3, #12
 800122a:	0b12      	lsrs	r2, r2, #12
 800122c:	4d18      	ldr	r5, [pc, #96]	; (8001290 <__eqdf2+0x74>)
 800122e:	b5c0      	push	{r6, r7, lr}
 8001230:	004c      	lsls	r4, r1, #1
 8001232:	030f      	lsls	r7, r1, #12
 8001234:	4692      	mov	sl, r2
 8001236:	005a      	lsls	r2, r3, #1
 8001238:	0006      	movs	r6, r0
 800123a:	4680      	mov	r8, r0
 800123c:	0b3f      	lsrs	r7, r7, #12
 800123e:	2001      	movs	r0, #1
 8001240:	0d64      	lsrs	r4, r4, #21
 8001242:	0fc9      	lsrs	r1, r1, #31
 8001244:	0d52      	lsrs	r2, r2, #21
 8001246:	0fdb      	lsrs	r3, r3, #31
 8001248:	42ac      	cmp	r4, r5
 800124a:	d00a      	beq.n	8001262 <__eqdf2+0x46>
 800124c:	42aa      	cmp	r2, r5
 800124e:	d003      	beq.n	8001258 <__eqdf2+0x3c>
 8001250:	4294      	cmp	r4, r2
 8001252:	d101      	bne.n	8001258 <__eqdf2+0x3c>
 8001254:	4557      	cmp	r7, sl
 8001256:	d00d      	beq.n	8001274 <__eqdf2+0x58>
 8001258:	bce0      	pop	{r5, r6, r7}
 800125a:	46ba      	mov	sl, r7
 800125c:	46b1      	mov	r9, r6
 800125e:	46a8      	mov	r8, r5
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001262:	003d      	movs	r5, r7
 8001264:	4335      	orrs	r5, r6
 8001266:	d1f7      	bne.n	8001258 <__eqdf2+0x3c>
 8001268:	42a2      	cmp	r2, r4
 800126a:	d1f5      	bne.n	8001258 <__eqdf2+0x3c>
 800126c:	4652      	mov	r2, sl
 800126e:	4665      	mov	r5, ip
 8001270:	432a      	orrs	r2, r5
 8001272:	d1f1      	bne.n	8001258 <__eqdf2+0x3c>
 8001274:	2001      	movs	r0, #1
 8001276:	45c8      	cmp	r8, r9
 8001278:	d1ee      	bne.n	8001258 <__eqdf2+0x3c>
 800127a:	4299      	cmp	r1, r3
 800127c:	d006      	beq.n	800128c <__eqdf2+0x70>
 800127e:	2c00      	cmp	r4, #0
 8001280:	d1ea      	bne.n	8001258 <__eqdf2+0x3c>
 8001282:	433e      	orrs	r6, r7
 8001284:	0030      	movs	r0, r6
 8001286:	1e46      	subs	r6, r0, #1
 8001288:	41b0      	sbcs	r0, r6
 800128a:	e7e5      	b.n	8001258 <__eqdf2+0x3c>
 800128c:	2000      	movs	r0, #0
 800128e:	e7e3      	b.n	8001258 <__eqdf2+0x3c>
 8001290:	000007ff 	.word	0x000007ff

08001294 <__gedf2>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	464e      	mov	r6, r9
 8001298:	4645      	mov	r5, r8
 800129a:	4657      	mov	r7, sl
 800129c:	46de      	mov	lr, fp
 800129e:	0004      	movs	r4, r0
 80012a0:	0018      	movs	r0, r3
 80012a2:	b5e0      	push	{r5, r6, r7, lr}
 80012a4:	0016      	movs	r6, r2
 80012a6:	031b      	lsls	r3, r3, #12
 80012a8:	0b1b      	lsrs	r3, r3, #12
 80012aa:	4d32      	ldr	r5, [pc, #200]	; (8001374 <__gedf2+0xe0>)
 80012ac:	030f      	lsls	r7, r1, #12
 80012ae:	004a      	lsls	r2, r1, #1
 80012b0:	4699      	mov	r9, r3
 80012b2:	0043      	lsls	r3, r0, #1
 80012b4:	46a4      	mov	ip, r4
 80012b6:	46b0      	mov	r8, r6
 80012b8:	0b3f      	lsrs	r7, r7, #12
 80012ba:	0d52      	lsrs	r2, r2, #21
 80012bc:	0fc9      	lsrs	r1, r1, #31
 80012be:	0d5b      	lsrs	r3, r3, #21
 80012c0:	0fc0      	lsrs	r0, r0, #31
 80012c2:	42aa      	cmp	r2, r5
 80012c4:	d029      	beq.n	800131a <__gedf2+0x86>
 80012c6:	42ab      	cmp	r3, r5
 80012c8:	d018      	beq.n	80012fc <__gedf2+0x68>
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d12a      	bne.n	8001324 <__gedf2+0x90>
 80012ce:	433c      	orrs	r4, r7
 80012d0:	46a3      	mov	fp, r4
 80012d2:	4265      	negs	r5, r4
 80012d4:	4165      	adcs	r5, r4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <__gedf2+0x4c>
 80012da:	464c      	mov	r4, r9
 80012dc:	4326      	orrs	r6, r4
 80012de:	d027      	beq.n	8001330 <__gedf2+0x9c>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d115      	bne.n	8001310 <__gedf2+0x7c>
 80012e4:	4281      	cmp	r1, r0
 80012e6:	d028      	beq.n	800133a <__gedf2+0xa6>
 80012e8:	2002      	movs	r0, #2
 80012ea:	3901      	subs	r1, #1
 80012ec:	4008      	ands	r0, r1
 80012ee:	3801      	subs	r0, #1
 80012f0:	bcf0      	pop	{r4, r5, r6, r7}
 80012f2:	46bb      	mov	fp, r7
 80012f4:	46b2      	mov	sl, r6
 80012f6:	46a9      	mov	r9, r5
 80012f8:	46a0      	mov	r8, r4
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fc:	464d      	mov	r5, r9
 80012fe:	432e      	orrs	r6, r5
 8001300:	d12f      	bne.n	8001362 <__gedf2+0xce>
 8001302:	2a00      	cmp	r2, #0
 8001304:	d1ee      	bne.n	80012e4 <__gedf2+0x50>
 8001306:	433c      	orrs	r4, r7
 8001308:	4265      	negs	r5, r4
 800130a:	4165      	adcs	r5, r4
 800130c:	2d00      	cmp	r5, #0
 800130e:	d0e9      	beq.n	80012e4 <__gedf2+0x50>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1ed      	bne.n	80012f0 <__gedf2+0x5c>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7ea      	b.n	80012f0 <__gedf2+0x5c>
 800131a:	003d      	movs	r5, r7
 800131c:	4325      	orrs	r5, r4
 800131e:	d120      	bne.n	8001362 <__gedf2+0xce>
 8001320:	4293      	cmp	r3, r2
 8001322:	d0eb      	beq.n	80012fc <__gedf2+0x68>
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1dd      	bne.n	80012e4 <__gedf2+0x50>
 8001328:	464c      	mov	r4, r9
 800132a:	4326      	orrs	r6, r4
 800132c:	d1da      	bne.n	80012e4 <__gedf2+0x50>
 800132e:	e7db      	b.n	80012e8 <__gedf2+0x54>
 8001330:	465b      	mov	r3, fp
 8001332:	2000      	movs	r0, #0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0db      	beq.n	80012f0 <__gedf2+0x5c>
 8001338:	e7d6      	b.n	80012e8 <__gedf2+0x54>
 800133a:	429a      	cmp	r2, r3
 800133c:	dc0a      	bgt.n	8001354 <__gedf2+0xc0>
 800133e:	dbe7      	blt.n	8001310 <__gedf2+0x7c>
 8001340:	454f      	cmp	r7, r9
 8001342:	d8d1      	bhi.n	80012e8 <__gedf2+0x54>
 8001344:	d010      	beq.n	8001368 <__gedf2+0xd4>
 8001346:	2000      	movs	r0, #0
 8001348:	454f      	cmp	r7, r9
 800134a:	d2d1      	bcs.n	80012f0 <__gedf2+0x5c>
 800134c:	2900      	cmp	r1, #0
 800134e:	d0e1      	beq.n	8001314 <__gedf2+0x80>
 8001350:	0008      	movs	r0, r1
 8001352:	e7cd      	b.n	80012f0 <__gedf2+0x5c>
 8001354:	4243      	negs	r3, r0
 8001356:	4158      	adcs	r0, r3
 8001358:	2302      	movs	r3, #2
 800135a:	4240      	negs	r0, r0
 800135c:	4018      	ands	r0, r3
 800135e:	3801      	subs	r0, #1
 8001360:	e7c6      	b.n	80012f0 <__gedf2+0x5c>
 8001362:	2002      	movs	r0, #2
 8001364:	4240      	negs	r0, r0
 8001366:	e7c3      	b.n	80012f0 <__gedf2+0x5c>
 8001368:	45c4      	cmp	ip, r8
 800136a:	d8bd      	bhi.n	80012e8 <__gedf2+0x54>
 800136c:	2000      	movs	r0, #0
 800136e:	45c4      	cmp	ip, r8
 8001370:	d2be      	bcs.n	80012f0 <__gedf2+0x5c>
 8001372:	e7eb      	b.n	800134c <__gedf2+0xb8>
 8001374:	000007ff 	.word	0x000007ff

08001378 <__ledf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	464e      	mov	r6, r9
 800137c:	4645      	mov	r5, r8
 800137e:	4657      	mov	r7, sl
 8001380:	46de      	mov	lr, fp
 8001382:	0004      	movs	r4, r0
 8001384:	0018      	movs	r0, r3
 8001386:	b5e0      	push	{r5, r6, r7, lr}
 8001388:	0016      	movs	r6, r2
 800138a:	031b      	lsls	r3, r3, #12
 800138c:	0b1b      	lsrs	r3, r3, #12
 800138e:	4d31      	ldr	r5, [pc, #196]	; (8001454 <__ledf2+0xdc>)
 8001390:	030f      	lsls	r7, r1, #12
 8001392:	004a      	lsls	r2, r1, #1
 8001394:	4699      	mov	r9, r3
 8001396:	0043      	lsls	r3, r0, #1
 8001398:	46a4      	mov	ip, r4
 800139a:	46b0      	mov	r8, r6
 800139c:	0b3f      	lsrs	r7, r7, #12
 800139e:	0d52      	lsrs	r2, r2, #21
 80013a0:	0fc9      	lsrs	r1, r1, #31
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fc0      	lsrs	r0, r0, #31
 80013a6:	42aa      	cmp	r2, r5
 80013a8:	d011      	beq.n	80013ce <__ledf2+0x56>
 80013aa:	42ab      	cmp	r3, r5
 80013ac:	d014      	beq.n	80013d8 <__ledf2+0x60>
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d12f      	bne.n	8001412 <__ledf2+0x9a>
 80013b2:	433c      	orrs	r4, r7
 80013b4:	46a3      	mov	fp, r4
 80013b6:	4265      	negs	r5, r4
 80013b8:	4165      	adcs	r5, r4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d114      	bne.n	80013e8 <__ledf2+0x70>
 80013be:	464c      	mov	r4, r9
 80013c0:	4326      	orrs	r6, r4
 80013c2:	d111      	bne.n	80013e8 <__ledf2+0x70>
 80013c4:	465b      	mov	r3, fp
 80013c6:	2000      	movs	r0, #0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d017      	beq.n	80013fc <__ledf2+0x84>
 80013cc:	e010      	b.n	80013f0 <__ledf2+0x78>
 80013ce:	003d      	movs	r5, r7
 80013d0:	4325      	orrs	r5, r4
 80013d2:	d112      	bne.n	80013fa <__ledf2+0x82>
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d11c      	bne.n	8001412 <__ledf2+0x9a>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d10d      	bne.n	80013fa <__ledf2+0x82>
 80013de:	2a00      	cmp	r2, #0
 80013e0:	d104      	bne.n	80013ec <__ledf2+0x74>
 80013e2:	433c      	orrs	r4, r7
 80013e4:	4265      	negs	r5, r4
 80013e6:	4165      	adcs	r5, r4
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	d10d      	bne.n	8001408 <__ledf2+0x90>
 80013ec:	4281      	cmp	r1, r0
 80013ee:	d016      	beq.n	800141e <__ledf2+0xa6>
 80013f0:	2002      	movs	r0, #2
 80013f2:	3901      	subs	r1, #1
 80013f4:	4008      	ands	r0, r1
 80013f6:	3801      	subs	r0, #1
 80013f8:	e000      	b.n	80013fc <__ledf2+0x84>
 80013fa:	2002      	movs	r0, #2
 80013fc:	bcf0      	pop	{r4, r5, r6, r7}
 80013fe:	46bb      	mov	fp, r7
 8001400:	46b2      	mov	sl, r6
 8001402:	46a9      	mov	r9, r5
 8001404:	46a0      	mov	r8, r4
 8001406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001408:	2800      	cmp	r0, #0
 800140a:	d1f7      	bne.n	80013fc <__ledf2+0x84>
 800140c:	2001      	movs	r0, #1
 800140e:	4240      	negs	r0, r0
 8001410:	e7f4      	b.n	80013fc <__ledf2+0x84>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ea      	bne.n	80013ec <__ledf2+0x74>
 8001416:	464c      	mov	r4, r9
 8001418:	4326      	orrs	r6, r4
 800141a:	d1e7      	bne.n	80013ec <__ledf2+0x74>
 800141c:	e7e8      	b.n	80013f0 <__ledf2+0x78>
 800141e:	429a      	cmp	r2, r3
 8001420:	dd06      	ble.n	8001430 <__ledf2+0xb8>
 8001422:	4243      	negs	r3, r0
 8001424:	4158      	adcs	r0, r3
 8001426:	2302      	movs	r3, #2
 8001428:	4240      	negs	r0, r0
 800142a:	4018      	ands	r0, r3
 800142c:	3801      	subs	r0, #1
 800142e:	e7e5      	b.n	80013fc <__ledf2+0x84>
 8001430:	429a      	cmp	r2, r3
 8001432:	dbe9      	blt.n	8001408 <__ledf2+0x90>
 8001434:	454f      	cmp	r7, r9
 8001436:	d8db      	bhi.n	80013f0 <__ledf2+0x78>
 8001438:	d006      	beq.n	8001448 <__ledf2+0xd0>
 800143a:	2000      	movs	r0, #0
 800143c:	454f      	cmp	r7, r9
 800143e:	d2dd      	bcs.n	80013fc <__ledf2+0x84>
 8001440:	2900      	cmp	r1, #0
 8001442:	d0e3      	beq.n	800140c <__ledf2+0x94>
 8001444:	0008      	movs	r0, r1
 8001446:	e7d9      	b.n	80013fc <__ledf2+0x84>
 8001448:	45c4      	cmp	ip, r8
 800144a:	d8d1      	bhi.n	80013f0 <__ledf2+0x78>
 800144c:	2000      	movs	r0, #0
 800144e:	45c4      	cmp	ip, r8
 8001450:	d2d4      	bcs.n	80013fc <__ledf2+0x84>
 8001452:	e7f5      	b.n	8001440 <__ledf2+0xc8>
 8001454:	000007ff 	.word	0x000007ff

08001458 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}

08001474 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	4393      	bics	r3, r2
 8001484:	001a      	movs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}

08001492 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	621a      	str	r2, [r3, #32]
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d00d      	beq.n	80014dc <LL_TIM_OC_DisableFast+0x2c>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d008      	beq.n	80014d8 <LL_TIM_OC_DisableFast+0x28>
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d101      	bne.n	80014d4 <LL_TIM_OC_DisableFast+0x24>
 80014d0:	2304      	movs	r3, #4
 80014d2:	e004      	b.n	80014de <LL_TIM_OC_DisableFast+0x2e>
 80014d4:	2306      	movs	r3, #6
 80014d6:	e002      	b.n	80014de <LL_TIM_OC_DisableFast+0x2e>
 80014d8:	2302      	movs	r3, #2
 80014da:	e000      	b.n	80014de <LL_TIM_OC_DisableFast+0x2e>
 80014dc:	2300      	movs	r3, #0
 80014de:	200f      	movs	r0, #15
 80014e0:	183a      	adds	r2, r7, r0
 80014e2:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3318      	adds	r3, #24
 80014e8:	0019      	movs	r1, r3
 80014ea:	183b      	adds	r3, r7, r0
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <LL_TIM_OC_DisableFast+0x68>)
 80014f0:	5cd3      	ldrb	r3, [r2, r3]
 80014f2:	18cb      	adds	r3, r1, r3
 80014f4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	183a      	adds	r2, r7, r0
 80014fc:	7812      	ldrb	r2, [r2, #0]
 80014fe:	4907      	ldr	r1, [pc, #28]	; (800151c <LL_TIM_OC_DisableFast+0x6c>)
 8001500:	5c8a      	ldrb	r2, [r1, r2]
 8001502:	0011      	movs	r1, r2
 8001504:	2204      	movs	r2, #4
 8001506:	408a      	lsls	r2, r1
 8001508:	43d2      	mvns	r2, r2
 800150a:	401a      	ands	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	601a      	str	r2, [r3, #0]

}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b004      	add	sp, #16
 8001516:	bd80      	pop	{r7, pc}
 8001518:	080031b8 	.word	0x080031b8
 800151c:	080031c0 	.word	0x080031c0

08001520 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d00d      	beq.n	800154c <LL_TIM_OC_EnablePreload+0x2c>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b10      	cmp	r3, #16
 8001534:	d008      	beq.n	8001548 <LL_TIM_OC_EnablePreload+0x28>
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	429a      	cmp	r2, r3
 800153e:	d101      	bne.n	8001544 <LL_TIM_OC_EnablePreload+0x24>
 8001540:	2304      	movs	r3, #4
 8001542:	e004      	b.n	800154e <LL_TIM_OC_EnablePreload+0x2e>
 8001544:	2306      	movs	r3, #6
 8001546:	e002      	b.n	800154e <LL_TIM_OC_EnablePreload+0x2e>
 8001548:	2302      	movs	r3, #2
 800154a:	e000      	b.n	800154e <LL_TIM_OC_EnablePreload+0x2e>
 800154c:	2300      	movs	r3, #0
 800154e:	200f      	movs	r0, #15
 8001550:	183a      	adds	r2, r7, r0
 8001552:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3318      	adds	r3, #24
 8001558:	0019      	movs	r1, r3
 800155a:	183b      	adds	r3, r7, r0
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <LL_TIM_OC_EnablePreload+0x68>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	18cb      	adds	r3, r1, r3
 8001564:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	183b      	adds	r3, r7, r0
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	4907      	ldr	r1, [pc, #28]	; (800158c <LL_TIM_OC_EnablePreload+0x6c>)
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	0019      	movs	r1, r3
 8001574:	2308      	movs	r3, #8
 8001576:	408b      	lsls	r3, r1
 8001578:	431a      	orrs	r2, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b004      	add	sp, #16
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	080031b8 	.word	0x080031b8
 800158c:	080031c0 	.word	0x080031c0

08001590 <LL_TIM_OC_DisablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d00d      	beq.n	80015bc <LL_TIM_OC_DisablePreload+0x2c>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d008      	beq.n	80015b8 <LL_TIM_OC_DisablePreload+0x28>
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d101      	bne.n	80015b4 <LL_TIM_OC_DisablePreload+0x24>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e004      	b.n	80015be <LL_TIM_OC_DisablePreload+0x2e>
 80015b4:	2306      	movs	r3, #6
 80015b6:	e002      	b.n	80015be <LL_TIM_OC_DisablePreload+0x2e>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e000      	b.n	80015be <LL_TIM_OC_DisablePreload+0x2e>
 80015bc:	2300      	movs	r3, #0
 80015be:	200f      	movs	r0, #15
 80015c0:	183a      	adds	r2, r7, r0
 80015c2:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3318      	adds	r3, #24
 80015c8:	0019      	movs	r1, r3
 80015ca:	183b      	adds	r3, r7, r0
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <LL_TIM_OC_DisablePreload+0x68>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	18cb      	adds	r3, r1, r3
 80015d4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	183a      	adds	r2, r7, r0
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	4907      	ldr	r1, [pc, #28]	; (80015fc <LL_TIM_OC_DisablePreload+0x6c>)
 80015e0:	5c8a      	ldrb	r2, [r1, r2]
 80015e2:	0011      	movs	r1, r2
 80015e4:	2208      	movs	r2, #8
 80015e6:	408a      	lsls	r2, r1
 80015e8:	43d2      	mvns	r2, r2
 80015ea:	401a      	ands	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	601a      	str	r2, [r3, #0]
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b004      	add	sp, #16
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	080031b8 	.word	0x080031b8
 80015fc:	080031c0 	.word	0x080031c0

08001600 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}

08001618 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}

08001648 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2270      	movs	r2, #112	; 0x70
 8001658:	4393      	bics	r3, r2
 800165a:	001a      	movs	r2, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	4393      	bics	r3, r2
 800167c:	001a      	movs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	609a      	str	r2, [r3, #8]
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}

0800168a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80016c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80016d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b004      	add	sp, #16
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <LL_IOP_GRP1_EnableClock+0x28>)
 80016f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <LL_IOP_GRP1_EnableClock+0x28>)
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <LL_IOP_GRP1_EnableClock+0x28>)
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b004      	add	sp, #16
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000

08001714 <ESC_Drive>:
int counter = 0;
int neko = 0;
int nekoCounter = 0;
const int speed = 115;

void ESC_Drive() {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(SystemCoreClock / (50000U / uwTickFreq));
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <ESC_Drive+0x128>)
 800171c:	681c      	ldr	r4, [r3, #0]
 800171e:	4b48      	ldr	r3, [pc, #288]	; (8001840 <ESC_Drive+0x12c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	0019      	movs	r1, r3
 8001724:	4847      	ldr	r0, [pc, #284]	; (8001844 <ESC_Drive+0x130>)
 8001726:	f7fe fcef 	bl	8000108 <__udivsi3>
 800172a:	0003      	movs	r3, r0
 800172c:	0019      	movs	r1, r3
 800172e:	0020      	movs	r0, r4
 8001730:	f7fe fcea 	bl	8000108 <__udivsi3>
 8001734:	0003      	movs	r3, r0
 8001736:	0018      	movs	r0, r3
 8001738:	f000 fc35 	bl	8001fa6 <HAL_SYSTICK_Config>

	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	009a      	lsls	r2, r3, #2
 8001740:	23a0      	movs	r3, #160	; 0xa0
 8001742:	05db      	lsls	r3, r3, #23
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff ff9f 	bl	800168a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	01db      	lsls	r3, r3, #7
 8001750:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <ESC_Drive+0x134>)
 8001752:	0019      	movs	r1, r3
 8001754:	0010      	movs	r0, r2
 8001756:	f7ff ff98 	bl	800168a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 800175a:	23a0      	movs	r3, #160	; 0xa0
 800175c:	05db      	lsls	r3, r3, #23
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ff92 	bl	800168a <LL_GPIO_SetOutputPin>
	for (int i = 0; i < 128; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e05f      	b.n	800182c <ESC_Drive+0x118>
		LL_TIM_OC_SetCompareCH3(TIM2, waveTable[i] * 0.3);
 800176c:	4a37      	ldr	r2, [pc, #220]	; (800184c <ESC_Drive+0x138>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff fcb9 	bl	80010ec <__aeabi_i2d>
 800177a:	4a35      	ldr	r2, [pc, #212]	; (8001850 <ESC_Drive+0x13c>)
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <ESC_Drive+0x140>)
 800177e:	f7fe fe81 	bl	8000484 <__aeabi_dmul>
 8001782:	0002      	movs	r2, r0
 8001784:	000b      	movs	r3, r1
 8001786:	0010      	movs	r0, r2
 8001788:	0019      	movs	r1, r3
 800178a:	f7fe fd91 	bl	80002b0 <__aeabi_d2uiz>
 800178e:	0002      	movs	r2, r0
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	05db      	lsls	r3, r3, #23
 8001794:	0011      	movs	r1, r2
 8001796:	0018      	movs	r0, r3
 8001798:	f7ff ff3e 	bl	8001618 <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, waveTable[(i + 43) % 128] * 0.3);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	332b      	adds	r3, #43	; 0x2b
 80017a0:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <ESC_Drive+0x144>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	d504      	bpl.n	80017b0 <ESC_Drive+0x9c>
 80017a6:	3b01      	subs	r3, #1
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	4252      	negs	r2, r2
 80017ac:	4313      	orrs	r3, r2
 80017ae:	3301      	adds	r3, #1
 80017b0:	001a      	movs	r2, r3
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <ESC_Drive+0x138>)
 80017b4:	5c9b      	ldrb	r3, [r3, r2]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fc98 	bl	80010ec <__aeabi_i2d>
 80017bc:	4a24      	ldr	r2, [pc, #144]	; (8001850 <ESC_Drive+0x13c>)
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <ESC_Drive+0x140>)
 80017c0:	f7fe fe60 	bl	8000484 <__aeabi_dmul>
 80017c4:	0002      	movs	r2, r0
 80017c6:	000b      	movs	r3, r1
 80017c8:	0010      	movs	r0, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	f7fe fd70 	bl	80002b0 <__aeabi_d2uiz>
 80017d0:	0002      	movs	r2, r0
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	05db      	lsls	r3, r3, #23
 80017d6:	0011      	movs	r1, r2
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff ff29 	bl	8001630 <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, waveTable[(i + 85) % 128] * 0.3);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3355      	adds	r3, #85	; 0x55
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <ESC_Drive+0x144>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	d504      	bpl.n	80017f2 <ESC_Drive+0xde>
 80017e8:	3b01      	subs	r3, #1
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	4252      	negs	r2, r2
 80017ee:	4313      	orrs	r3, r2
 80017f0:	3301      	adds	r3, #1
 80017f2:	001a      	movs	r2, r3
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <ESC_Drive+0x138>)
 80017f6:	5c9b      	ldrb	r3, [r3, r2]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff fc77 	bl	80010ec <__aeabi_i2d>
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <ESC_Drive+0x13c>)
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <ESC_Drive+0x140>)
 8001802:	f7fe fe3f 	bl	8000484 <__aeabi_dmul>
 8001806:	0002      	movs	r2, r0
 8001808:	000b      	movs	r3, r1
 800180a:	0010      	movs	r0, r2
 800180c:	0019      	movs	r1, r3
 800180e:	f7fe fd4f 	bl	80002b0 <__aeabi_d2uiz>
 8001812:	0002      	movs	r2, r0
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	05db      	lsls	r3, r3, #23
 8001818:	0011      	movs	r1, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fef0 	bl	8001600 <LL_TIM_OC_SetCompareCH1>
//		sekuta(i, 20);
		HAL_Delay(1);
 8001820:	2001      	movs	r0, #1
 8001822:	f000 faf5 	bl	8001e10 <HAL_Delay>
	for (int i = 0; i < 128; i++) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b7f      	cmp	r3, #127	; 0x7f
 8001830:	dd9c      	ble.n	800176c <ESC_Drive+0x58>
	}
}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b003      	add	sp, #12
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	20000080 	.word	0x20000080
 8001840:	20000088 	.word	0x20000088
 8001844:	0000c350 	.word	0x0000c350
 8001848:	50000800 	.word	0x50000800
 800184c:	20000000 	.word	0x20000000
 8001850:	33333333 	.word	0x33333333
 8001854:	3fd33333 	.word	0x3fd33333
 8001858:	8000007f 	.word	0x8000007f

0800185c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001860:	f000 fa66 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f822 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001868:	f000 f978 	bl	8001b5c <MX_GPIO_Init>
  MX_TIM2_Init();
 800186c:	f000 f87a 	bl	8001964 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	05db      	lsls	r3, r3, #23
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff fdef 	bl	8001458 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	005a      	lsls	r2, r3, #1
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	05db      	lsls	r3, r3, #23
 8001882:	0011      	movs	r1, r2
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff fe04 	bl	8001492 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH4);
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	05db      	lsls	r3, r3, #23
 8001892:	0011      	movs	r1, r2
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fdfc 	bl	8001492 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	05db      	lsls	r3, r3, #23
 800189e:	2101      	movs	r1, #1
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff fdf6 	bl	8001492 <LL_TIM_CC_EnableChannel>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ESC_Drive();
 80018a6:	f7ff ff35 	bl	8001714 <ESC_Drive>
 80018aa:	e7fc      	b.n	80018a6 <main+0x4a>

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b093      	sub	sp, #76	; 0x4c
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	2414      	movs	r4, #20
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	0018      	movs	r0, r3
 80018b8:	2334      	movs	r3, #52	; 0x34
 80018ba:	001a      	movs	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	f001 fc47 	bl	8003150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c2:	003b      	movs	r3, r7
 80018c4:	0018      	movs	r0, r3
 80018c6:	2314      	movs	r3, #20
 80018c8:	001a      	movs	r2, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	f001 fc40 	bl	8003150 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <SystemClock_Config+0xb0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a22      	ldr	r2, [pc, #136]	; (8001960 <SystemClock_Config+0xb4>)
 80018d6:	401a      	ands	r2, r3
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <SystemClock_Config+0xb0>)
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0109      	lsls	r1, r1, #4
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e2:	0021      	movs	r1, r4
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2202      	movs	r2, #2
 80018e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2201      	movs	r2, #1
 80018ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2210      	movs	r2, #16
 80018f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2202      	movs	r2, #2
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	02d2      	lsls	r2, r2, #11
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	03d2      	lsls	r2, r2, #15
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001912:	187b      	adds	r3, r7, r1
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fb53 	bl	8001fc0 <HAL_RCC_OscConfig>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800191e:	f000 f98f 	bl	8001c40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001922:	003b      	movs	r3, r7
 8001924:	220f      	movs	r2, #15
 8001926:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001928:	003b      	movs	r3, r7
 800192a:	2203      	movs	r2, #3
 800192c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	003b      	movs	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001934:	003b      	movs	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193a:	003b      	movs	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001940:	003b      	movs	r3, r7
 8001942:	2101      	movs	r1, #1
 8001944:	0018      	movs	r0, r3
 8001946:	f000 feb7 	bl	80026b8 <HAL_RCC_ClockConfig>
 800194a:	1e03      	subs	r3, r0, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800194e:	f000 f977 	bl	8001c40 <Error_Handler>
  }
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b013      	add	sp, #76	; 0x4c
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40007000 	.word	0x40007000
 8001960:	ffffe7ff 	.word	0xffffe7ff

08001964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800196a:	2528      	movs	r5, #40	; 0x28
 800196c:	197b      	adds	r3, r7, r5
 800196e:	0018      	movs	r0, r3
 8001970:	2310      	movs	r3, #16
 8001972:	001a      	movs	r2, r3
 8001974:	2100      	movs	r1, #0
 8001976:	f001 fbeb 	bl	8003150 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800197a:	2418      	movs	r4, #24
 800197c:	193b      	adds	r3, r7, r4
 800197e:	0018      	movs	r0, r3
 8001980:	2310      	movs	r3, #16
 8001982:	001a      	movs	r2, r3
 8001984:	2100      	movs	r1, #0
 8001986:	f001 fbe3 	bl	8003150 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	003b      	movs	r3, r7
 800198c:	0018      	movs	r0, r3
 800198e:	2318      	movs	r3, #24
 8001990:	001a      	movs	r2, r3
 8001992:	2100      	movs	r1, #0
 8001994:	f001 fbdc 	bl	8003150 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fe8f 	bl	80016bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 800199e:	197b      	adds	r3, r7, r5
 80019a0:	2201      	movs	r2, #1
 80019a2:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80019a4:	197b      	adds	r3, r7, r5
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 80019aa:	197b      	adds	r3, r7, r5
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80019b0:	197b      	adds	r3, r7, r5
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80019b6:	197a      	adds	r2, r7, r5
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	05db      	lsls	r3, r3, #23
 80019bc:	0011      	movs	r1, r2
 80019be:	0018      	movs	r0, r3
 80019c0:	f001 f9d6 	bl	8002d70 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	05db      	lsls	r3, r3, #23
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff fd53 	bl	8001474 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	05db      	lsls	r3, r3, #23
 80019d2:	2101      	movs	r1, #1
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff fda3 	bl	8001520 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2260      	movs	r2, #96	; 0x60
 80019de:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80019f2:	193a      	adds	r2, r7, r4
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	05db      	lsls	r3, r3, #23
 80019f8:	2101      	movs	r1, #1
 80019fa:	0018      	movs	r0, r3
 80019fc:	f001 fa00 	bl	8002e00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	05db      	lsls	r3, r3, #23
 8001a04:	2101      	movs	r1, #1
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7ff fd52 	bl	80014b0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	005a      	lsls	r2, r3, #1
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7ff fd82 	bl	8001520 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001a1c:	193a      	adds	r2, r7, r4
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	0059      	lsls	r1, r3, #1
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	05db      	lsls	r3, r3, #23
 8001a26:	0018      	movs	r0, r3
 8001a28:	f001 f9ea 	bl	8002e00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	005a      	lsls	r2, r3, #1
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	05db      	lsls	r3, r3, #23
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7ff fd3a 	bl	80014b0 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	05db      	lsls	r3, r3, #23
 8001a44:	0011      	movs	r1, r2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff fd6a 	bl	8001520 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001a4c:	193a      	adds	r2, r7, r4
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	0159      	lsls	r1, r3, #5
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	05db      	lsls	r3, r3, #23
 8001a56:	0018      	movs	r0, r3
 8001a58:	f001 f9d2 	bl	8002e00 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	05db      	lsls	r3, r3, #23
 8001a64:	0011      	movs	r1, r2
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff fd22 	bl	80014b0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	05db      	lsls	r3, r3, #23
 8001a70:	2100      	movs	r1, #0
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff fde8 	bl	8001648 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	05db      	lsls	r3, r3, #23
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fdf5 	bl	800166c <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	05db      	lsls	r3, r3, #23
 8001a86:	2101      	movs	r1, #1
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fd81 	bl	8001590 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	005a      	lsls	r2, r3, #1
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	05db      	lsls	r3, r3, #23
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fd79 	bl	8001590 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	05db      	lsls	r3, r3, #23
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff fd71 	bl	8001590 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff fe1a 	bl	80016e8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f7ff fe17 	bl	80016e8 <LL_IOP_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA5   ------> TIM2_CH1
  PB1   ------> TIM2_CH4
  PA10   ------> TIM2_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001aba:	003b      	movs	r3, r7
 8001abc:	2220      	movs	r2, #32
 8001abe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ac0:	003b      	movs	r3, r7
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ac6:	003b      	movs	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001acc:	003b      	movs	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad2:	003b      	movs	r3, r7
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001ad8:	003b      	movs	r3, r7
 8001ada:	2205      	movs	r2, #5
 8001adc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	003a      	movs	r2, r7
 8001ae0:	23a0      	movs	r3, #160	; 0xa0
 8001ae2:	05db      	lsls	r3, r3, #23
 8001ae4:	0011      	movs	r1, r2
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f001 f88d 	bl	8002c06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001aec:	003b      	movs	r3, r7
 8001aee:	2202      	movs	r2, #2
 8001af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001af2:	003b      	movs	r3, r7
 8001af4:	2202      	movs	r2, #2
 8001af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001af8:	003b      	movs	r3, r7
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001afe:	003b      	movs	r3, r7
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b04:	003b      	movs	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	2205      	movs	r2, #5
 8001b0e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	003b      	movs	r3, r7
 8001b12:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <MX_TIM2_Init+0x1f4>)
 8001b14:	0019      	movs	r1, r3
 8001b16:	0010      	movs	r0, r2
 8001b18:	f001 f875 	bl	8002c06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001b1c:	003b      	movs	r3, r7
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	00d2      	lsls	r2, r2, #3
 8001b22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b24:	003b      	movs	r3, r7
 8001b26:	2202      	movs	r2, #2
 8001b28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b2a:	003b      	movs	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b30:	003b      	movs	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b36:	003b      	movs	r3, r7
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001b3c:	003b      	movs	r3, r7
 8001b3e:	2205      	movs	r2, #5
 8001b40:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	003a      	movs	r2, r7
 8001b44:	23a0      	movs	r3, #160	; 0xa0
 8001b46:	05db      	lsls	r3, r3, #23
 8001b48:	0011      	movs	r1, r2
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f001 f85b 	bl	8002c06 <LL_GPIO_Init>

}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b00e      	add	sp, #56	; 0x38
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	50000400 	.word	0x50000400

08001b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	003b      	movs	r3, r7
 8001b64:	0018      	movs	r0, r3
 8001b66:	2318      	movs	r3, #24
 8001b68:	001a      	movs	r2, r3
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	f001 faf0 	bl	8003150 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001b70:	2004      	movs	r0, #4
 8001b72:	f7ff fdb9 	bl	80016e8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fdb6 	bl	80016e8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f7ff fdb3 	bl	80016e8 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14);
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	01db      	lsls	r3, r3, #7
 8001b86:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <MX_GPIO_Init+0xe0>)
 8001b88:	0019      	movs	r1, r3
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	f7ff fd89 	bl	80016a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8001b90:	23a0      	movs	r3, #160	; 0xa0
 8001b92:	05db      	lsls	r3, r3, #23
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff fd83 	bl	80016a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	009a      	lsls	r2, r3, #2
 8001ba0:	23a0      	movs	r3, #160	; 0xa0
 8001ba2:	05db      	lsls	r3, r3, #23
 8001ba4:	0011      	movs	r1, r2
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff fd7b 	bl	80016a2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001bac:	003b      	movs	r3, r7
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	01d2      	lsls	r2, r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bb4:	003b      	movs	r3, r7
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bba:	003b      	movs	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc0:	003b      	movs	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bc6:	003b      	movs	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	003b      	movs	r3, r7
 8001bce:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <MX_GPIO_Init+0xe0>)
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	f001 f817 	bl	8002c06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001bd8:	003b      	movs	r3, r7
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bde:	003b      	movs	r3, r7
 8001be0:	2201      	movs	r2, #1
 8001be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001be4:	003b      	movs	r3, r7
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bea:	003b      	movs	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bf0:	003b      	movs	r3, r7
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	003a      	movs	r2, r7
 8001bf8:	23a0      	movs	r3, #160	; 0xa0
 8001bfa:	05db      	lsls	r3, r3, #23
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f001 f801 	bl	8002c06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001c04:	003b      	movs	r3, r7
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c0c:	003b      	movs	r3, r7
 8001c0e:	2201      	movs	r2, #1
 8001c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c12:	003b      	movs	r3, r7
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c18:	003b      	movs	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c1e:	003b      	movs	r3, r7
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	003a      	movs	r2, r7
 8001c26:	23a0      	movs	r3, #160	; 0xa0
 8001c28:	05db      	lsls	r3, r3, #23
 8001c2a:	0011      	movs	r1, r2
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 ffea 	bl	8002c06 <LL_GPIO_Init>

}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b006      	add	sp, #24
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	50000800 	.word	0x50000800

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c48:	e7fe      	b.n	8001c48 <Error_Handler+0x8>
	...

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_MspInit+0x24>)
 8001c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_MspInit+0x24>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_MspInit+0x24>)
 8001c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_MspInit+0x24>)
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	0549      	lsls	r1, r1, #21
 8001c66:	430a      	orrs	r2, r1
 8001c68:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <NMI_Handler+0x4>

08001c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <HardFault_Handler+0x4>

08001c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 f89e 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001cac:	4813      	ldr	r0, [pc, #76]	; (8001cfc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001cae:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001cb0:	4813      	ldr	r0, [pc, #76]	; (8001d00 <LoopForever+0x6>)
    LDR R1, [R0]
 8001cb2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001cb4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001cb6:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <LoopForever+0xa>)
    CMP R1, R2
 8001cb8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001cba:	d105      	bne.n	8001cc8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001cbe:	4913      	ldr	r1, [pc, #76]	; (8001d0c <LoopForever+0x12>)
    STR R1, [R0]
 8001cc0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001cc2:	4813      	ldr	r0, [pc, #76]	; (8001d10 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001cc4:	4913      	ldr	r1, [pc, #76]	; (8001d14 <LoopForever+0x1a>)
    STR R1, [R0]
 8001cc6:	6001      	str	r1, [r0, #0]

08001cc8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	4813      	ldr	r0, [pc, #76]	; (8001d18 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001cca:	4914      	ldr	r1, [pc, #80]	; (8001d1c <LoopForever+0x22>)
  ldr r2, =_sidata
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <LoopForever+0x26>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001ce0:	4c11      	ldr	r4, [pc, #68]	; (8001d28 <LoopForever+0x2e>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001cee:	f7ff ffd8 	bl	8001ca2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f001 fa09 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff fdb1 	bl	800185c <main>

08001cfa <LoopForever>:

LoopForever:
    b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
   ldr   r0, =_estack
 8001cfc:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001d00:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001d04:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001d08:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001d0c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001d10:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001d14:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001d20:	080031f4 	.word	0x080031f4
  ldr r2, =_sbss
 8001d24:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001d28:	200000ac 	.word	0x200000ac

08001d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_IRQHandler>
	...

08001d30 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_Init+0x3c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_Init+0x3c>)
 8001d42:	2140      	movs	r1, #64	; 0x40
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d48:	2003      	movs	r0, #3
 8001d4a:	f000 f811 	bl	8001d70 <HAL_InitTick>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e001      	b.n	8001d5e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d5a:	f7ff ff77 	bl	8001c4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781b      	ldrb	r3, [r3, #0]
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40022000 	.word	0x40022000

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_InitTick+0x5c>)
 8001d7a:	681c      	ldr	r4, [r3, #0]
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_InitTick+0x60>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	0019      	movs	r1, r3
 8001d82:	23fa      	movs	r3, #250	; 0xfa
 8001d84:	0098      	lsls	r0, r3, #2
 8001d86:	f7fe f9bf 	bl	8000108 <__udivsi3>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	0020      	movs	r0, r4
 8001d90:	f7fe f9ba 	bl	8000108 <__udivsi3>
 8001d94:	0003      	movs	r3, r0
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 f905 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001d9c:	1e03      	subs	r3, r0, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e00f      	b.n	8001dc4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d80b      	bhi.n	8001dc2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	2301      	movs	r3, #1
 8001dae:	425b      	negs	r3, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 f8e2 	bl	8001f7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_InitTick+0x64>)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b003      	add	sp, #12
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	20000080 	.word	0x20000080
 8001dd0:	20000088 	.word	0x20000088
 8001dd4:	20000084 	.word	0x20000084

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_IncTick+0x1c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	001a      	movs	r2, r3
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_IncTick+0x20>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	18d2      	adds	r2, r2, r3
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_IncTick+0x20>)
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	20000088 	.word	0x20000088
 8001df8:	200000a8 	.word	0x200000a8

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b02      	ldr	r3, [pc, #8]	; (8001e0c <HAL_GetTick+0x10>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	200000a8 	.word	0x200000a8

08001e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff fff0 	bl	8001dfc <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	d005      	beq.n	8001e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_Delay+0x44>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	001a      	movs	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	189b      	adds	r3, r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	f7ff ffe0 	bl	8001dfc <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d8f7      	bhi.n	8001e38 <HAL_Delay+0x28>
  {
  }
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	20000088 	.word	0x20000088

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	0002      	movs	r2, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e6c:	d828      	bhi.n	8001ec0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e6e:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <__NVIC_SetPriority+0xd4>)
 8001e70:	1dfb      	adds	r3, r7, #7
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	33c0      	adds	r3, #192	; 0xc0
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	589b      	ldr	r3, [r3, r2]
 8001e7e:	1dfa      	adds	r2, r7, #7
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	0011      	movs	r1, r2
 8001e84:	2203      	movs	r2, #3
 8001e86:	400a      	ands	r2, r1
 8001e88:	00d2      	lsls	r2, r2, #3
 8001e8a:	21ff      	movs	r1, #255	; 0xff
 8001e8c:	4091      	lsls	r1, r2
 8001e8e:	000a      	movs	r2, r1
 8001e90:	43d2      	mvns	r2, r2
 8001e92:	401a      	ands	r2, r3
 8001e94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	22ff      	movs	r2, #255	; 0xff
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	4003      	ands	r3, r0
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eac:	481f      	ldr	r0, [pc, #124]	; (8001f2c <__NVIC_SetPriority+0xd4>)
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	33c0      	adds	r3, #192	; 0xc0
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ebe:	e031      	b.n	8001f24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <__NVIC_SetPriority+0xd8>)
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	230f      	movs	r3, #15
 8001eca:	400b      	ands	r3, r1
 8001ecc:	3b08      	subs	r3, #8
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3306      	adds	r3, #6
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	18d3      	adds	r3, r2, r3
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	1dfa      	adds	r2, r7, #7
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	0011      	movs	r1, r2
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	00d2      	lsls	r2, r2, #3
 8001ee6:	21ff      	movs	r1, #255	; 0xff
 8001ee8:	4091      	lsls	r1, r2
 8001eea:	000a      	movs	r2, r1
 8001eec:	43d2      	mvns	r2, r2
 8001eee:	401a      	ands	r2, r3
 8001ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	019b      	lsls	r3, r3, #6
 8001ef6:	22ff      	movs	r2, #255	; 0xff
 8001ef8:	401a      	ands	r2, r3
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	0018      	movs	r0, r3
 8001f00:	2303      	movs	r3, #3
 8001f02:	4003      	ands	r3, r0
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f08:	4809      	ldr	r0, [pc, #36]	; (8001f30 <__NVIC_SetPriority+0xd8>)
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	001c      	movs	r4, r3
 8001f10:	230f      	movs	r3, #15
 8001f12:	4023      	ands	r3, r4
 8001f14:	3b08      	subs	r3, #8
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	3306      	adds	r3, #6
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	18c3      	adds	r3, r0, r3
 8001f20:	3304      	adds	r3, #4
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b003      	add	sp, #12
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	045b      	lsls	r3, r3, #17
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d301      	bcc.n	8001f4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e010      	b.n	8001f6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <SysTick_Config+0x44>)
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	3a01      	subs	r2, #1
 8001f52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f54:	2301      	movs	r3, #1
 8001f56:	425b      	negs	r3, r3
 8001f58:	2103      	movs	r1, #3
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff ff7c 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x44>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x44>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	0018      	movs	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	210f      	movs	r1, #15
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	1c02      	adds	r2, r0, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	0011      	movs	r1, r2
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff ff5d 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff ffbf 	bl	8001f34 <SysTick_Config>
 8001fb6:	0003      	movs	r3, r0
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f000 fb6c 	bl	80026ac <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd4:	4bc8      	ldr	r3, [pc, #800]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	220c      	movs	r2, #12
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fde:	4bc6      	ldr	r3, [pc, #792]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	025b      	lsls	r3, r3, #9
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x36>
 8001ff4:	e07d      	b.n	80020f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d007      	beq.n	800200c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d112      	bne.n	8002028 <HAL_RCC_OscConfig+0x68>
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	025b      	lsls	r3, r3, #9
 8002008:	429a      	cmp	r2, r3
 800200a:	d10d      	bne.n	8002028 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	4bba      	ldr	r3, [pc, #744]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_RCC_OscConfig+0x5a>
 8002018:	e06a      	b.n	80020f0 <HAL_RCC_OscConfig+0x130>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d166      	bne.n	80020f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	f000 fb42 	bl	80026ac <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x84>
 8002034:	4bb0      	ldr	r3, [pc, #704]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4baf      	ldr	r3, [pc, #700]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	0249      	lsls	r1, r1, #9
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e027      	b.n	8002094 <HAL_RCC_OscConfig+0xd4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	23a0      	movs	r3, #160	; 0xa0
 800204a:	02db      	lsls	r3, r3, #11
 800204c:	429a      	cmp	r2, r3
 800204e:	d10e      	bne.n	800206e <HAL_RCC_OscConfig+0xae>
 8002050:	4ba9      	ldr	r3, [pc, #676]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4ba8      	ldr	r3, [pc, #672]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	02c9      	lsls	r1, r1, #11
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	4ba6      	ldr	r3, [pc, #664]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4ba5      	ldr	r3, [pc, #660]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0249      	lsls	r1, r1, #9
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e012      	b.n	8002094 <HAL_RCC_OscConfig+0xd4>
 800206e:	4ba2      	ldr	r3, [pc, #648]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4ba1      	ldr	r3, [pc, #644]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002074:	49a1      	ldr	r1, [pc, #644]	; (80022fc <HAL_RCC_OscConfig+0x33c>)
 8002076:	400a      	ands	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	4b9f      	ldr	r3, [pc, #636]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	025b      	lsls	r3, r3, #9
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4b9b      	ldr	r3, [pc, #620]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b9a      	ldr	r3, [pc, #616]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800208e:	499c      	ldr	r1, [pc, #624]	; (8002300 <HAL_RCC_OscConfig+0x340>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d014      	beq.n	80020c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff feae 	bl	8001dfc <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a6:	f7ff fea9 	bl	8001dfc <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	; 0x64
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e2f9      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020b8:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	4013      	ands	r3, r2
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0xe6>
 80020c4:	e015      	b.n	80020f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff fe99 	bl	8001dfc <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff fe94 	bl	8001dfc <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e2e4      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	029b      	lsls	r3, r3, #10
 80020ea:	4013      	ands	r3, r2
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x110>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d100      	bne.n	80020fe <HAL_RCC_OscConfig+0x13e>
 80020fc:	e099      	b.n	8002232 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	2220      	movs	r2, #32
 8002108:	4013      	ands	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800210c:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b79      	ldr	r3, [pc, #484]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002112:	2120      	movs	r1, #32
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	2220      	movs	r2, #32
 800211c:	4393      	bics	r3, r2
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b04      	cmp	r3, #4
 8002124:	d005      	beq.n	8002132 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	2b0c      	cmp	r3, #12
 800212a:	d13e      	bne.n	80021aa <HAL_RCC_OscConfig+0x1ea>
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d13b      	bne.n	80021aa <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002132:	4b71      	ldr	r3, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2204      	movs	r2, #4
 8002138:	4013      	ands	r3, r2
 800213a:	d004      	beq.n	8002146 <HAL_RCC_OscConfig+0x186>
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e2b2      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <HAL_RCC_OscConfig+0x344>)
 800214c:	4013      	ands	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	021a      	lsls	r2, r3, #8
 8002156:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002158:	430a      	orrs	r2, r1
 800215a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2209      	movs	r2, #9
 8002162:	4393      	bics	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800216e:	f000 fbeb 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8002172:	0001      	movs	r1, r0
 8002174:	4b60      	ldr	r3, [pc, #384]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	220f      	movs	r2, #15
 800217c:	4013      	ands	r3, r2
 800217e:	4a62      	ldr	r2, [pc, #392]	; (8002308 <HAL_RCC_OscConfig+0x348>)
 8002180:	5cd3      	ldrb	r3, [r2, r3]
 8002182:	000a      	movs	r2, r1
 8002184:	40da      	lsrs	r2, r3
 8002186:	4b61      	ldr	r3, [pc, #388]	; (800230c <HAL_RCC_OscConfig+0x34c>)
 8002188:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800218a:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_RCC_OscConfig+0x350>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2513      	movs	r5, #19
 8002190:	197c      	adds	r4, r7, r5
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff fdec 	bl	8001d70 <HAL_InitTick>
 8002198:	0003      	movs	r3, r0
 800219a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800219c:	197b      	adds	r3, r7, r5
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d046      	beq.n	8002232 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80021a4:	197b      	adds	r3, r7, r5
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	e280      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d027      	beq.n	8002200 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021b0:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2209      	movs	r2, #9
 80021b6:	4393      	bics	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff fe1b 	bl	8001dfc <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fe16 	bl	8001dfc <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e266      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2204      	movs	r2, #4
 80021e4:	4013      	ands	r3, r2
 80021e6:	d0f1      	beq.n	80021cc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a45      	ldr	r2, [pc, #276]	; (8002304 <HAL_RCC_OscConfig+0x344>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	021a      	lsls	r2, r3, #8
 80021f8:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	e018      	b.n	8002232 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002200:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002206:	2101      	movs	r1, #1
 8002208:	438a      	bics	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fdf6 	bl	8001dfc <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002216:	f7ff fdf1 	bl	8001dfc <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e241      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002228:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2204      	movs	r2, #4
 800222e:	4013      	ands	r3, r2
 8002230:	d1f1      	bne.n	8002216 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	4013      	ands	r3, r2
 800223a:	d100      	bne.n	800223e <HAL_RCC_OscConfig+0x27e>
 800223c:	e0a1      	b.n	8002382 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d140      	bne.n	80022c6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x29c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e227      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <HAL_RCC_OscConfig+0x354>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1a      	ldr	r2, [r3, #32]
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800226c:	430a      	orrs	r2, r1
 800226e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	0a19      	lsrs	r1, r3, #8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	061a      	lsls	r2, r3, #24
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002280:	430a      	orrs	r2, r1
 8002282:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	0b5b      	lsrs	r3, r3, #13
 800228a:	3301      	adds	r3, #1
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	0212      	lsls	r2, r2, #8
 8002290:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	210f      	movs	r1, #15
 800229a:	400b      	ands	r3, r1
 800229c:	491a      	ldr	r1, [pc, #104]	; (8002308 <HAL_RCC_OscConfig+0x348>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_RCC_OscConfig+0x34c>)
 80022a4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_RCC_OscConfig+0x350>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2513      	movs	r5, #19
 80022ac:	197c      	adds	r4, r7, r5
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7ff fd5e 	bl	8001d70 <HAL_InitTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80022b8:	197b      	adds	r3, r7, r5
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d060      	beq.n	8002382 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80022c0:	197b      	adds	r3, r7, r5
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	e1f2      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d03f      	beq.n	800234e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0049      	lsls	r1, r1, #1
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fd8e 	bl	8001dfc <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022e4:	e018      	b.n	8002318 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022e6:	f7ff fd89 	bl	8001dfc <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d911      	bls.n	8002318 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1d9      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
 80022f8:	40021000 	.word	0x40021000
 80022fc:	fffeffff 	.word	0xfffeffff
 8002300:	fffbffff 	.word	0xfffbffff
 8002304:	ffffe0ff 	.word	0xffffe0ff
 8002308:	080031c8 	.word	0x080031c8
 800230c:	20000080 	.word	0x20000080
 8002310:	20000084 	.word	0x20000084
 8002314:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002318:	4bc9      	ldr	r3, [pc, #804]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d0e0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002324:	4bc6      	ldr	r3, [pc, #792]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4ac6      	ldr	r2, [pc, #792]	; (8002644 <HAL_RCC_OscConfig+0x684>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	4bc3      	ldr	r3, [pc, #780]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002338:	4bc1      	ldr	r3, [pc, #772]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	0a19      	lsrs	r1, r3, #8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	061a      	lsls	r2, r3, #24
 8002346:	4bbe      	ldr	r3, [pc, #760]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	e019      	b.n	8002382 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800234e:	4bbc      	ldr	r3, [pc, #752]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4bbb      	ldr	r3, [pc, #748]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002354:	49bc      	ldr	r1, [pc, #752]	; (8002648 <HAL_RCC_OscConfig+0x688>)
 8002356:	400a      	ands	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff fd4f 	bl	8001dfc <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002364:	f7ff fd4a 	bl	8001dfc <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e19a      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002376:	4bb2      	ldr	r3, [pc, #712]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4013      	ands	r3, r2
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2208      	movs	r2, #8
 8002388:	4013      	ands	r3, r2
 800238a:	d036      	beq.n	80023fa <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d019      	beq.n	80023c8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002394:	4baa      	ldr	r3, [pc, #680]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002398:	4ba9      	ldr	r3, [pc, #676]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800239a:	2101      	movs	r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7ff fd2c 	bl	8001dfc <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023aa:	f7ff fd27 	bl	8001dfc <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e177      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023bc:	4ba0      	ldr	r3, [pc, #640]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80023be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c0:	2202      	movs	r2, #2
 80023c2:	4013      	ands	r3, r2
 80023c4:	d0f1      	beq.n	80023aa <HAL_RCC_OscConfig+0x3ea>
 80023c6:	e018      	b.n	80023fa <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c8:	4b9d      	ldr	r3, [pc, #628]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80023ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023cc:	4b9c      	ldr	r3, [pc, #624]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	438a      	bics	r2, r1
 80023d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7ff fd12 	bl	8001dfc <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023de:	f7ff fd0d 	bl	8001dfc <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e15d      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023f0:	4b93      	ldr	r3, [pc, #588]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80023f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d1f1      	bne.n	80023de <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2204      	movs	r2, #4
 8002400:	4013      	ands	r3, r2
 8002402:	d100      	bne.n	8002406 <HAL_RCC_OscConfig+0x446>
 8002404:	e0ae      	b.n	8002564 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002406:	2023      	movs	r0, #35	; 0x23
 8002408:	183b      	adds	r3, r7, r0
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	055b      	lsls	r3, r3, #21
 8002416:	4013      	ands	r3, r2
 8002418:	d109      	bne.n	800242e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800241c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241e:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	0549      	lsls	r1, r1, #21
 8002424:	430a      	orrs	r2, r1
 8002426:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002428:	183b      	adds	r3, r7, r0
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b87      	ldr	r3, [pc, #540]	; (800264c <HAL_RCC_OscConfig+0x68c>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d11a      	bne.n	8002470 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b84      	ldr	r3, [pc, #528]	; (800264c <HAL_RCC_OscConfig+0x68c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b83      	ldr	r3, [pc, #524]	; (800264c <HAL_RCC_OscConfig+0x68c>)
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0049      	lsls	r1, r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002448:	f7ff fcd8 	bl	8001dfc <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7ff fcd3 	bl	8001dfc <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e123      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	4b79      	ldr	r3, [pc, #484]	; (800264c <HAL_RCC_OscConfig+0x68c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4013      	ands	r3, r2
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	429a      	cmp	r2, r3
 800247a:	d107      	bne.n	800248c <HAL_RCC_OscConfig+0x4cc>
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800247e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	0049      	lsls	r1, r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	651a      	str	r2, [r3, #80]	; 0x50
 800248a:	e031      	b.n	80024f0 <HAL_RCC_OscConfig+0x530>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10c      	bne.n	80024ae <HAL_RCC_OscConfig+0x4ee>
 8002494:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002498:	4b69      	ldr	r3, [pc, #420]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800249a:	496b      	ldr	r1, [pc, #428]	; (8002648 <HAL_RCC_OscConfig+0x688>)
 800249c:	400a      	ands	r2, r1
 800249e:	651a      	str	r2, [r3, #80]	; 0x50
 80024a0:	4b67      	ldr	r3, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024a4:	4b66      	ldr	r3, [pc, #408]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024a6:	496a      	ldr	r1, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x690>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	651a      	str	r2, [r3, #80]	; 0x50
 80024ac:	e020      	b.n	80024f0 <HAL_RCC_OscConfig+0x530>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	23a0      	movs	r3, #160	; 0xa0
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d10e      	bne.n	80024d8 <HAL_RCC_OscConfig+0x518>
 80024ba:	4b61      	ldr	r3, [pc, #388]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024be:	4b60      	ldr	r3, [pc, #384]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	00c9      	lsls	r1, r1, #3
 80024c4:	430a      	orrs	r2, r1
 80024c6:	651a      	str	r2, [r3, #80]	; 0x50
 80024c8:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024cc:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	0049      	lsls	r1, r1, #1
 80024d2:	430a      	orrs	r2, r1
 80024d4:	651a      	str	r2, [r3, #80]	; 0x50
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0x530>
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024dc:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024de:	495a      	ldr	r1, [pc, #360]	; (8002648 <HAL_RCC_OscConfig+0x688>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	651a      	str	r2, [r3, #80]	; 0x50
 80024e4:	4b56      	ldr	r3, [pc, #344]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024e8:	4b55      	ldr	r3, [pc, #340]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80024ea:	4959      	ldr	r1, [pc, #356]	; (8002650 <HAL_RCC_OscConfig+0x690>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d015      	beq.n	8002524 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7ff fc80 	bl	8001dfc <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002500:	e009      	b.n	8002516 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7ff fc7b 	bl	8001dfc <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	4a51      	ldr	r2, [pc, #324]	; (8002654 <HAL_RCC_OscConfig+0x694>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0ca      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002516:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002518:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4013      	ands	r3, r2
 8002520:	d0ef      	beq.n	8002502 <HAL_RCC_OscConfig+0x542>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff fc6a 	bl	8001dfc <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800252c:	e009      	b.n	8002542 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7ff fc65 	bl	8001dfc <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a46      	ldr	r2, [pc, #280]	; (8002654 <HAL_RCC_OscConfig+0x694>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0b4      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d1ef      	bne.n	800252e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800254e:	2323      	movs	r3, #35	; 0x23
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800255a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800255e:	493e      	ldr	r1, [pc, #248]	; (8002658 <HAL_RCC_OscConfig+0x698>)
 8002560:	400a      	ands	r2, r1
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <HAL_RCC_OscConfig+0x5ae>
 800256c:	e09d      	b.n	80026aa <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d100      	bne.n	8002576 <HAL_RCC_OscConfig+0x5b6>
 8002574:	e076      	b.n	8002664 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	2b02      	cmp	r3, #2
 800257c:	d145      	bne.n	800260a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002584:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_RCC_OscConfig+0x69c>)
 8002586:	400a      	ands	r2, r1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff fc37 	bl	8001dfc <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff fc32 	bl	8001dfc <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e082      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	049b      	lsls	r3, r3, #18
 80025ae:	4013      	ands	r3, r2
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b2:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <HAL_RCC_OscConfig+0x6a0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	0019      	movs	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	431a      	orrs	r2, r3
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	0449      	lsls	r1, r1, #17
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fc0c 	bl	8001dfc <HAL_GetTick>
 80025e4:	0003      	movs	r3, r0
 80025e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ea:	f7ff fc07 	bl	8001dfc <HAL_GetTick>
 80025ee:	0002      	movs	r2, r0
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e057      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	049b      	lsls	r3, r3, #18
 8002604:	4013      	ands	r3, r2
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x62a>
 8002608:	e04f      	b.n	80026aa <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002610:	4912      	ldr	r1, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x69c>)
 8002612:	400a      	ands	r2, r1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fbf1 	bl	8001dfc <HAL_GetTick>
 800261a:	0003      	movs	r3, r0
 800261c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff fbec 	bl	8001dfc <HAL_GetTick>
 8002624:	0002      	movs	r2, r0
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e03c      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002632:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	049b      	lsls	r3, r3, #18
 800263a:	4013      	ands	r3, r2
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x660>
 800263e:	e034      	b.n	80026aa <HAL_RCC_OscConfig+0x6ea>
 8002640:	40021000 	.word	0x40021000
 8002644:	ffff1fff 	.word	0xffff1fff
 8002648:	fffffeff 	.word	0xfffffeff
 800264c:	40007000 	.word	0x40007000
 8002650:	fffffbff 	.word	0xfffffbff
 8002654:	00001388 	.word	0x00001388
 8002658:	efffffff 	.word	0xefffffff
 800265c:	feffffff 	.word	0xfeffffff
 8002660:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e01d      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_RCC_OscConfig+0x6f4>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	025b      	lsls	r3, r3, #9
 800267c:	401a      	ands	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	429a      	cmp	r2, r3
 8002684:	d10f      	bne.n	80026a6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	23f0      	movs	r3, #240	; 0xf0
 800268a:	039b      	lsls	r3, r3, #14
 800268c:	401a      	ands	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	23c0      	movs	r3, #192	; 0xc0
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	401a      	ands	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b00a      	add	sp, #40	; 0x28
 80026b2:	bdb0      	pop	{r4, r5, r7, pc}
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e128      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b96      	ldr	r3, [pc, #600]	; (8002928 <HAL_RCC_ClockConfig+0x270>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d91e      	bls.n	8002718 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b93      	ldr	r3, [pc, #588]	; (8002928 <HAL_RCC_ClockConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4393      	bics	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	4b90      	ldr	r3, [pc, #576]	; (8002928 <HAL_RCC_ClockConfig+0x270>)
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026ec:	f7ff fb86 	bl	8001dfc <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f4:	e009      	b.n	800270a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f6:	f7ff fb81 	bl	8001dfc <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	4a8a      	ldr	r2, [pc, #552]	; (800292c <HAL_RCC_ClockConfig+0x274>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e109      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b87      	ldr	r3, [pc, #540]	; (8002928 <HAL_RCC_ClockConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2201      	movs	r2, #1
 8002710:	4013      	ands	r3, r2
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002722:	4b83      	ldr	r3, [pc, #524]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	22f0      	movs	r2, #240	; 0xf0
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	4b7f      	ldr	r3, [pc, #508]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 8002732:	430a      	orrs	r2, r1
 8002734:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	d100      	bne.n	8002742 <HAL_RCC_ClockConfig+0x8a>
 8002740:	e089      	b.n	8002856 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800274a:	4b79      	ldr	r3, [pc, #484]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	4013      	ands	r3, r2
 8002754:	d120      	bne.n	8002798 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0e1      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002762:	4b73      	ldr	r3, [pc, #460]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	049b      	lsls	r3, r3, #18
 800276a:	4013      	ands	r3, r2
 800276c:	d114      	bne.n	8002798 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0d5      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d106      	bne.n	8002788 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800277a:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2204      	movs	r2, #4
 8002780:	4013      	ands	r3, r2
 8002782:	d109      	bne.n	8002798 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0ca      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002788:	4b69      	ldr	r3, [pc, #420]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4013      	ands	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0c2      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002798:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2203      	movs	r2, #3
 800279e:	4393      	bics	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4b62      	ldr	r3, [pc, #392]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7ff fb26 	bl	8001dfc <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d111      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f7ff fb1d 	bl	8001dfc <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_RCC_ClockConfig+0x274>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0a5      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d2:	4b57      	ldr	r3, [pc, #348]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	220c      	movs	r2, #12
 80027d8:	4013      	ands	r3, r2
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d1ef      	bne.n	80027be <HAL_RCC_ClockConfig+0x106>
 80027de:	e03a      	b.n	8002856 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d111      	bne.n	800280c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e8:	e009      	b.n	80027fe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ea:	f7ff fb07 	bl	8001dfc <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	4a4d      	ldr	r2, [pc, #308]	; (800292c <HAL_RCC_ClockConfig+0x274>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e08f      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027fe:	4b4c      	ldr	r3, [pc, #304]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	220c      	movs	r2, #12
 8002804:	4013      	ands	r3, r2
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_ClockConfig+0x132>
 800280a:	e024      	b.n	8002856 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d11b      	bne.n	800284c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002814:	e009      	b.n	800282a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002816:	f7ff faf1 	bl	8001dfc <HAL_GetTick>
 800281a:	0002      	movs	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_RCC_ClockConfig+0x274>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e079      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	220c      	movs	r2, #12
 8002830:	4013      	ands	r3, r2
 8002832:	2b04      	cmp	r3, #4
 8002834:	d1ef      	bne.n	8002816 <HAL_RCC_ClockConfig+0x15e>
 8002836:	e00e      	b.n	8002856 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7ff fae0 	bl	8001dfc <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	4a3a      	ldr	r2, [pc, #232]	; (800292c <HAL_RCC_ClockConfig+0x274>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e068      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800284c:	4b38      	ldr	r3, [pc, #224]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	220c      	movs	r2, #12
 8002852:	4013      	ands	r3, r2
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_RCC_ClockConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d21e      	bcs.n	80028a2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002864:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_RCC_ClockConfig+0x270>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	4393      	bics	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <HAL_RCC_ClockConfig+0x270>)
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002876:	f7ff fac1 	bl	8001dfc <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	e009      	b.n	8002894 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7ff fabc 	bl	8001dfc <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	4a28      	ldr	r2, [pc, #160]	; (800292c <HAL_RCC_ClockConfig+0x274>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e044      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCC_ClockConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	4013      	ands	r3, r2
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d1ee      	bne.n	8002880 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	d009      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_RCC_ClockConfig+0x27c>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2208      	movs	r2, #8
 80028c6:	4013      	ands	r3, r2
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <HAL_RCC_ClockConfig+0x280>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	00da      	lsls	r2, r3, #3
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028e0:	f000 f832 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 80028e4:	0001      	movs	r1, r0
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_ClockConfig+0x278>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	220f      	movs	r2, #15
 80028ee:	4013      	ands	r3, r2
 80028f0:	4a12      	ldr	r2, [pc, #72]	; (800293c <HAL_RCC_ClockConfig+0x284>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	000a      	movs	r2, r1
 80028f6:	40da      	lsrs	r2, r3
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_RCC_ClockConfig+0x288>)
 80028fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCC_ClockConfig+0x28c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	250b      	movs	r5, #11
 8002902:	197c      	adds	r4, r7, r5
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff fa33 	bl	8001d70 <HAL_InitTick>
 800290a:	0003      	movs	r3, r0
 800290c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800290e:	197b      	adds	r3, r7, r5
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002916:	197b      	adds	r3, r7, r5
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	e000      	b.n	800291e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bdb0      	pop	{r4, r5, r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40022000 	.word	0x40022000
 800292c:	00001388 	.word	0x00001388
 8002930:	40021000 	.word	0x40021000
 8002934:	fffff8ff 	.word	0xfffff8ff
 8002938:	ffffc7ff 	.word	0xffffc7ff
 800293c:	080031c8 	.word	0x080031c8
 8002940:	20000080 	.word	0x20000080
 8002944:	20000084 	.word	0x20000084

08002948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	b5b0      	push	{r4, r5, r7, lr}
 800294a:	b08e      	sub	sp, #56	; 0x38
 800294c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x138>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002956:	230c      	movs	r3, #12
 8002958:	4013      	ands	r3, r2
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d014      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x40>
 800295e:	d900      	bls.n	8002962 <HAL_RCC_GetSysClockFreq+0x1a>
 8002960:	e07b      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x112>
 8002962:	2b04      	cmp	r3, #4
 8002964:	d002      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x24>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x3a>
 800296a:	e076      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800296c:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x138>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2210      	movs	r2, #16
 8002972:	4013      	ands	r3, r2
 8002974:	d002      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002976:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800297a:	e07c      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800297c:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x140>)
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002980:	e079      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002982:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x144>)
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002986:	e076      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	0c9a      	lsrs	r2, r3, #18
 800298c:	230f      	movs	r3, #15
 800298e:	401a      	ands	r2, r3
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x148>)
 8002992:	5c9b      	ldrb	r3, [r3, r2]
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	0d9a      	lsrs	r2, r3, #22
 800299a:	2303      	movs	r3, #3
 800299c:	4013      	ands	r3, r2
 800299e:	3301      	adds	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x138>)
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	025b      	lsls	r3, r3, #9
 80029aa:	4013      	ands	r3, r2
 80029ac:	d01a      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	4a35      	ldr	r2, [pc, #212]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x144>)
 80029b8:	2300      	movs	r3, #0
 80029ba:	69b8      	ldr	r0, [r7, #24]
 80029bc:	69f9      	ldr	r1, [r7, #28]
 80029be:	f7fd fc4f 	bl	8000260 <__aeabi_lmul>
 80029c2:	0002      	movs	r2, r0
 80029c4:	000b      	movs	r3, r1
 80029c6:	0010      	movs	r0, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f7fd fc23 	bl	8000220 <__aeabi_uldivmod>
 80029da:	0002      	movs	r2, r0
 80029dc:	000b      	movs	r3, r1
 80029de:	0013      	movs	r3, r2
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
 80029e2:	e037      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029e4:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x138>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	d01a      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4a23      	ldr	r2, [pc, #140]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029f8:	2300      	movs	r3, #0
 80029fa:	68b8      	ldr	r0, [r7, #8]
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	f7fd fc2f 	bl	8000260 <__aeabi_lmul>
 8002a02:	0002      	movs	r2, r0
 8002a04:	000b      	movs	r3, r1
 8002a06:	0010      	movs	r0, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f7fd fc03 	bl	8000220 <__aeabi_uldivmod>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	000b      	movs	r3, r1
 8002a1e:	0013      	movs	r3, r2
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
 8002a22:	e017      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	0018      	movs	r0, r3
 8002a28:	2300      	movs	r3, #0
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f7fd fc16 	bl	8000260 <__aeabi_lmul>
 8002a34:	0002      	movs	r2, r0
 8002a36:	000b      	movs	r3, r1
 8002a38:	0010      	movs	r0, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	001c      	movs	r4, r3
 8002a40:	2300      	movs	r3, #0
 8002a42:	001d      	movs	r5, r3
 8002a44:	0022      	movs	r2, r4
 8002a46:	002b      	movs	r3, r5
 8002a48:	f7fd fbea 	bl	8000220 <__aeabi_uldivmod>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	000b      	movs	r3, r1
 8002a50:	0013      	movs	r3, r2
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a58:	e00d      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0b5b      	lsrs	r3, r3, #13
 8002a60:	2207      	movs	r2, #7
 8002a62:	4013      	ands	r3, r2
 8002a64:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	0212      	lsls	r2, r2, #8
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a74:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b00e      	add	sp, #56	; 0x38
 8002a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	003d0900 	.word	0x003d0900
 8002a88:	00f42400 	.word	0x00f42400
 8002a8c:	007a1200 	.word	0x007a1200
 8002a90:	080031d8 	.word	0x080031d8

08002a94 <LL_GPIO_SetPinMode>:
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	435b      	muls	r3, r3
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	0013      	movs	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	435b      	muls	r3, r3
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	434b      	muls	r3, r1
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}

08002acc <LL_GPIO_SetPinOutputType>:
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	43d2      	mvns	r2, r2
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	434b      	muls	r3, r1
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <LL_GPIO_SetPinSpeed>:
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6899      	ldr	r1, [r3, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	435b      	muls	r3, r3
 8002b0a:	001a      	movs	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	189b      	adds	r3, r3, r2
 8002b12:	43db      	mvns	r3, r3
 8002b14:	400b      	ands	r3, r1
 8002b16:	001a      	movs	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	435b      	muls	r3, r3
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	434b      	muls	r3, r1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	609a      	str	r2, [r3, #8]
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b004      	add	sp, #16
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <LL_GPIO_SetPinPull>:
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	435b      	muls	r3, r3
 8002b42:	001a      	movs	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	189b      	adds	r3, r3, r2
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	001a      	movs	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	435b      	muls	r3, r3
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	434b      	muls	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	60da      	str	r2, [r3, #12]
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <LL_GPIO_SetAFPin_0_7>:
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a19      	ldr	r1, [r3, #32]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	435b      	muls	r3, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4353      	muls	r3, r2
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	435a      	muls	r2, r3
 8002b82:	0013      	movs	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	435b      	muls	r3, r3
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	434b      	muls	r3, r1
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	434b      	muls	r3, r1
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	434b      	muls	r3, r1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	621a      	str	r2, [r3, #32]
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}

08002bac <LL_GPIO_SetAFPin_8_15>:
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	0a12      	lsrs	r2, r2, #8
 8002bc4:	4353      	muls	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	0a12      	lsrs	r2, r2, #8
 8002bca:	4353      	muls	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	0a12      	lsrs	r2, r2, #8
 8002bd0:	435a      	muls	r2, r3
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	400b      	ands	r3, r1
 8002bdc:	001a      	movs	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	0a09      	lsrs	r1, r1, #8
 8002be6:	434b      	muls	r3, r1
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	0a09      	lsrs	r1, r1, #8
 8002bec:	434b      	muls	r3, r1
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	0a09      	lsrs	r1, r1, #8
 8002bf2:	434b      	muls	r3, r1
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	434b      	muls	r3, r1
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b004      	add	sp, #16
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002c18:	e048      	b.n	8002cac <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4091      	lsls	r1, r2
 8002c24:	000a      	movs	r2, r1
 8002c26:	4013      	ands	r3, r2
 8002c28:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d03a      	beq.n	8002ca6 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d003      	beq.n	8002c40 <LL_GPIO_Init+0x3a>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d10e      	bne.n	8002c5e <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff ff54 	bl	8002af6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7ff ff37 	bl	8002acc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff ff61 	bl	8002b2e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d111      	bne.n	8002c98 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2bff      	cmp	r3, #255	; 0xff
 8002c78:	d807      	bhi.n	8002c8a <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff ff6f 	bl	8002b66 <LL_GPIO_SetAFPin_0_7>
 8002c88:	e006      	b.n	8002c98 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff ff8a 	bl	8002bac <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff fef7 	bl	8002a94 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	40da      	lsrs	r2, r3
 8002cb4:	1e13      	subs	r3, r2, #0
 8002cb6:	d1b0      	bne.n	8002c1a <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <LL_TIM_SetPrescaler>:
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <LL_TIM_SetAutoReload>:
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <LL_TIM_OC_SetCompareCH1>:
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b002      	add	sp, #8
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <LL_TIM_OC_SetCompareCH2>:
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b002      	add	sp, #8
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <LL_TIM_OC_SetCompareCH3>:
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b002      	add	sp, #8
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <LL_TIM_OC_SetCompareCH4>:
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	615a      	str	r2, [r3, #20]
}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	05db      	lsls	r3, r3, #23
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d003      	beq.n	8002d92 <LL_TIM_Init+0x22>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <LL_TIM_Init+0x88>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d107      	bne.n	8002da2 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2270      	movs	r2, #112	; 0x70
 8002d96:	4393      	bics	r3, r2
 8002d98:	001a      	movs	r2, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	05db      	lsls	r3, r3, #23
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d003      	beq.n	8002db4 <LL_TIM_Init+0x44>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <LL_TIM_Init+0x88>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d106      	bne.n	8002dc2 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <LL_TIM_Init+0x8c>)
 8002db8:	401a      	ands	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0011      	movs	r1, r2
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff ff82 	bl	8002cda <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	001a      	movs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff ff6e 	bl	8002cc2 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff ffb2 	bl	8002d52 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b004      	add	sp, #16
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	fffffcff 	.word	0xfffffcff

08002e00 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002e0c:	2317      	movs	r3, #23
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	015b      	lsls	r3, r3, #5
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d036      	beq.n	8002e8c <LL_TIM_OC_Init+0x8c>
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d83c      	bhi.n	8002ea2 <LL_TIM_OC_Init+0xa2>
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d021      	beq.n	8002e76 <LL_TIM_OC_Init+0x76>
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d832      	bhi.n	8002ea2 <LL_TIM_OC_Init+0xa2>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d003      	beq.n	8002e4a <LL_TIM_OC_Init+0x4a>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d00b      	beq.n	8002e60 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002e48:	e02b      	b.n	8002ea2 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e4a:	2317      	movs	r3, #23
 8002e4c:	18fc      	adds	r4, r7, r3
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	0011      	movs	r1, r2
 8002e54:	0018      	movs	r0, r3
 8002e56:	f000 f82c 	bl	8002eb2 <OC1Config>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	7023      	strb	r3, [r4, #0]
      break;
 8002e5e:	e021      	b.n	8002ea4 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e60:	2317      	movs	r3, #23
 8002e62:	18fc      	adds	r4, r7, r3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f868 	bl	8002f40 <OC2Config>
 8002e70:	0003      	movs	r3, r0
 8002e72:	7023      	strb	r3, [r4, #0]
      break;
 8002e74:	e016      	b.n	8002ea4 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e76:	2317      	movs	r3, #23
 8002e78:	18fc      	adds	r4, r7, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 f8a9 	bl	8002fd8 <OC3Config>
 8002e86:	0003      	movs	r3, r0
 8002e88:	7023      	strb	r3, [r4, #0]
      break;
 8002e8a:	e00b      	b.n	8002ea4 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e8c:	2317      	movs	r3, #23
 8002e8e:	18fc      	adds	r4, r7, r3
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	0011      	movs	r1, r2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f8e8 	bl	800306c <OC4Config>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	7023      	strb	r3, [r4, #0]
      break;
 8002ea0:	e000      	b.n	8002ea4 <LL_TIM_OC_Init+0xa4>
      break;
 8002ea2:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002ea4:	2317      	movs	r3, #23
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	781b      	ldrb	r3, [r3, #0]
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b007      	add	sp, #28
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2270      	movs	r2, #112	; 0x70
 8002ee8:	4393      	bics	r3, r2
 8002eea:	001a      	movs	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	4393      	bics	r3, r2
 8002efa:	001a      	movs	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4393      	bics	r3, r2
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0011      	movs	r1, r2
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff fee2 	bl	8002cf2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b006      	add	sp, #24
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	2210      	movs	r2, #16
 8002f50:	4393      	bics	r3, r2
 8002f52:	001a      	movs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <OC2Config+0x90>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <OC2Config+0x94>)
 8002f76:	401a      	ands	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2220      	movs	r2, #32
 8002f86:	4393      	bics	r3, r2
 8002f88:	001a      	movs	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2210      	movs	r2, #16
 8002f98:	4393      	bics	r3, r2
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0011      	movs	r1, r2
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7ff fea5 	bl	8002d0a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b006      	add	sp, #24
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	fffffcff 	.word	0xfffffcff
 8002fd4:	ffff8fff 	.word	0xffff8fff

08002fd8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <OC3Config+0x8c>)
 8002fe8:	401a      	ands	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2203      	movs	r2, #3
 8003004:	4393      	bics	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2270      	movs	r2, #112	; 0x70
 800300c:	4393      	bics	r3, r2
 800300e:	001a      	movs	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <OC3Config+0x90>)
 800301c:	401a      	ands	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <OC3Config+0x8c>)
 800302c:	401a      	ands	r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0011      	movs	r1, r2
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff fe68 	bl	8002d22 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b006      	add	sp, #24
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	fffffeff 	.word	0xfffffeff
 8003068:	fffffdff 	.word	0xfffffdff

0800306c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <OC4Config+0x8c>)
 800307c:	401a      	ands	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a19      	ldr	r2, [pc, #100]	; (80030fc <OC4Config+0x90>)
 8003098:	4013      	ands	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a18      	ldr	r2, [pc, #96]	; (8003100 <OC4Config+0x94>)
 80030a0:	401a      	ands	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	4a15      	ldr	r2, [pc, #84]	; (8003104 <OC4Config+0x98>)
 80030b0:	401a      	ands	r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	031b      	lsls	r3, r3, #12
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <OC4Config+0x8c>)
 80030c0:	401a      	ands	r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	031b      	lsls	r3, r3, #12
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0011      	movs	r1, r2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7ff fe2a 	bl	8002d3a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b006      	add	sp, #24
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	ffffefff 	.word	0xffffefff
 80030fc:	fffffcff 	.word	0xfffffcff
 8003100:	ffff8fff 	.word	0xffff8fff
 8003104:	ffffdfff 	.word	0xffffdfff

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	2600      	movs	r6, #0
 800310c:	4d0c      	ldr	r5, [pc, #48]	; (8003140 <__libc_init_array+0x38>)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 8003110:	1b64      	subs	r4, r4, r5
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	42a6      	cmp	r6, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	2600      	movs	r6, #0
 800311a:	f000 f821 	bl	8003160 <_init>
 800311e:	4d0a      	ldr	r5, [pc, #40]	; (8003148 <__libc_init_array+0x40>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <__libc_init_array+0x44>)
 8003122:	1b64      	subs	r4, r4, r5
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	42a6      	cmp	r6, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	00b3      	lsls	r3, r6, #2
 800312e:	58eb      	ldr	r3, [r5, r3]
 8003130:	4798      	blx	r3
 8003132:	3601      	adds	r6, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	00b3      	lsls	r3, r6, #2
 8003138:	58eb      	ldr	r3, [r5, r3]
 800313a:	4798      	blx	r3
 800313c:	3601      	adds	r6, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	080031ec 	.word	0x080031ec
 8003144:	080031ec 	.word	0x080031ec
 8003148:	080031ec 	.word	0x080031ec
 800314c:	080031f0 	.word	0x080031f0

08003150 <memset>:
 8003150:	0003      	movs	r3, r0
 8003152:	1882      	adds	r2, r0, r2
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	7019      	strb	r1, [r3, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
