
ESC-LL001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080025dc  080025dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002888  08002888  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002890  08002890  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002890  08002890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  080028a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080028a4  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000447f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001096  00000000  00000000  000244b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  00025550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00025a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107c7  00000000  00000000  00025f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a63  00000000  00000000  000366cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000619d6  00000000  00000000  0003c132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009db08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001188  00000000  00000000  0009db5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025c4 	.word	0x080025c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080025c4 	.word	0x080025c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2201      	movs	r2, #1
 80004aa:	431a      	orrs	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2280      	movs	r2, #128	; 0x80
 80004c6:	4393      	bics	r3, r2
 80004c8:	001a      	movs	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
 80004de:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6a1a      	ldr	r2, [r3, #32]
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	621a      	str	r2, [r3, #32]
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b002      	add	sp, #8
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d00d      	beq.n	8000520 <LL_TIM_OC_DisableFast+0x2c>
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	2b10      	cmp	r3, #16
 8000508:	d008      	beq.n	800051c <LL_TIM_OC_DisableFast+0x28>
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <LL_TIM_OC_DisableFast+0x24>
 8000514:	2304      	movs	r3, #4
 8000516:	e004      	b.n	8000522 <LL_TIM_OC_DisableFast+0x2e>
 8000518:	2306      	movs	r3, #6
 800051a:	e002      	b.n	8000522 <LL_TIM_OC_DisableFast+0x2e>
 800051c:	2302      	movs	r3, #2
 800051e:	e000      	b.n	8000522 <LL_TIM_OC_DisableFast+0x2e>
 8000520:	2300      	movs	r3, #0
 8000522:	200f      	movs	r0, #15
 8000524:	183a      	adds	r2, r7, r0
 8000526:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3318      	adds	r3, #24
 800052c:	0019      	movs	r1, r3
 800052e:	183b      	adds	r3, r7, r0
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <LL_TIM_OC_DisableFast+0x68>)
 8000534:	5cd3      	ldrb	r3, [r2, r3]
 8000536:	18cb      	adds	r3, r1, r3
 8000538:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	183a      	adds	r2, r7, r0
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	4907      	ldr	r1, [pc, #28]	; (8000560 <LL_TIM_OC_DisableFast+0x6c>)
 8000544:	5c8a      	ldrb	r2, [r1, r2]
 8000546:	0011      	movs	r1, r2
 8000548:	2204      	movs	r2, #4
 800054a:	408a      	lsls	r2, r1
 800054c:	43d2      	mvns	r2, r2
 800054e:	401a      	ands	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	601a      	str	r2, [r3, #0]

}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b004      	add	sp, #16
 800055a:	bd80      	pop	{r7, pc}
 800055c:	080025dc 	.word	0x080025dc
 8000560:	080025e4 	.word	0x080025e4

08000564 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d00d      	beq.n	8000590 <LL_TIM_OC_EnablePreload+0x2c>
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b10      	cmp	r3, #16
 8000578:	d008      	beq.n	800058c <LL_TIM_OC_EnablePreload+0x28>
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	429a      	cmp	r2, r3
 8000582:	d101      	bne.n	8000588 <LL_TIM_OC_EnablePreload+0x24>
 8000584:	2304      	movs	r3, #4
 8000586:	e004      	b.n	8000592 <LL_TIM_OC_EnablePreload+0x2e>
 8000588:	2306      	movs	r3, #6
 800058a:	e002      	b.n	8000592 <LL_TIM_OC_EnablePreload+0x2e>
 800058c:	2302      	movs	r3, #2
 800058e:	e000      	b.n	8000592 <LL_TIM_OC_EnablePreload+0x2e>
 8000590:	2300      	movs	r3, #0
 8000592:	200f      	movs	r0, #15
 8000594:	183a      	adds	r2, r7, r0
 8000596:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3318      	adds	r3, #24
 800059c:	0019      	movs	r1, r3
 800059e:	183b      	adds	r3, r7, r0
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <LL_TIM_OC_EnablePreload+0x68>)
 80005a4:	5cd3      	ldrb	r3, [r2, r3]
 80005a6:	18cb      	adds	r3, r1, r3
 80005a8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	183b      	adds	r3, r7, r0
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4907      	ldr	r1, [pc, #28]	; (80005d0 <LL_TIM_OC_EnablePreload+0x6c>)
 80005b4:	5ccb      	ldrb	r3, [r1, r3]
 80005b6:	0019      	movs	r1, r3
 80005b8:	2308      	movs	r3, #8
 80005ba:	408b      	lsls	r3, r1
 80005bc:	431a      	orrs	r2, r3
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b004      	add	sp, #16
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	080025dc 	.word	0x080025dc
 80005d0:	080025e4 	.word	0x080025e4

080005d4 <LL_TIM_OC_DisablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00d      	beq.n	8000600 <LL_TIM_OC_DisablePreload+0x2c>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2b10      	cmp	r3, #16
 80005e8:	d008      	beq.n	80005fc <LL_TIM_OC_DisablePreload+0x28>
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d101      	bne.n	80005f8 <LL_TIM_OC_DisablePreload+0x24>
 80005f4:	2304      	movs	r3, #4
 80005f6:	e004      	b.n	8000602 <LL_TIM_OC_DisablePreload+0x2e>
 80005f8:	2306      	movs	r3, #6
 80005fa:	e002      	b.n	8000602 <LL_TIM_OC_DisablePreload+0x2e>
 80005fc:	2302      	movs	r3, #2
 80005fe:	e000      	b.n	8000602 <LL_TIM_OC_DisablePreload+0x2e>
 8000600:	2300      	movs	r3, #0
 8000602:	200f      	movs	r0, #15
 8000604:	183a      	adds	r2, r7, r0
 8000606:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3318      	adds	r3, #24
 800060c:	0019      	movs	r1, r3
 800060e:	183b      	adds	r3, r7, r0
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LL_TIM_OC_DisablePreload+0x68>)
 8000614:	5cd3      	ldrb	r3, [r2, r3]
 8000616:	18cb      	adds	r3, r1, r3
 8000618:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	183a      	adds	r2, r7, r0
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	4907      	ldr	r1, [pc, #28]	; (8000640 <LL_TIM_OC_DisablePreload+0x6c>)
 8000624:	5c8a      	ldrb	r2, [r1, r2]
 8000626:	0011      	movs	r1, r2
 8000628:	2208      	movs	r2, #8
 800062a:	408a      	lsls	r2, r1
 800062c:	43d2      	mvns	r2, r2
 800062e:	401a      	ands	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	601a      	str	r2, [r3, #0]
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b004      	add	sp, #16
 800063a:	bd80      	pop	{r7, pc}
 800063c:	080025dc 	.word	0x080025dc
 8000640:	080025e4 	.word	0x080025e4

08000644 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}

0800065c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}

08000674 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b002      	add	sp, #8
 800068a:	bd80      	pop	{r7, pc}

0800068c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	2270      	movs	r2, #112	; 0x70
 800069c:	4393      	bics	r3, r2
 800069e:	001a      	movs	r2, r3
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	431a      	orrs	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	605a      	str	r2, [r3, #4]
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b002      	add	sp, #8
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	4393      	bics	r3, r2
 80006c0:	001a      	movs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	609a      	str	r2, [r3, #8]
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}

080006ce <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	619a      	str	r2, [r3, #24]
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <LL_APB1_GRP1_EnableClock+0x28>)
 800070a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <LL_APB1_GRP1_EnableClock+0x28>)
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	430a      	orrs	r2, r1
 8000712:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <LL_APB1_GRP1_EnableClock+0x28>)
 8000716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4013      	ands	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b004      	add	sp, #16
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000

0800072c <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <LL_IOP_GRP1_EnableClock+0x28>)
 8000736:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <LL_IOP_GRP1_EnableClock+0x28>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	430a      	orrs	r2, r1
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <LL_IOP_GRP1_EnableClock+0x28>)
 8000742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b004      	add	sp, #16
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000

08000758 <changeFreq>:
void changeFreq(unsigned long freq) {
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	b091      	sub	sp, #68	; 0x44
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000760:	2630      	movs	r6, #48	; 0x30
 8000762:	19bb      	adds	r3, r7, r6
 8000764:	0018      	movs	r0, r3
 8000766:	2310      	movs	r3, #16
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f001 ff22 	bl	80025b4 <memset>
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8000770:	2520      	movs	r5, #32
 8000772:	197b      	adds	r3, r7, r5
 8000774:	0018      	movs	r0, r3
 8000776:	2310      	movs	r3, #16
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f001 ff1a 	bl	80025b4 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000780:	2408      	movs	r4, #8
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	2318      	movs	r3, #24
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f001 ff12 	bl	80025b4 <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ffb5 	bl	8000700 <LL_APB1_GRP1_EnableClock>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	TIM_InitStruct.Prescaler = (125000 / freq) - 1;
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	487f      	ldr	r0, [pc, #508]	; (8000998 <changeFreq+0x240>)
 800079a:	f7ff fcb5 	bl	8000108 <__udivsi3>
 800079e:	0003      	movs	r3, r0
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	19bb      	adds	r3, r7, r6
 80007a8:	801a      	strh	r2, [r3, #0]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80007aa:	19bb      	adds	r3, r7, r6
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Autoreload = 255;
 80007b0:	19bb      	adds	r3, r7, r6
 80007b2:	22ff      	movs	r2, #255	; 0xff
 80007b4:	609a      	str	r2, [r3, #8]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80007b6:	19bb      	adds	r3, r7, r6
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
	LL_TIM_Init(TIM2, &TIM_InitStruct);
 80007bc:	19ba      	adds	r2, r7, r6
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 fd05 	bl	80021d4 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM2);
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fe72 	bl	80004b8 <LL_TIM_DisableARRPreload>
	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	2101      	movs	r1, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff fec2 	bl	8000564 <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80007e0:	197b      	adds	r3, r7, r5
 80007e2:	2260      	movs	r2, #96	; 0x60
 80007e4:	601a      	str	r2, [r3, #0]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80007e6:	197b      	adds	r3, r7, r5
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
	TIM_OC_InitStruct.CompareValue = 0;
 80007ec:	197b      	adds	r3, r7, r5
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80007f2:	197b      	adds	r3, r7, r5
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80007f8:	197a      	adds	r2, r7, r5
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	2101      	movs	r1, #1
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fd2f 	bl	8002264 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2101      	movs	r1, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff fe71 	bl	80004f4 <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	005a      	lsls	r2, r3, #1
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff fea1 	bl	8000564 <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000822:	197a      	adds	r2, r7, r5
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	0059      	lsls	r1, r3, #1
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fd19 	bl	8002264 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	005a      	lsls	r2, r3, #1
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff fe59 	bl	80004f4 <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	015a      	lsls	r2, r3, #5
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff fe89 	bl	8000564 <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000852:	197a      	adds	r2, r7, r5
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	0159      	lsls	r1, r3, #5
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fd01 	bl	8002264 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	015a      	lsls	r2, r3, #5
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff fe41 	bl	80004f4 <LL_TIM_OC_DisableFast>
	LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2100      	movs	r1, #0
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff07 	bl	800068c <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM2);
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff ff14 	bl	80006b0 <LL_TIM_DisableMasterSlaveMode>
	LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	2101      	movs	r1, #1
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff fea0 	bl	80005d4 <LL_TIM_OC_DisablePreload>
	LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	005a      	lsls	r2, r3, #1
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff fe98 	bl	80005d4 <LL_TIM_OC_DisablePreload>
	LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	015a      	lsls	r2, r3, #5
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff fe90 	bl	80005d4 <LL_TIM_OC_DisablePreload>
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff ff39 	bl	800072c <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80008ba:	2002      	movs	r0, #2
 80008bc:	f7ff ff36 	bl	800072c <LL_IOP_GRP1_EnableClock>
	/**TIM2 GPIO Configuration
	 PA5   ------> TIM2_CH1
	 PB1   ------> TIM2_CH4
	 PA10   ------> TIM2_CH3
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2220      	movs	r2, #32
 80008c4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2202      	movs	r2, #2
 80008ca:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2205      	movs	r2, #5
 80008e2:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	193a      	adds	r2, r7, r4
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 fbbc 	bl	800206a <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2202      	movs	r2, #2
 80008f6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2202      	movs	r2, #2
 80008fc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2205      	movs	r2, #5
 8000914:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	193b      	adds	r3, r7, r4
 8000918:	4a20      	ldr	r2, [pc, #128]	; (800099c <changeFreq+0x244>)
 800091a:	0019      	movs	r1, r3
 800091c:	0010      	movs	r0, r2
 800091e:	f001 fba4 	bl	800206a <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000922:	0021      	movs	r1, r4
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	00d2      	lsls	r2, r2, #3
 800092a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2202      	movs	r2, #2
 8000930:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2205      	movs	r2, #5
 8000948:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	187a      	adds	r2, r7, r1
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fb89 	bl	800206a <LL_GPIO_Init>

	LL_TIM_EnableCounter(TIM2);
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fd9d 	bl	800049c <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	005a      	lsls	r2, r3, #1
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fdb2 	bl	80004d6 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH4);
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff fdaa 	bl	80004d6 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	2101      	movs	r1, #1
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff fda4 	bl	80004d6 <LL_TIM_CC_EnableChannel>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b011      	add	sp, #68	; 0x44
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	0001e848 	.word	0x0001e848
 800099c:	50000400 	.word	0x50000400

080009a0 <sekuta>:

void sekuta(int sek, int power) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	if (sek == 0) {  // u-v
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d128      	bne.n	8000a02 <sekuta+0x62>
		LL_TIM_OC_SetCompareCH3(TIM2, power);
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fe4f 	bl	800065c <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, 1);
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2101      	movs	r1, #1
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fe55 	bl	8000674 <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, 1);
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2101      	movs	r1, #1
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fe37 	bl	8000644 <LL_TIM_OC_SetCompareCH1>

		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	009a      	lsls	r2, r3, #2
 80009da:	23a0      	movs	r3, #160	; 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff fe74 	bl	80006ce <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	01db      	lsls	r3, r3, #7
 80009ea:	4a75      	ldr	r2, [pc, #468]	; (8000bc0 <sekuta+0x220>)
 80009ec:	0019      	movs	r1, r3
 80009ee:	0010      	movs	r0, r2
 80009f0:	f7ff fe6d 	bl	80006ce <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 80009f4:	23a0      	movs	r3, #160	; 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fe73 	bl	80006e6 <LL_GPIO_ResetOutputPin>

		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);    //! U
		LL_GPIO_ResetOutputPin(GPIOC, GPIO_PIN_14);   //! V
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_6);  //! W
	}
}
 8000a00:	e0da      	b.n	8000bb8 <sekuta+0x218>
	} else if (sek == 1) {                                   // w-v
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d128      	bne.n	8000a5a <sekuta+0xba>
		LL_TIM_OC_SetCompareCH3(TIM2, 1);
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fe24 	bl	800065c <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, 1);
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	2101      	movs	r1, #1
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff fe2a 	bl	8000674 <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, power);
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f7ff fe0b 	bl	8000644 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	009a      	lsls	r2, r3, #2
 8000a32:	23a0      	movs	r3, #160	; 0xa0
 8000a34:	05db      	lsls	r3, r3, #23
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fe54 	bl	80006e6 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	01db      	lsls	r3, r3, #7
 8000a42:	4a5f      	ldr	r2, [pc, #380]	; (8000bc0 <sekuta+0x220>)
 8000a44:	0019      	movs	r1, r3
 8000a46:	0010      	movs	r0, r2
 8000a48:	f7ff fe41 	bl	80006ce <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 8000a4c:	23a0      	movs	r3, #160	; 0xa0
 8000a4e:	05db      	lsls	r3, r3, #23
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff fe3b 	bl	80006ce <LL_GPIO_SetOutputPin>
}
 8000a58:	e0ae      	b.n	8000bb8 <sekuta+0x218>
	} else if (sek == 2) {                                   // w-u
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d128      	bne.n	8000ab2 <sekuta+0x112>
		LL_TIM_OC_SetCompareCH3(TIM2, 1);
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	2101      	movs	r1, #1
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fdf8 	bl	800065c <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, 1);
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	2101      	movs	r1, #1
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff fdfe 	bl	8000674 <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, power);
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff fddf 	bl	8000644 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	009a      	lsls	r2, r3, #2
 8000a8a:	23a0      	movs	r3, #160	; 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fe1c 	bl	80006ce <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	01db      	lsls	r3, r3, #7
 8000a9a:	4a49      	ldr	r2, [pc, #292]	; (8000bc0 <sekuta+0x220>)
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	0010      	movs	r0, r2
 8000aa0:	f7ff fe21 	bl	80006e6 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 8000aa4:	23a0      	movs	r3, #160	; 0xa0
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fe0f 	bl	80006ce <LL_GPIO_SetOutputPin>
}
 8000ab0:	e082      	b.n	8000bb8 <sekuta+0x218>
	} else if (sek == 3) {                                    // v-u
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d128      	bne.n	8000b0a <sekuta+0x16a>
		LL_TIM_OC_SetCompareCH3(TIM2, 1);
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2101      	movs	r1, #1
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff fdcc 	bl	800065c <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, power);
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff fdd1 	bl	8000674 <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, 1);
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff fdb3 	bl	8000644 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	009a      	lsls	r2, r3, #2
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fdf0 	bl	80006ce <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	01db      	lsls	r3, r3, #7
 8000af2:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <sekuta+0x220>)
 8000af4:	0019      	movs	r1, r3
 8000af6:	0010      	movs	r0, r2
 8000af8:	f7ff fde9 	bl	80006ce <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 8000afc:	23a0      	movs	r3, #160	; 0xa0
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff fdef 	bl	80006e6 <LL_GPIO_ResetOutputPin>
}
 8000b08:	e056      	b.n	8000bb8 <sekuta+0x218>
	} else if (sek == 4) {                                   // v-w
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d128      	bne.n	8000b62 <sekuta+0x1c2>
		LL_TIM_OC_SetCompareCH3(TIM2, 1);
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	2101      	movs	r1, #1
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fda0 	bl	800065c <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, power);
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff fda5 	bl	8000674 <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, 1);
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	2101      	movs	r1, #1
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fd87 	bl	8000644 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	009a      	lsls	r2, r3, #2
 8000b3a:	23a0      	movs	r3, #160	; 0xa0
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fdd0 	bl	80006e6 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	01db      	lsls	r3, r3, #7
 8000b4a:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <sekuta+0x220>)
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0010      	movs	r0, r2
 8000b50:	f7ff fdbd 	bl	80006ce <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	2140      	movs	r1, #64	; 0x40
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff fdb7 	bl	80006ce <LL_GPIO_SetOutputPin>
}
 8000b60:	e02a      	b.n	8000bb8 <sekuta+0x218>
	} else if (sek == 5) {                                   // u-w
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d127      	bne.n	8000bb8 <sekuta+0x218>
		LL_TIM_OC_SetCompareCH3(TIM2, power);
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fd73 	bl	800065c <LL_TIM_OC_SetCompareCH3>
		LL_TIM_OC_SetCompareCH4(TIM2, 1);
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fd79 	bl	8000674 <LL_TIM_OC_SetCompareCH4>
		LL_TIM_OC_SetCompareCH1(TIM2, 1);
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2101      	movs	r1, #1
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff fd5b 	bl	8000644 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_9);    //! U
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	009a      	lsls	r2, r3, #2
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fd98 	bl	80006ce <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOC, GPIO_PIN_14);   //! V
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	01db      	lsls	r3, r3, #7
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <sekuta+0x220>)
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	0010      	movs	r0, r2
 8000ba8:	f7ff fd9d 	bl	80006e6 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOA, GPIO_PIN_6);  //! W
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff fd8b 	bl	80006ce <LL_GPIO_SetOutputPin>
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	50000800 	.word	0x50000800

08000bc4 <ESC_Drive>:
int counter = 0;
int neko = 0;
int nekoCounter = 0;
const int speed = 115;

void ESC_Drive() {
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	e00a      	b.n	8000be6 <ESC_Drive+0x22>
		sekuta(i, 20);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2114      	movs	r1, #20
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fee3 	bl	80009a0 <sekuta>
		HAL_Delay(3);
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f000 fb4a 	bl	8001274 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b05      	cmp	r3, #5
 8000bea:	ddf1      	ble.n	8000bd0 <ESC_Drive+0xc>
	}
	if (neko == 0) {
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <ESC_Drive+0xe8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d123      	bne.n	8000c3c <ESC_Drive+0x78>
		if (nekoCounter * speed + 1000 < HAL_GetTick()) {
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <ESC_Drive+0xec>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2273      	movs	r2, #115	; 0x73
 8000bfa:	4353      	muls	r3, r2
 8000bfc:	22fa      	movs	r2, #250	; 0xfa
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	4694      	mov	ip, r2
 8000c02:	4463      	add	r3, ip
 8000c04:	001c      	movs	r4, r3
 8000c06:	f000 fb2b 	bl	8001260 <HAL_GetTick>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	429c      	cmp	r4, r3
 8000c0e:	d249      	bcs.n	8000ca4 <ESC_Drive+0xe0>
			changeFreq(gakfuIntro[nekoCounter]);
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <ESC_Drive+0xec>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <ESC_Drive+0xf0>)
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	58d3      	ldr	r3, [r2, r3]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fd9c 	bl	8000758 <changeFreq>
			nekoCounter++;
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <ESC_Drive+0xec>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <ESC_Drive+0xec>)
 8000c28:	601a      	str	r2, [r3, #0]
			if (nekoCounter == gakfuIntroLength) {
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <ESC_Drive+0xec>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2220      	movs	r2, #32
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d137      	bne.n	8000ca4 <ESC_Drive+0xe0>
				neko = 1;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <ESC_Drive+0xe8>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
				neko++;
				counter = 0;
			}
		}
	}
}
 8000c3a:	e033      	b.n	8000ca4 <ESC_Drive+0xe0>
		if (counter * speed + speed * gakfuIntroLength
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <ESC_Drive+0xf4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2273      	movs	r2, #115	; 0x73
 8000c42:	435a      	muls	r2, r3
 8000c44:	2373      	movs	r3, #115	; 0x73
 8000c46:	2120      	movs	r1, #32
 8000c48:	434b      	muls	r3, r1
 8000c4a:	18d2      	adds	r2, r2, r3
				+ gakfuLength * speed * (neko - 1) + 1000 < HAL_GetTick()) {
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	2173      	movs	r1, #115	; 0x73
 8000c50:	4359      	muls	r1, r3
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <ESC_Drive+0xe8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	434b      	muls	r3, r1
 8000c5a:	18d3      	adds	r3, r2, r3
 8000c5c:	22fa      	movs	r2, #250	; 0xfa
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	4694      	mov	ip, r2
 8000c62:	4463      	add	r3, ip
 8000c64:	001c      	movs	r4, r3
 8000c66:	f000 fafb 	bl	8001260 <HAL_GetTick>
 8000c6a:	0003      	movs	r3, r0
		if (counter * speed + speed * gakfuIntroLength
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d219      	bcs.n	8000ca4 <ESC_Drive+0xe0>
			changeFreq(gakfu[counter]);
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <ESC_Drive+0xf4>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <ESC_Drive+0xf8>)
 8000c76:	0092      	lsls	r2, r2, #2
 8000c78:	58d3      	ldr	r3, [r2, r3]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fd6c 	bl	8000758 <changeFreq>
			counter++;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <ESC_Drive+0xf4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <ESC_Drive+0xf4>)
 8000c88:	601a      	str	r2, [r3, #0]
			if (counter == gakfuLength) {
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <ESC_Drive+0xf4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d107      	bne.n	8000ca4 <ESC_Drive+0xe0>
				neko++;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <ESC_Drive+0xe8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <ESC_Drive+0xe8>)
 8000c9c:	601a      	str	r2, [r3, #0]
				counter = 0;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <ESC_Drive+0xf4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b003      	add	sp, #12
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	2000002c 	.word	0x2000002c
 8000cb0:	20000030 	.word	0x20000030
 8000cb4:	080027ec 	.word	0x080027ec
 8000cb8:	20000028 	.word	0x20000028
 8000cbc:	080025ec 	.word	0x080025ec

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f000 fa66 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f822 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f000 f978 	bl	8000fc0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cd0:	f000 f87a 	bl	8000dc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	05db      	lsls	r3, r3, #23
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff fbdf 	bl	800049c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH3);
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	005a      	lsls	r2, r3, #1
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fbf4 	bl	80004d6 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH4);
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	015a      	lsls	r2, r3, #5
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff fbec 	bl	80004d6 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	2101      	movs	r1, #1
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff fbe6 	bl	80004d6 <LL_TIM_CC_EnableChannel>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ESC_Drive();
 8000d0a:	f7ff ff5b 	bl	8000bc4 <ESC_Drive>
 8000d0e:	e7fc      	b.n	8000d0a <main+0x4a>

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b093      	sub	sp, #76	; 0x4c
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	2414      	movs	r4, #20
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2334      	movs	r3, #52	; 0x34
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f001 fc47 	bl	80025b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d26:	003b      	movs	r3, r7
 8000d28:	0018      	movs	r0, r3
 8000d2a:	2314      	movs	r3, #20
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f001 fc40 	bl	80025b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <SystemClock_Config+0xb0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <SystemClock_Config+0xb4>)
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <SystemClock_Config+0xb0>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0109      	lsls	r1, r1, #4
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	0021      	movs	r1, r4
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2201      	movs	r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2210      	movs	r2, #16
 8000d58:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	02d2      	lsls	r2, r2, #11
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	03d2      	lsls	r2, r2, #15
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 fb53 	bl	8001424 <HAL_RCC_OscConfig>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000d82:	f000 f98f 	bl	80010a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	003b      	movs	r3, r7
 8000d88:	220f      	movs	r2, #15
 8000d8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	2203      	movs	r2, #3
 8000d90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	003b      	movs	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d98:	003b      	movs	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	003b      	movs	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da4:	003b      	movs	r3, r7
 8000da6:	2101      	movs	r1, #1
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 feb7 	bl	8001b1c <HAL_RCC_ClockConfig>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000db2:	f000 f977 	bl	80010a4 <Error_Handler>
  }
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b013      	add	sp, #76	; 0x4c
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40007000 	.word	0x40007000
 8000dc4:	ffffe7ff 	.word	0xffffe7ff

08000dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b08e      	sub	sp, #56	; 0x38
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000dce:	2528      	movs	r5, #40	; 0x28
 8000dd0:	197b      	adds	r3, r7, r5
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f001 fbeb 	bl	80025b4 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000dde:	2418      	movs	r4, #24
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	0018      	movs	r0, r3
 8000de4:	2310      	movs	r3, #16
 8000de6:	001a      	movs	r2, r3
 8000de8:	2100      	movs	r1, #0
 8000dea:	f001 fbe3 	bl	80025b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	003b      	movs	r3, r7
 8000df0:	0018      	movs	r0, r3
 8000df2:	2318      	movs	r3, #24
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f001 fbdc 	bl	80025b4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff fc7f 	bl	8000700 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 8000e02:	197b      	adds	r3, r7, r5
 8000e04:	2201      	movs	r2, #1
 8000e06:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e08:	197b      	adds	r3, r7, r5
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 8000e0e:	197b      	adds	r3, r7, r5
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e14:	197b      	adds	r3, r7, r5
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e1a:	197a      	adds	r2, r7, r5
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 f9d6 	bl	80021d4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fb43 	bl	80004b8 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	2101      	movs	r1, #1
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fb93 	bl	8000564 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	2260      	movs	r2, #96	; 0x60
 8000e42:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000e56:	193a      	adds	r2, r7, r4
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f001 fa00 	bl	8002264 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	05db      	lsls	r3, r3, #23
 8000e68:	2101      	movs	r1, #1
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fb42 	bl	80004f4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	005a      	lsls	r2, r3, #1
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	05db      	lsls	r3, r3, #23
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff fb72 	bl	8000564 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000e80:	193a      	adds	r2, r7, r4
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	0059      	lsls	r1, r3, #1
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	05db      	lsls	r3, r3, #23
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f001 f9ea 	bl	8002264 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	005a      	lsls	r2, r3, #1
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	05db      	lsls	r3, r3, #23
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff fb2a 	bl	80004f4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	015a      	lsls	r2, r3, #5
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	05db      	lsls	r3, r3, #23
 8000ea8:	0011      	movs	r1, r2
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff fb5a 	bl	8000564 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000eb0:	193a      	adds	r2, r7, r4
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	0159      	lsls	r1, r3, #5
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f001 f9d2 	bl	8002264 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH4);
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	015a      	lsls	r2, r3, #5
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	0011      	movs	r1, r2
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff fb12 	bl	80004f4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff fbd8 	bl	800068c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fbe5 	bl	80006b0 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	2101      	movs	r1, #1
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fb71 	bl	80005d4 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	005a      	lsls	r2, r3, #1
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fb69 	bl	80005d4 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIM2, LL_TIM_CHANNEL_CH4);
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	015a      	lsls	r2, r3, #5
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff fb61 	bl	80005d4 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fc0a 	bl	800072c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f7ff fc07 	bl	800072c <LL_IOP_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA5   ------> TIM2_CH1
  PB1   ------> TIM2_CH4
  PA10   ------> TIM2_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000f1e:	003b      	movs	r3, r7
 8000f20:	2220      	movs	r2, #32
 8000f22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f24:	003b      	movs	r3, r7
 8000f26:	2202      	movs	r2, #2
 8000f28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f30:	003b      	movs	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2205      	movs	r2, #5
 8000f40:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	003a      	movs	r2, r7
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 f88d 	bl	800206a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000f50:	003b      	movs	r3, r7
 8000f52:	2202      	movs	r2, #2
 8000f54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2202      	movs	r2, #2
 8000f5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f5c:	003b      	movs	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2205      	movs	r2, #5
 8000f72:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	003b      	movs	r3, r7
 8000f76:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <MX_TIM2_Init+0x1f4>)
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0010      	movs	r0, r2
 8000f7c:	f001 f875 	bl	800206a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	00d2      	lsls	r2, r2, #3
 8000f86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f88:	003b      	movs	r3, r7
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f8e:	003b      	movs	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f94:	003b      	movs	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f9a:	003b      	movs	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	003a      	movs	r2, r7
 8000fa8:	23a0      	movs	r3, #160	; 0xa0
 8000faa:	05db      	lsls	r3, r3, #23
 8000fac:	0011      	movs	r1, r2
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 f85b 	bl	800206a <LL_GPIO_Init>

}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b00e      	add	sp, #56	; 0x38
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	50000400 	.word	0x50000400

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	0018      	movs	r0, r3
 8000fca:	2318      	movs	r3, #24
 8000fcc:	001a      	movs	r2, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f001 faf0 	bl	80025b4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000fd4:	2004      	movs	r0, #4
 8000fd6:	f7ff fba9 	bl	800072c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff fba6 	bl	800072c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f7ff fba3 	bl	800072c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14);
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	01db      	lsls	r3, r3, #7
 8000fea:	4a2d      	ldr	r2, [pc, #180]	; (80010a0 <MX_GPIO_Init+0xe0>)
 8000fec:	0019      	movs	r1, r3
 8000fee:	0010      	movs	r0, r2
 8000ff0:	f7ff fb79 	bl	80006e6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8000ff4:	23a0      	movs	r3, #160	; 0xa0
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff fb73 	bl	80006e6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	009a      	lsls	r2, r3, #2
 8001004:	23a0      	movs	r3, #160	; 0xa0
 8001006:	05db      	lsls	r3, r3, #23
 8001008:	0011      	movs	r1, r2
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff fb6b 	bl	80006e6 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001010:	003b      	movs	r3, r7
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	01d2      	lsls	r2, r2, #7
 8001016:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001018:	003b      	movs	r3, r7
 800101a:	2201      	movs	r2, #1
 800101c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800101e:	003b      	movs	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001024:	003b      	movs	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102a:	003b      	movs	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001030:	003b      	movs	r3, r7
 8001032:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <MX_GPIO_Init+0xe0>)
 8001034:	0019      	movs	r1, r3
 8001036:	0010      	movs	r0, r2
 8001038:	f001 f817 	bl	800206a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800103c:	003b      	movs	r3, r7
 800103e:	2240      	movs	r2, #64	; 0x40
 8001040:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001042:	003b      	movs	r3, r7
 8001044:	2201      	movs	r2, #1
 8001046:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001048:	003b      	movs	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800104e:	003b      	movs	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001054:	003b      	movs	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	003a      	movs	r2, r7
 800105c:	23a0      	movs	r3, #160	; 0xa0
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	0011      	movs	r1, r2
 8001062:	0018      	movs	r0, r3
 8001064:	f001 f801 	bl	800206a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001068:	003b      	movs	r3, r7
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001070:	003b      	movs	r3, r7
 8001072:	2201      	movs	r2, #1
 8001074:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001076:	003b      	movs	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800107c:	003b      	movs	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001082:	003b      	movs	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	003a      	movs	r2, r7
 800108a:	23a0      	movs	r3, #160	; 0xa0
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f000 ffea 	bl	800206a <LL_GPIO_Init>

}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b006      	add	sp, #24
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	50000800 	.word	0x50000800

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010ac:	e7fe      	b.n	80010ac <Error_Handler+0x8>
	...

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_MspInit+0x24>)
 80010b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x24>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	430a      	orrs	r2, r1
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <HAL_MspInit+0x24>)
 80010c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_MspInit+0x24>)
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	0549      	lsls	r1, r1, #21
 80010ca:	430a      	orrs	r2, r1
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f89e 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001110:	4813      	ldr	r0, [pc, #76]	; (8001160 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <LoopForever+0x6>)
    LDR R1, [R0]
 8001116:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001118:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <LoopForever+0xa>)
    CMP R1, R2
 800111c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800111e:	d105      	bne.n	800112c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001120:	4812      	ldr	r0, [pc, #72]	; (800116c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001122:	4913      	ldr	r1, [pc, #76]	; (8001170 <LoopForever+0x12>)
    STR R1, [R0]
 8001124:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001126:	4813      	ldr	r0, [pc, #76]	; (8001174 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001128:	4913      	ldr	r1, [pc, #76]	; (8001178 <LoopForever+0x1a>)
    STR R1, [R0]
 800112a:	6001      	str	r1, [r0, #0]

0800112c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <LoopForever+0x1e>)
  ldr r1, =_edata
 800112e:	4914      	ldr	r1, [pc, #80]	; (8001180 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <LoopForever+0x26>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a11      	ldr	r2, [pc, #68]	; (8001188 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001144:	4c11      	ldr	r4, [pc, #68]	; (800118c <LoopForever+0x2e>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001152:	f7ff ffd8 	bl	8001106 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f001 fa09 	bl	800256c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fdb1 	bl	8000cc0 <main>

0800115e <LoopForever>:

LoopForever:
    b LoopForever
 800115e:	e7fe      	b.n	800115e <LoopForever>
   ldr   r0, =_estack
 8001160:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001164:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001168:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800116c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001170:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001174:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001178:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001184:	08002898 	.word	0x08002898
  ldr r2, =_sbss
 8001188:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800118c:	20000038 	.word	0x20000038

08001190 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_IRQHandler>
	...

08001194 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_Init+0x3c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Init+0x3c>)
 80011a6:	2140      	movs	r1, #64	; 0x40
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f811 	bl	80011d4 <HAL_InitTick>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d003      	beq.n	80011be <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e001      	b.n	80011c2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011be:	f7ff ff77 	bl	80010b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_InitTick+0x5c>)
 80011de:	681c      	ldr	r4, [r3, #0]
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_InitTick+0x60>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	0019      	movs	r1, r3
 80011e6:	23fa      	movs	r3, #250	; 0xfa
 80011e8:	0098      	lsls	r0, r3, #2
 80011ea:	f7fe ff8d 	bl	8000108 <__udivsi3>
 80011ee:	0003      	movs	r3, r0
 80011f0:	0019      	movs	r1, r3
 80011f2:	0020      	movs	r0, r4
 80011f4:	f7fe ff88 	bl	8000108 <__udivsi3>
 80011f8:	0003      	movs	r3, r0
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 f905 	bl	800140a <HAL_SYSTICK_Config>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e00f      	b.n	8001228 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d80b      	bhi.n	8001226 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	2301      	movs	r3, #1
 8001212:	425b      	negs	r3, r3
 8001214:	2200      	movs	r2, #0
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f8e2 	bl	80013e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_InitTick+0x64>)
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b003      	add	sp, #12
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x1c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	001a      	movs	r2, r3
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x20>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	18d2      	adds	r2, r2, r3
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_IncTick+0x20>)
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	20000008 	.word	0x20000008
 800125c:	20000034 	.word	0x20000034

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <HAL_GetTick+0x10>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000034 	.word	0x20000034

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff fff0 	bl	8001260 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	001a      	movs	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	189b      	adds	r3, r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	f7ff ffe0 	bl	8001260 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	0002      	movs	r2, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b7f      	cmp	r3, #127	; 0x7f
 80012d0:	d828      	bhi.n	8001324 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <__NVIC_SetPriority+0xd4>)
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	33c0      	adds	r3, #192	; 0xc0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	589b      	ldr	r3, [r3, r2]
 80012e2:	1dfa      	adds	r2, r7, #7
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	0011      	movs	r1, r2
 80012e8:	2203      	movs	r2, #3
 80012ea:	400a      	ands	r2, r1
 80012ec:	00d2      	lsls	r2, r2, #3
 80012ee:	21ff      	movs	r1, #255	; 0xff
 80012f0:	4091      	lsls	r1, r2
 80012f2:	000a      	movs	r2, r1
 80012f4:	43d2      	mvns	r2, r2
 80012f6:	401a      	ands	r2, r3
 80012f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	401a      	ands	r2, r3
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	2303      	movs	r3, #3
 800130a:	4003      	ands	r3, r0
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001310:	481f      	ldr	r0, [pc, #124]	; (8001390 <__NVIC_SetPriority+0xd4>)
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	430a      	orrs	r2, r1
 800131c:	33c0      	adds	r3, #192	; 0xc0
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001322:	e031      	b.n	8001388 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <__NVIC_SetPriority+0xd8>)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	0019      	movs	r1, r3
 800132c:	230f      	movs	r3, #15
 800132e:	400b      	ands	r3, r1
 8001330:	3b08      	subs	r3, #8
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3306      	adds	r3, #6
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	18d3      	adds	r3, r2, r3
 800133a:	3304      	adds	r3, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	0011      	movs	r1, r2
 8001344:	2203      	movs	r2, #3
 8001346:	400a      	ands	r2, r1
 8001348:	00d2      	lsls	r2, r2, #3
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	4091      	lsls	r1, r2
 800134e:	000a      	movs	r2, r1
 8001350:	43d2      	mvns	r2, r2
 8001352:	401a      	ands	r2, r3
 8001354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	019b      	lsls	r3, r3, #6
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	401a      	ands	r2, r3
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	2303      	movs	r3, #3
 8001366:	4003      	ands	r3, r0
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <__NVIC_SetPriority+0xd8>)
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	001c      	movs	r4, r3
 8001374:	230f      	movs	r3, #15
 8001376:	4023      	ands	r3, r4
 8001378:	3b08      	subs	r3, #8
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	430a      	orrs	r2, r1
 800137e:	3306      	adds	r3, #6
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	18c3      	adds	r3, r0, r3
 8001384:	3304      	adds	r3, #4
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b003      	add	sp, #12
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	045b      	lsls	r3, r3, #17
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d301      	bcc.n	80013b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ac:	2301      	movs	r3, #1
 80013ae:	e010      	b.n	80013d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <SysTick_Config+0x44>)
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	3a01      	subs	r2, #1
 80013b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b8:	2301      	movs	r3, #1
 80013ba:	425b      	negs	r3, r3
 80013bc:	2103      	movs	r1, #3
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff ff7c 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x44>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x44>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	210f      	movs	r1, #15
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	1c02      	adds	r2, r0, #0
 80013f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	0011      	movs	r1, r2
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b004      	add	sp, #16
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ffbf 	bl	8001398 <SysTick_Config>
 800141a:	0003      	movs	r3, r0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f000 fb6c 	bl	8001b10 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001438:	4bc8      	ldr	r3, [pc, #800]	; (800175c <HAL_RCC_OscConfig+0x338>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	220c      	movs	r2, #12
 800143e:	4013      	ands	r3, r2
 8001440:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001442:	4bc6      	ldr	r3, [pc, #792]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	025b      	lsls	r3, r3, #9
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x36>
 8001458:	e07d      	b.n	8001556 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d007      	beq.n	8001470 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x68>
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	429a      	cmp	r2, r3
 800146e:	d10d      	bne.n	800148c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4bba      	ldr	r3, [pc, #744]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	4013      	ands	r3, r2
 800147a:	d100      	bne.n	800147e <HAL_RCC_OscConfig+0x5a>
 800147c:	e06a      	b.n	8001554 <HAL_RCC_OscConfig+0x130>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d166      	bne.n	8001554 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	f000 fb42 	bl	8001b10 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	429a      	cmp	r2, r3
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_OscConfig+0x84>
 8001498:	4bb0      	ldr	r3, [pc, #704]	; (800175c <HAL_RCC_OscConfig+0x338>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4baf      	ldr	r3, [pc, #700]	; (800175c <HAL_RCC_OscConfig+0x338>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0249      	lsls	r1, r1, #9
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e027      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	02db      	lsls	r3, r3, #11
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d10e      	bne.n	80014d2 <HAL_RCC_OscConfig+0xae>
 80014b4:	4ba9      	ldr	r3, [pc, #676]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4ba8      	ldr	r3, [pc, #672]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	02c9      	lsls	r1, r1, #11
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	4ba6      	ldr	r3, [pc, #664]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4ba5      	ldr	r3, [pc, #660]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	0249      	lsls	r1, r1, #9
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e012      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014d2:	4ba2      	ldr	r3, [pc, #648]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4ba1      	ldr	r3, [pc, #644]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014d8:	49a1      	ldr	r1, [pc, #644]	; (8001760 <HAL_RCC_OscConfig+0x33c>)
 80014da:	400a      	ands	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	4b9f      	ldr	r3, [pc, #636]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4013      	ands	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4b9b      	ldr	r3, [pc, #620]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b9a      	ldr	r3, [pc, #616]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80014f2:	499c      	ldr	r1, [pc, #624]	; (8001764 <HAL_RCC_OscConfig+0x340>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d014      	beq.n	800152a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff feae 	bl	8001260 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150a:	f7ff fea9 	bl	8001260 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e2f9      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800151c:	4b8f      	ldr	r3, [pc, #572]	; (800175c <HAL_RCC_OscConfig+0x338>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	029b      	lsls	r3, r3, #10
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0xe6>
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fe99 	bl	8001260 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fe94 	bl	8001260 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e2e4      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001546:	4b85      	ldr	r3, [pc, #532]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	029b      	lsls	r3, r3, #10
 800154e:	4013      	ands	r3, r2
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x110>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_RCC_OscConfig+0x13e>
 8001560:	e099      	b.n	8001696 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	2220      	movs	r2, #32
 800156c:	4013      	ands	r3, r2
 800156e:	d009      	beq.n	8001584 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001570:	4b7a      	ldr	r3, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b79      	ldr	r3, [pc, #484]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001576:	2120      	movs	r1, #32
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	2220      	movs	r2, #32
 8001580:	4393      	bics	r3, r2
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d005      	beq.n	8001596 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d13e      	bne.n	800160e <HAL_RCC_OscConfig+0x1ea>
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d13b      	bne.n	800160e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001596:	4b71      	ldr	r3, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2204      	movs	r2, #4
 800159c:	4013      	ands	r3, r2
 800159e:	d004      	beq.n	80015aa <HAL_RCC_OscConfig+0x186>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e2b2      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b6c      	ldr	r3, [pc, #432]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x344>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	021a      	lsls	r2, r3, #8
 80015ba:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015c0:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2209      	movs	r2, #9
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	4b64      	ldr	r3, [pc, #400]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d2:	f000 fbeb 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 80015d6:	0001      	movs	r1, r0
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	220f      	movs	r2, #15
 80015e0:	4013      	ands	r3, r2
 80015e2:	4a62      	ldr	r2, [pc, #392]	; (800176c <HAL_RCC_OscConfig+0x348>)
 80015e4:	5cd3      	ldrb	r3, [r2, r3]
 80015e6:	000a      	movs	r2, r1
 80015e8:	40da      	lsrs	r2, r3
 80015ea:	4b61      	ldr	r3, [pc, #388]	; (8001770 <HAL_RCC_OscConfig+0x34c>)
 80015ec:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80015ee:	4b61      	ldr	r3, [pc, #388]	; (8001774 <HAL_RCC_OscConfig+0x350>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2513      	movs	r5, #19
 80015f4:	197c      	adds	r4, r7, r5
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff fdec 	bl	80011d4 <HAL_InitTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001600:	197b      	adds	r3, r7, r5
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d046      	beq.n	8001696 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001608:	197b      	adds	r3, r7, r5
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	e280      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	2b00      	cmp	r3, #0
 8001612:	d027      	beq.n	8001664 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001614:	4b51      	ldr	r3, [pc, #324]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2209      	movs	r2, #9
 800161a:	4393      	bics	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	4b4f      	ldr	r3, [pc, #316]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fe1b 	bl	8001260 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fe16 	bl	8001260 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e266      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2204      	movs	r2, #4
 8001648:	4013      	ands	r3, r2
 800164a:	d0f1      	beq.n	8001630 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_OscConfig+0x338>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a45      	ldr	r2, [pc, #276]	; (8001768 <HAL_RCC_OscConfig+0x344>)
 8001652:	4013      	ands	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	021a      	lsls	r2, r3, #8
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_OscConfig+0x338>)
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e018      	b.n	8001696 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001664:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b3c      	ldr	r3, [pc, #240]	; (800175c <HAL_RCC_OscConfig+0x338>)
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fdf6 	bl	8001260 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fdf1 	bl	8001260 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e241      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_RCC_OscConfig+0x338>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2204      	movs	r2, #4
 8001692:	4013      	ands	r3, r2
 8001694:	d1f1      	bne.n	800167a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2210      	movs	r2, #16
 800169c:	4013      	ands	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x27e>
 80016a0:	e0a1      	b.n	80017e6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d140      	bne.n	800172a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x29c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e227      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a2c      	ldr	r2, [pc, #176]	; (8001778 <HAL_RCC_OscConfig+0x354>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1a      	ldr	r2, [r3, #32]
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	0a19      	lsrs	r1, r3, #8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	061a      	lsls	r2, r3, #24
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80016e4:	430a      	orrs	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	0b5b      	lsrs	r3, r3, #13
 80016ee:	3301      	adds	r3, #1
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	0212      	lsls	r2, r2, #8
 80016f4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_OscConfig+0x338>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	210f      	movs	r1, #15
 80016fe:	400b      	ands	r3, r1
 8001700:	491a      	ldr	r1, [pc, #104]	; (800176c <HAL_RCC_OscConfig+0x348>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_RCC_OscConfig+0x34c>)
 8001708:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_RCC_OscConfig+0x350>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2513      	movs	r5, #19
 8001710:	197c      	adds	r4, r7, r5
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff fd5e 	bl	80011d4 <HAL_InitTick>
 8001718:	0003      	movs	r3, r0
 800171a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800171c:	197b      	adds	r3, r7, r5
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d060      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001724:	197b      	adds	r3, r7, r5
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	e1f2      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d03f      	beq.n	80017b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_OscConfig+0x338>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0049      	lsls	r1, r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fd8e 	bl	8001260 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001748:	e018      	b.n	800177c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174a:	f7ff fd89 	bl	8001260 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d911      	bls.n	800177c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1d9      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
 800175c:	40021000 	.word	0x40021000
 8001760:	fffeffff 	.word	0xfffeffff
 8001764:	fffbffff 	.word	0xfffbffff
 8001768:	ffffe0ff 	.word	0xffffe0ff
 800176c:	0800286c 	.word	0x0800286c
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004
 8001778:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800177c:	4bc9      	ldr	r3, [pc, #804]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4013      	ands	r3, r2
 8001786:	d0e0      	beq.n	800174a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001788:	4bc6      	ldr	r3, [pc, #792]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4ac6      	ldr	r2, [pc, #792]	; (8001aa8 <HAL_RCC_OscConfig+0x684>)
 800178e:	4013      	ands	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1a      	ldr	r2, [r3, #32]
 8001796:	4bc3      	ldr	r3, [pc, #780]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179c:	4bc1      	ldr	r3, [pc, #772]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	0a19      	lsrs	r1, r3, #8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	061a      	lsls	r2, r3, #24
 80017aa:	4bbe      	ldr	r3, [pc, #760]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	e019      	b.n	80017e6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017b2:	4bbc      	ldr	r3, [pc, #752]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4bbb      	ldr	r3, [pc, #748]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80017b8:	49bc      	ldr	r1, [pc, #752]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fd4f 	bl	8001260 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c8:	f7ff fd4a 	bl	8001260 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e19a      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017da:	4bb2      	ldr	r3, [pc, #712]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2208      	movs	r2, #8
 80017ec:	4013      	ands	r3, r2
 80017ee:	d036      	beq.n	800185e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d019      	beq.n	800182c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f8:	4baa      	ldr	r3, [pc, #680]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80017fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017fc:	4ba9      	ldr	r3, [pc, #676]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80017fe:	2101      	movs	r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fd2c 	bl	8001260 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fd27 	bl	8001260 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e177      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001820:	4ba0      	ldr	r3, [pc, #640]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d0f1      	beq.n	800180e <HAL_RCC_OscConfig+0x3ea>
 800182a:	e018      	b.n	800185e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182c:	4b9d      	ldr	r3, [pc, #628]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800182e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001830:	4b9c      	ldr	r3, [pc, #624]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001832:	2101      	movs	r1, #1
 8001834:	438a      	bics	r2, r1
 8001836:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff fd12 	bl	8001260 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff fd0d 	bl	8001260 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e15d      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001854:	4b93      	ldr	r3, [pc, #588]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d1f1      	bne.n	8001842 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2204      	movs	r2, #4
 8001864:	4013      	ands	r3, r2
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x446>
 8001868:	e0ae      	b.n	80019c8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186a:	2023      	movs	r0, #35	; 0x23
 800186c:	183b      	adds	r3, r7, r0
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001872:	4b8c      	ldr	r3, [pc, #560]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	055b      	lsls	r3, r3, #21
 800187a:	4013      	ands	r3, r2
 800187c:	d109      	bne.n	8001892 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b89      	ldr	r3, [pc, #548]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0549      	lsls	r1, r1, #21
 8001888:	430a      	orrs	r2, r1
 800188a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800188c:	183b      	adds	r3, r7, r0
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	4b87      	ldr	r3, [pc, #540]	; (8001ab0 <HAL_RCC_OscConfig+0x68c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4013      	ands	r3, r2
 800189c:	d11a      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189e:	4b84      	ldr	r3, [pc, #528]	; (8001ab0 <HAL_RCC_OscConfig+0x68c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b83      	ldr	r3, [pc, #524]	; (8001ab0 <HAL_RCC_OscConfig+0x68c>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	0049      	lsls	r1, r1, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fcd8 	bl	8001260 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff fcd3 	bl	8001260 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e123      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b79      	ldr	r3, [pc, #484]	; (8001ab0 <HAL_RCC_OscConfig+0x68c>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4013      	ands	r3, r2
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	429a      	cmp	r2, r3
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4cc>
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80018e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e4:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0049      	lsls	r1, r1, #1
 80018ea:	430a      	orrs	r2, r1
 80018ec:	651a      	str	r2, [r3, #80]	; 0x50
 80018ee:	e031      	b.n	8001954 <HAL_RCC_OscConfig+0x530>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x4ee>
 80018f8:	4b6a      	ldr	r3, [pc, #424]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80018fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fc:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80018fe:	496b      	ldr	r1, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001900:	400a      	ands	r2, r1
 8001902:	651a      	str	r2, [r3, #80]	; 0x50
 8001904:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800190a:	496a      	ldr	r1, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x690>)
 800190c:	400a      	ands	r2, r1
 800190e:	651a      	str	r2, [r3, #80]	; 0x50
 8001910:	e020      	b.n	8001954 <HAL_RCC_OscConfig+0x530>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	23a0      	movs	r3, #160	; 0xa0
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	429a      	cmp	r2, r3
 800191c:	d10e      	bne.n	800193c <HAL_RCC_OscConfig+0x518>
 800191e:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	00c9      	lsls	r1, r1, #3
 8001928:	430a      	orrs	r2, r1
 800192a:	651a      	str	r2, [r3, #80]	; 0x50
 800192c:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800192e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001930:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	0049      	lsls	r1, r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	651a      	str	r2, [r3, #80]	; 0x50
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0x530>
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800193e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001942:	495a      	ldr	r1, [pc, #360]	; (8001aac <HAL_RCC_OscConfig+0x688>)
 8001944:	400a      	ands	r2, r1
 8001946:	651a      	str	r2, [r3, #80]	; 0x50
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800194a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800194c:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800194e:	4959      	ldr	r1, [pc, #356]	; (8001ab4 <HAL_RCC_OscConfig+0x690>)
 8001950:	400a      	ands	r2, r1
 8001952:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d015      	beq.n	8001988 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195c:	f7ff fc80 	bl	8001260 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001964:	e009      	b.n	800197a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff fc7b 	bl	8001260 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_RCC_OscConfig+0x694>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e0ca      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800197a:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 800197c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d0ef      	beq.n	8001966 <HAL_RCC_OscConfig+0x542>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff fc6a 	bl	8001260 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff fc65 	bl	8001260 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <HAL_RCC_OscConfig+0x694>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e0b4      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80019a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4013      	ands	r3, r2
 80019b0:	d1ef      	bne.n	8001992 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019b2:	2323      	movs	r3, #35	; 0x23
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80019be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019c0:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80019c2:	493e      	ldr	r1, [pc, #248]	; (8001abc <HAL_RCC_OscConfig+0x698>)
 80019c4:	400a      	ands	r2, r1
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d100      	bne.n	80019d2 <HAL_RCC_OscConfig+0x5ae>
 80019d0:	e09d      	b.n	8001b0e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x5b6>
 80019d8:	e076      	b.n	8001ac8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d145      	bne.n	8001a6e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_RCC_OscConfig+0x69c>)
 80019ea:	400a      	ands	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fc37 	bl	8001260 <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff fc32 	bl	8001260 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e082      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	049b      	lsls	r3, r3, #18
 8001a12:	4013      	ands	r3, r2
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a2a      	ldr	r2, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x6a0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a32:	430a      	orrs	r2, r1
 8001a34:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	0449      	lsls	r1, r1, #17
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fc0c 	bl	8001260 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff fc07 	bl	8001260 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e057      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	049b      	lsls	r3, r3, #18
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x62a>
 8001a6c:	e04f      	b.n	8001b0e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a74:	4912      	ldr	r1, [pc, #72]	; (8001ac0 <HAL_RCC_OscConfig+0x69c>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fbf1 	bl	8001260 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fbec 	bl	8001260 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e03c      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a96:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_RCC_OscConfig+0x680>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	049b      	lsls	r3, r3, #18
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x660>
 8001aa2:	e034      	b.n	8001b0e <HAL_RCC_OscConfig+0x6ea>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	ffff1fff 	.word	0xffff1fff
 8001aac:	fffffeff 	.word	0xfffffeff
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	fffffbff 	.word	0xfffffbff
 8001ab8:	00001388 	.word	0x00001388
 8001abc:	efffffff 	.word	0xefffffff
 8001ac0:	feffffff 	.word	0xfeffffff
 8001ac4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_RCC_OscConfig+0x6f4>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d10f      	bne.n	8001b0a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	23f0      	movs	r3, #240	; 0xf0
 8001aee:	039b      	lsls	r3, r3, #14
 8001af0:	401a      	ands	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	23c0      	movs	r3, #192	; 0xc0
 8001afe:	041b      	lsls	r3, r3, #16
 8001b00:	401a      	ands	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b00a      	add	sp, #40	; 0x28
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e128      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b30:	4b96      	ldr	r3, [pc, #600]	; (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d91e      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b93      	ldr	r3, [pc, #588]	; (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2201      	movs	r2, #1
 8001b44:	4393      	bics	r3, r2
 8001b46:	0019      	movs	r1, r3
 8001b48:	4b90      	ldr	r3, [pc, #576]	; (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b50:	f7ff fb86 	bl	8001260 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b58:	e009      	b.n	8001b6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5a:	f7ff fb81 	bl	8001260 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a8a      	ldr	r2, [pc, #552]	; (8001d90 <HAL_RCC_ClockConfig+0x274>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e109      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b87      	ldr	r3, [pc, #540]	; (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4013      	ands	r3, r2
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1ee      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b86:	4b83      	ldr	r3, [pc, #524]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	22f0      	movs	r2, #240	; 0xf0
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b7f      	ldr	r3, [pc, #508]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x8a>
 8001ba4:	e089      	b.n	8001cba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bae:	4b79      	ldr	r3, [pc, #484]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	029b      	lsls	r3, r3, #10
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d120      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0e1      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bc6:	4b73      	ldr	r3, [pc, #460]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	049b      	lsls	r3, r3, #18
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d114      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0d5      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bde:	4b6d      	ldr	r3, [pc, #436]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2204      	movs	r2, #4
 8001be4:	4013      	ands	r3, r2
 8001be6:	d109      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0ca      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0c2      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfc:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2203      	movs	r2, #3
 8001c02:	4393      	bics	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7ff fb26 	bl	8001260 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d111      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c20:	e009      	b.n	8001c36 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c22:	f7ff fb1d 	bl	8001260 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_RCC_ClockConfig+0x274>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0a5      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c36:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d1ef      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x106>
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d111      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c4c:	e009      	b.n	8001c62 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4e:	f7ff fb07 	bl	8001260 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4a4d      	ldr	r2, [pc, #308]	; (8001d90 <HAL_RCC_ClockConfig+0x274>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e08f      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c62:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	220c      	movs	r2, #12
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d1ef      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x132>
 8001c6e:	e024      	b.n	8001cba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d11b      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7a:	f7ff faf1 	bl	8001260 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	4a42      	ldr	r2, [pc, #264]	; (8001d90 <HAL_RCC_ClockConfig+0x274>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e079      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	220c      	movs	r2, #12
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d1ef      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x15e>
 8001c9a:	e00e      	b.n	8001cba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff fae0 	bl	8001260 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	4a3a      	ldr	r2, [pc, #232]	; (8001d90 <HAL_RCC_ClockConfig+0x274>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e068      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cb0:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	220c      	movs	r2, #12
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d21e      	bcs.n	8001d06 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4393      	bics	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cda:	f7ff fac1 	bl	8001260 <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	e009      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff fabc 	bl	8001260 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_RCC_ClockConfig+0x274>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e044      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_ClockConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d1ee      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <HAL_RCC_ClockConfig+0x27c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d00a      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_RCC_ClockConfig+0x280>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	00da      	lsls	r2, r3, #3
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d44:	f000 f832 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001d48:	0001      	movs	r1, r0
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_ClockConfig+0x278>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	220f      	movs	r2, #15
 8001d52:	4013      	ands	r3, r2
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <HAL_RCC_ClockConfig+0x284>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	000a      	movs	r2, r1
 8001d5a:	40da      	lsrs	r2, r3
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_RCC_ClockConfig+0x288>)
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_RCC_ClockConfig+0x28c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	250b      	movs	r5, #11
 8001d66:	197c      	adds	r4, r7, r5
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fa33 	bl	80011d4 <HAL_InitTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d72:	197b      	adds	r3, r7, r5
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d7a:	197b      	adds	r3, r7, r5
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b004      	add	sp, #16
 8001d88:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	00001388 	.word	0x00001388
 8001d94:	40021000 	.word	0x40021000
 8001d98:	fffff8ff 	.word	0xfffff8ff
 8001d9c:	ffffc7ff 	.word	0xffffc7ff
 8001da0:	0800286c 	.word	0x0800286c
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	b5b0      	push	{r4, r5, r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dba:	230c      	movs	r3, #12
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d014      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x40>
 8001dc2:	d900      	bls.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001dc4:	e07b      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x112>
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d002      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x24>
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d00b      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dce:	e076      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d002      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001dde:	e07c      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <HAL_RCC_GetSysClockFreq+0x140>)
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001de4:	e079      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de6:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dea:	e076      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	0c9a      	lsrs	r2, r3, #18
 8001df0:	230f      	movs	r3, #15
 8001df2:	401a      	ands	r2, r3
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	0d9a      	lsrs	r2, r3, #22
 8001dfe:	2303      	movs	r3, #3
 8001e00:	4013      	ands	r3, r2
 8001e02:	3301      	adds	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	025b      	lsls	r3, r3, #9
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d01a      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	4a35      	ldr	r2, [pc, #212]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	69b8      	ldr	r0, [r7, #24]
 8001e20:	69f9      	ldr	r1, [r7, #28]
 8001e22:	f7fe fa1d 	bl	8000260 <__aeabi_lmul>
 8001e26:	0002      	movs	r2, r0
 8001e28:	000b      	movs	r3, r1
 8001e2a:	0010      	movs	r0, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f7fe f9f1 	bl	8000220 <__aeabi_uldivmod>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	000b      	movs	r3, r1
 8001e42:	0013      	movs	r3, r2
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
 8001e46:	e037      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d01a      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	68b8      	ldr	r0, [r7, #8]
 8001e60:	68f9      	ldr	r1, [r7, #12]
 8001e62:	f7fe f9fd 	bl	8000260 <__aeabi_lmul>
 8001e66:	0002      	movs	r2, r0
 8001e68:	000b      	movs	r3, r1
 8001e6a:	0010      	movs	r0, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f7fe f9d1 	bl	8000220 <__aeabi_uldivmod>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	000b      	movs	r3, r1
 8001e82:	0013      	movs	r3, r2
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
 8001e86:	e017      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	0019      	movs	r1, r3
 8001e90:	4a16      	ldr	r2, [pc, #88]	; (8001eec <HAL_RCC_GetSysClockFreq+0x140>)
 8001e92:	2300      	movs	r3, #0
 8001e94:	f7fe f9e4 	bl	8000260 <__aeabi_lmul>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	000b      	movs	r3, r1
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	001d      	movs	r5, r3
 8001ea8:	0022      	movs	r2, r4
 8001eaa:	002b      	movs	r3, r5
 8001eac:	f7fe f9b8 	bl	8000220 <__aeabi_uldivmod>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	000b      	movs	r3, r1
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ebc:	e00d      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0b5b      	lsrs	r3, r3, #13
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	0212      	lsls	r2, r2, #8
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ed8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b00e      	add	sp, #56	; 0x38
 8001ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	003d0900 	.word	0x003d0900
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	0800287c 	.word	0x0800287c

08001ef8 <LL_GPIO_SetPinMode>:
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6819      	ldr	r1, [r3, #0]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	435b      	muls	r3, r3
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	0013      	movs	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	189b      	adds	r3, r3, r2
 8001f14:	43db      	mvns	r3, r3
 8001f16:	400b      	ands	r3, r1
 8001f18:	001a      	movs	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	435b      	muls	r3, r3
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	434b      	muls	r3, r1
 8001f22:	431a      	orrs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	601a      	str	r2, [r3, #0]
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <LL_GPIO_SetPinOutputType>:
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	43d2      	mvns	r2, r2
 8001f44:	401a      	ands	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	434b      	muls	r3, r1
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	605a      	str	r2, [r3, #4]
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <LL_GPIO_SetPinSpeed>:
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	435b      	muls	r3, r3
 8001f6e:	001a      	movs	r2, r3
 8001f70:	0013      	movs	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	189b      	adds	r3, r3, r2
 8001f76:	43db      	mvns	r3, r3
 8001f78:	400b      	ands	r3, r1
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	435b      	muls	r3, r3
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	434b      	muls	r3, r1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	609a      	str	r2, [r3, #8]
}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <LL_GPIO_SetPinPull>:
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	68d9      	ldr	r1, [r3, #12]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	435b      	muls	r3, r3
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	189b      	adds	r3, r3, r2
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	435b      	muls	r3, r3
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	434b      	muls	r3, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	60da      	str	r2, [r3, #12]
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <LL_GPIO_SetAFPin_0_7>:
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a19      	ldr	r1, [r3, #32]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	435b      	muls	r3, r3
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4353      	muls	r3, r2
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	435a      	muls	r2, r3
 8001fe6:	0013      	movs	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	43db      	mvns	r3, r3
 8001fee:	400b      	ands	r3, r1
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	435b      	muls	r3, r3
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	434b      	muls	r3, r1
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	434b      	muls	r3, r1
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	434b      	muls	r3, r1
 8002002:	431a      	orrs	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	621a      	str	r2, [r3, #32]
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}

08002010 <LL_GPIO_SetAFPin_8_15>:
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	0a12      	lsrs	r2, r2, #8
 8002028:	4353      	muls	r3, r2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	0a12      	lsrs	r2, r2, #8
 800202e:	4353      	muls	r3, r2
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	0a12      	lsrs	r2, r2, #8
 8002034:	435a      	muls	r2, r3
 8002036:	0013      	movs	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	43db      	mvns	r3, r3
 800203e:	400b      	ands	r3, r1
 8002040:	001a      	movs	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	0a09      	lsrs	r1, r1, #8
 800204a:	434b      	muls	r3, r1
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	0a09      	lsrs	r1, r1, #8
 8002050:	434b      	muls	r3, r1
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	0a09      	lsrs	r1, r1, #8
 8002056:	434b      	muls	r3, r1
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	434b      	muls	r3, r1
 800205c:	431a      	orrs	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}

0800206a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800207c:	e048      	b.n	8002110 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4091      	lsls	r1, r2
 8002088:	000a      	movs	r2, r1
 800208a:	4013      	ands	r3, r2
 800208c:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d03a      	beq.n	800210a <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d003      	beq.n	80020a4 <LL_GPIO_Init+0x3a>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d10e      	bne.n	80020c2 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff ff54 	bl	8001f5a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff ff37 	bl	8001f30 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff ff61 	bl	8001f92 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d111      	bne.n	80020fc <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2bff      	cmp	r3, #255	; 0xff
 80020dc:	d807      	bhi.n	80020ee <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff ff6f 	bl	8001fca <LL_GPIO_SetAFPin_0_7>
 80020ec:	e006      	b.n	80020fc <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff ff8a 	bl	8002010 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff fef7 	bl	8001ef8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3301      	adds	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	40da      	lsrs	r2, r3
 8002118:	1e13      	subs	r3, r2, #0
 800211a:	d1b0      	bne.n	800207e <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800211c:	2300      	movs	r3, #0
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}

08002126 <LL_TIM_SetPrescaler>:
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}

0800213e <LL_TIM_SetAutoReload>:
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b002      	add	sp, #8
 8002154:	bd80      	pop	{r7, pc}

08002156 <LL_TIM_OC_SetCompareCH1>:
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}

0800216e <LL_TIM_OC_SetCompareCH2>:
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}

08002186 <LL_TIM_OC_SetCompareCH3>:
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b002      	add	sp, #8
 800219c:	bd80      	pop	{r7, pc}

0800219e <LL_TIM_OC_SetCompareCH4>:
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2201      	movs	r2, #1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	615a      	str	r2, [r3, #20]
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b002      	add	sp, #8
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	05db      	lsls	r3, r3, #23
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d003      	beq.n	80021f6 <LL_TIM_Init+0x22>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <LL_TIM_Init+0x88>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d107      	bne.n	8002206 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2270      	movs	r2, #112	; 0x70
 80021fa:	4393      	bics	r3, r2
 80021fc:	001a      	movs	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	05db      	lsls	r3, r3, #23
 800220c:	429a      	cmp	r2, r3
 800220e:	d003      	beq.n	8002218 <LL_TIM_Init+0x44>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <LL_TIM_Init+0x88>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d106      	bne.n	8002226 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a11      	ldr	r2, [pc, #68]	; (8002260 <LL_TIM_Init+0x8c>)
 800221c:	401a      	ands	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	0011      	movs	r1, r2
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff ff82 	bl	800213e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	001a      	movs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0011      	movs	r1, r2
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff ff6e 	bl	8002126 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff ffb2 	bl	80021b6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002252:	2300      	movs	r3, #0
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010800 	.word	0x40010800
 8002260:	fffffcff 	.word	0xfffffcff

08002264 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002270:	2317      	movs	r3, #23
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	429a      	cmp	r2, r3
 8002280:	d036      	beq.n	80022f0 <LL_TIM_OC_Init+0x8c>
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	429a      	cmp	r2, r3
 800228a:	d83c      	bhi.n	8002306 <LL_TIM_OC_Init+0xa2>
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	429a      	cmp	r2, r3
 8002294:	d021      	beq.n	80022da <LL_TIM_OC_Init+0x76>
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	429a      	cmp	r2, r3
 800229e:	d832      	bhi.n	8002306 <LL_TIM_OC_Init+0xa2>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d003      	beq.n	80022ae <LL_TIM_OC_Init+0x4a>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d00b      	beq.n	80022c4 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80022ac:	e02b      	b.n	8002306 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80022ae:	2317      	movs	r3, #23
 80022b0:	18fc      	adds	r4, r7, r3
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	0011      	movs	r1, r2
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 f82c 	bl	8002316 <OC1Config>
 80022be:	0003      	movs	r3, r0
 80022c0:	7023      	strb	r3, [r4, #0]
      break;
 80022c2:	e021      	b.n	8002308 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80022c4:	2317      	movs	r3, #23
 80022c6:	18fc      	adds	r4, r7, r3
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0011      	movs	r1, r2
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 f868 	bl	80023a4 <OC2Config>
 80022d4:	0003      	movs	r3, r0
 80022d6:	7023      	strb	r3, [r4, #0]
      break;
 80022d8:	e016      	b.n	8002308 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80022da:	2317      	movs	r3, #23
 80022dc:	18fc      	adds	r4, r7, r3
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	0011      	movs	r1, r2
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f8a9 	bl	800243c <OC3Config>
 80022ea:	0003      	movs	r3, r0
 80022ec:	7023      	strb	r3, [r4, #0]
      break;
 80022ee:	e00b      	b.n	8002308 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022f0:	2317      	movs	r3, #23
 80022f2:	18fc      	adds	r4, r7, r3
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0011      	movs	r1, r2
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 f8e8 	bl	80024d0 <OC4Config>
 8002300:	0003      	movs	r3, r0
 8002302:	7023      	strb	r3, [r4, #0]
      break;
 8002304:	e000      	b.n	8002308 <LL_TIM_OC_Init+0xa4>
      break;
 8002306:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002308:	2317      	movs	r3, #23
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b007      	add	sp, #28
 8002314:	bd90      	pop	{r4, r7, pc}

08002316 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	2201      	movs	r2, #1
 8002326:	4393      	bics	r3, r2
 8002328:	001a      	movs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2203      	movs	r2, #3
 8002344:	4393      	bics	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2270      	movs	r2, #112	; 0x70
 800234c:	4393      	bics	r3, r2
 800234e:	001a      	movs	r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2202      	movs	r2, #2
 800235c:	4393      	bics	r3, r2
 800235e:	001a      	movs	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2201      	movs	r2, #1
 800236c:	4393      	bics	r3, r2
 800236e:	001a      	movs	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff fee2 	bl	8002156 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b006      	add	sp, #24
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	2210      	movs	r2, #16
 80023b4:	4393      	bics	r3, r2
 80023b6:	001a      	movs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a18      	ldr	r2, [pc, #96]	; (8002434 <OC2Config+0x90>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a17      	ldr	r2, [pc, #92]	; (8002438 <OC2Config+0x94>)
 80023da:	401a      	ands	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2220      	movs	r2, #32
 80023ea:	4393      	bics	r3, r2
 80023ec:	001a      	movs	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2210      	movs	r2, #16
 80023fc:	4393      	bics	r3, r2
 80023fe:	001a      	movs	r2, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0011      	movs	r1, r2
 800241e:	0018      	movs	r0, r3
 8002420:	f7ff fea5 	bl	800216e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800242a:	2300      	movs	r3, #0
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b006      	add	sp, #24
 8002432:	bd80      	pop	{r7, pc}
 8002434:	fffffcff 	.word	0xfffffcff
 8002438:	ffff8fff 	.word	0xffff8fff

0800243c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <OC3Config+0x8c>)
 800244c:	401a      	ands	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2203      	movs	r2, #3
 8002468:	4393      	bics	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2270      	movs	r2, #112	; 0x70
 8002470:	4393      	bics	r3, r2
 8002472:	001a      	movs	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <OC3Config+0x90>)
 8002480:	401a      	ands	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	4a0e      	ldr	r2, [pc, #56]	; (80024c8 <OC3Config+0x8c>)
 8002490:	401a      	ands	r2, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff fe68 	bl	8002186 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b006      	add	sp, #24
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	fffffeff 	.word	0xfffffeff
 80024cc:	fffffdff 	.word	0xfffffdff

080024d0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <OC4Config+0x8c>)
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a19      	ldr	r2, [pc, #100]	; (8002560 <OC4Config+0x90>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a18      	ldr	r2, [pc, #96]	; (8002564 <OC4Config+0x94>)
 8002504:	401a      	ands	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	4a15      	ldr	r2, [pc, #84]	; (8002568 <OC4Config+0x98>)
 8002514:	401a      	ands	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	031b      	lsls	r3, r3, #12
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <OC4Config+0x8c>)
 8002524:	401a      	ands	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	031b      	lsls	r3, r3, #12
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff fe2a 	bl	800219e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002550:	2300      	movs	r3, #0
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b006      	add	sp, #24
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	ffffefff 	.word	0xffffefff
 8002560:	fffffcff 	.word	0xfffffcff
 8002564:	ffff8fff 	.word	0xffff8fff
 8002568:	ffffdfff 	.word	0xffffdfff

0800256c <__libc_init_array>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	2600      	movs	r6, #0
 8002570:	4d0c      	ldr	r5, [pc, #48]	; (80025a4 <__libc_init_array+0x38>)
 8002572:	4c0d      	ldr	r4, [pc, #52]	; (80025a8 <__libc_init_array+0x3c>)
 8002574:	1b64      	subs	r4, r4, r5
 8002576:	10a4      	asrs	r4, r4, #2
 8002578:	42a6      	cmp	r6, r4
 800257a:	d109      	bne.n	8002590 <__libc_init_array+0x24>
 800257c:	2600      	movs	r6, #0
 800257e:	f000 f821 	bl	80025c4 <_init>
 8002582:	4d0a      	ldr	r5, [pc, #40]	; (80025ac <__libc_init_array+0x40>)
 8002584:	4c0a      	ldr	r4, [pc, #40]	; (80025b0 <__libc_init_array+0x44>)
 8002586:	1b64      	subs	r4, r4, r5
 8002588:	10a4      	asrs	r4, r4, #2
 800258a:	42a6      	cmp	r6, r4
 800258c:	d105      	bne.n	800259a <__libc_init_array+0x2e>
 800258e:	bd70      	pop	{r4, r5, r6, pc}
 8002590:	00b3      	lsls	r3, r6, #2
 8002592:	58eb      	ldr	r3, [r5, r3]
 8002594:	4798      	blx	r3
 8002596:	3601      	adds	r6, #1
 8002598:	e7ee      	b.n	8002578 <__libc_init_array+0xc>
 800259a:	00b3      	lsls	r3, r6, #2
 800259c:	58eb      	ldr	r3, [r5, r3]
 800259e:	4798      	blx	r3
 80025a0:	3601      	adds	r6, #1
 80025a2:	e7f2      	b.n	800258a <__libc_init_array+0x1e>
 80025a4:	08002890 	.word	0x08002890
 80025a8:	08002890 	.word	0x08002890
 80025ac:	08002890 	.word	0x08002890
 80025b0:	08002894 	.word	0x08002894

080025b4 <memset>:
 80025b4:	0003      	movs	r3, r0
 80025b6:	1882      	adds	r2, r0, r2
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d100      	bne.n	80025be <memset+0xa>
 80025bc:	4770      	bx	lr
 80025be:	7019      	strb	r1, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	e7f9      	b.n	80025b8 <memset+0x4>

080025c4 <_init>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ca:	bc08      	pop	{r3}
 80025cc:	469e      	mov	lr, r3
 80025ce:	4770      	bx	lr

080025d0 <_fini>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr
