
ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003984  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab8  08003ab8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac0  08003ac0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003ad4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003ad4  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dce2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd3  00000000  00000000  0002dd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00030440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011432  00000000  00000000  00030ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3bd  00000000  00000000  0004231a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c97d  00000000  00000000  0004f6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e4  00000000  00000000  000bc0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a2c 	.word	0x08003a2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a2c 	.word	0x08003a2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b09a      	sub	sp, #104	; 0x68
 80004a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004a2:	f000 fbf3 	bl	8000c8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004a6:	f000 f829 	bl	80004fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004aa:	f000 f9eb 	bl	8000884 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ae:	f000 f9b9 	bl	8000824 <MX_USART2_UART_Init>
	MX_ADC_Init();
 80004b2:	f000 f895 	bl	80005e0 <MX_ADC_Init>
	MX_TIM2_Init();
 80004b6:	f000 f923 	bl	8000700 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <main+0x50>)
 80004bc:	2108      	movs	r1, #8
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 ffe0 	bl	8002484 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <main+0x50>)
 80004c6:	210c      	movs	r1, #12
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 ffdb 	bl	8002484 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <main+0x50>)
 80004d0:	2100      	movs	r1, #0
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 ffd6 	bl	8002484 <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		val = 33;
 80004d8:	2321      	movs	r3, #33	; 0x21
 80004da:	667b      	str	r3, [r7, #100]	; 0x64
		HAL_UART_Transmit(&huart2, "neko\r\n", 6, 0xFFFF);
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <main+0x54>)
 80004de:	4905      	ldr	r1, [pc, #20]	; (80004f4 <main+0x58>)
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <main+0x5c>)
 80004e2:	2206      	movs	r2, #6
 80004e4:	f002 fdac 	bl	8003040 <HAL_UART_Transmit>
		val = 33;
 80004e8:	e7f6      	b.n	80004d8 <main+0x3c>
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	20000028 	.word	0x20000028
 80004f0:	0000ffff 	.word	0x0000ffff
 80004f4:	08003a44 	.word	0x08003a44
 80004f8:	20000068 	.word	0x20000068

080004fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b099      	sub	sp, #100	; 0x64
 8000500:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000502:	242c      	movs	r4, #44	; 0x2c
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2334      	movs	r3, #52	; 0x34
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f003 fa85 	bl	8003a1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000512:	2318      	movs	r3, #24
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f003 fa7d 	bl	8003a1c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2318      	movs	r3, #24
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f003 fa76 	bl	8003a1c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <SystemClock_Config+0xdc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a29      	ldr	r2, [pc, #164]	; (80005dc <SystemClock_Config+0xe0>)
 8000536:	401a      	ands	r2, r3
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <SystemClock_Config+0xdc>)
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	0109      	lsls	r1, r1, #4
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2210      	movs	r2, #16
 8000554:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	02d2      	lsls	r2, r2, #11
 8000568:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	03d2      	lsls	r2, r2, #15
 8000570:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000572:	187b      	adds	r3, r7, r1
 8000574:	0018      	movs	r0, r3
 8000576:	f001 f837 	bl	80015e8 <HAL_RCC_OscConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x86>
		Error_Handler();
 800057e:	f000 fa01 	bl	8000984 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000582:	2118      	movs	r1, #24
 8000584:	187b      	adds	r3, r7, r1
 8000586:	220f      	movs	r2, #15
 8000588:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2203      	movs	r2, #3
 800058e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2101      	movs	r1, #1
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fb9a 	bl	8001ce0 <HAL_RCC_ClockConfig>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xb8>
		Error_Handler();
 80005b0:	f000 f9e8 	bl	8000984 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005b4:	003b      	movs	r3, r7
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ba:	003b      	movs	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005c0:	003b      	movs	r3, r7
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fdb0 	bl	8002128 <HAL_RCCEx_PeriphCLKConfig>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xd4>
		Error_Handler();
 80005cc:	f000 f9da 	bl	8000984 <Error_Handler>
	}
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b019      	add	sp, #100	; 0x64
 80005d6:	bd90      	pop	{r4, r7, pc}
 80005d8:	40007000 	.word	0x40007000
 80005dc:	ffffe7ff 	.word	0xffffe7ff

080005e0 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005e6:	003b      	movs	r3, r7
 80005e8:	0018      	movs	r0, r3
 80005ea:	2308      	movs	r3, #8
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f003 fa14 	bl	8003a1c <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80005f4:	4b3d      	ldr	r3, [pc, #244]	; (80006ec <MX_ADC_Init+0x10c>)
 80005f6:	4a3e      	ldr	r2, [pc, #248]	; (80006f0 <MX_ADC_Init+0x110>)
 80005f8:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 80005fa:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <MX_ADC_Init+0x10c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000600:	4b3a      	ldr	r3, [pc, #232]	; (80006ec <MX_ADC_Init+0x10c>)
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	05d2      	lsls	r2, r2, #23
 8000606:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b38      	ldr	r3, [pc, #224]	; (80006ec <MX_ADC_Init+0x10c>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800060e:	4b37      	ldr	r3, [pc, #220]	; (80006ec <MX_ADC_Init+0x10c>)
 8000610:	2200      	movs	r2, #0
 8000612:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000614:	4b35      	ldr	r3, [pc, #212]	; (80006ec <MX_ADC_Init+0x10c>)
 8000616:	2201      	movs	r2, #1
 8000618:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061a:	4b34      	ldr	r3, [pc, #208]	; (80006ec <MX_ADC_Init+0x10c>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000620:	4b32      	ldr	r3, [pc, #200]	; (80006ec <MX_ADC_Init+0x10c>)
 8000622:	2220      	movs	r2, #32
 8000624:	2100      	movs	r1, #0
 8000626:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <MX_ADC_Init+0x10c>)
 800062a:	2221      	movs	r2, #33	; 0x21
 800062c:	2100      	movs	r1, #0
 800062e:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <MX_ADC_Init+0x10c>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <MX_ADC_Init+0x10c>)
 8000638:	22c2      	movs	r2, #194	; 0xc2
 800063a:	32ff      	adds	r2, #255	; 0xff
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <MX_ADC_Init+0x10c>)
 8000640:	222c      	movs	r2, #44	; 0x2c
 8000642:	2100      	movs	r1, #0
 8000644:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <MX_ADC_Init+0x10c>)
 8000648:	2204      	movs	r2, #4
 800064a:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_ADC_Init+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <MX_ADC_Init+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_ADC_Init+0x10c>)
 800065a:	2200      	movs	r2, #0
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <MX_ADC_Init+0x10c>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_ADC_Init+0x10c>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fb80 	bl	8000d6c <HAL_ADC_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC_Init+0x94>
		Error_Handler();
 8000670:	f000 f988 	bl	8000984 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000674:	003b      	movs	r3, r7
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800067a:	003b      	movs	r3, r7
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0152      	lsls	r2, r2, #5
 8000680:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000682:	003a      	movs	r2, r7
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC_Init+0x10c>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fce3 	bl	8001054 <HAL_ADC_ConfigChannel>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC_Init+0xb6>
		Error_Handler();
 8000692:	f000 f977 	bl	8000984 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000696:	003b      	movs	r3, r7
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_ADC_Init+0x114>)
 800069a:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800069c:	003a      	movs	r2, r7
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_ADC_Init+0x10c>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fcd6 	bl	8001054 <HAL_ADC_ConfigChannel>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC_Init+0xd0>
		Error_Handler();
 80006ac:	f000 f96a 	bl	8000984 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80006b0:	003b      	movs	r3, r7
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <MX_ADC_Init+0x118>)
 80006b4:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80006b6:	003a      	movs	r2, r7
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_ADC_Init+0x10c>)
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fcc9 	bl	8001054 <HAL_ADC_ConfigChannel>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC_Init+0xea>
		Error_Handler();
 80006c6:	f000 f95d 	bl	8000984 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 80006ca:	003b      	movs	r3, r7
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <MX_ADC_Init+0x11c>)
 80006ce:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80006d0:	003a      	movs	r2, r7
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_ADC_Init+0x10c>)
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fcbc 	bl	8001054 <HAL_ADC_ConfigChannel>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC_Init+0x104>
		Error_Handler();
 80006e0:	f000 f950 	bl	8000984 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000ec 	.word	0x200000ec
 80006f0:	40012400 	.word	0x40012400
 80006f4:	04000002 	.word	0x04000002
 80006f8:	10000010 	.word	0x10000010
 80006fc:	1c000080 	.word	0x1c000080

08000700 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000706:	2318      	movs	r3, #24
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	0018      	movs	r0, r3
 800070c:	2310      	movs	r3, #16
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 f983 	bl	8003a1c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000716:	2310      	movs	r3, #16
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	0018      	movs	r0, r3
 800071c:	2308      	movs	r3, #8
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f003 f97b 	bl	8003a1c <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000726:	003b      	movs	r3, r7
 8000728:	0018      	movs	r0, r3
 800072a:	2310      	movs	r3, #16
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f003 f974 	bl	8003a1c <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000734:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <MX_TIM2_Init+0x120>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	05d2      	lsls	r2, r2, #23
 800073a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800073c:	4b38      	ldr	r3, [pc, #224]	; (8000820 <MX_TIM2_Init+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <MX_TIM2_Init+0x120>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 255;
 8000748:	4b35      	ldr	r3, [pc, #212]	; (8000820 <MX_TIM2_Init+0x120>)
 800074a:	22ff      	movs	r2, #255	; 0xff
 800074c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <MX_TIM2_Init+0x120>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <MX_TIM2_Init+0x120>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <MX_TIM2_Init+0x120>)
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fe09 	bl	8002374 <HAL_TIM_Base_Init>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000766:	f000 f90d 	bl	8000984 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076a:	2118      	movs	r1, #24
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	0152      	lsls	r2, r2, #5
 8000772:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000774:	187a      	adds	r2, r7, r1
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <MX_TIM2_Init+0x120>)
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f002 f8b4 	bl	80028e8 <HAL_TIM_ConfigClockSource>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0x88>
		Error_Handler();
 8000784:	f000 f8fe 	bl	8000984 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <MX_TIM2_Init+0x120>)
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fe32 	bl	80023f4 <HAL_TIM_PWM_Init>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x98>
		Error_Handler();
 8000794:	f000 f8f6 	bl	8000984 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2110      	movs	r1, #16
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80007a6:	187a      	adds	r2, r7, r1
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_TIM2_Init+0x120>)
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fba3 	bl	8002ef8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 80007b6:	f000 f8e5 	bl	8000984 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2260      	movs	r2, #96	; 0x60
 80007be:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80007c0:	003b      	movs	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	003b      	movs	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80007d2:	0039      	movs	r1, r7
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_TIM2_Init+0x120>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f001 ffbf 	bl	800275c <HAL_TIM_PWM_ConfigChannel>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 80007e2:	f000 f8cf 	bl	8000984 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80007e6:	0039      	movs	r1, r7
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_TIM2_Init+0x120>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 ffb5 	bl	800275c <HAL_TIM_PWM_ConfigChannel>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80007f6:	f000 f8c5 	bl	8000984 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 80007fa:	0039      	movs	r1, r7
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_TIM2_Init+0x120>)
 80007fe:	220c      	movs	r2, #12
 8000800:	0018      	movs	r0, r3
 8000802:	f001 ffab 	bl	800275c <HAL_TIM_PWM_ConfigChannel>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x10e>
			!= HAL_OK) {
		Error_Handler();
 800080a:	f000 f8bb 	bl	8000984 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <MX_TIM2_Init+0x120>)
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f92b 	bl	8000a6c <HAL_TIM_MspPostInit>

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b00a      	add	sp, #40	; 0x28
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000028 	.word	0x20000028

08000824 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	22e1      	movs	r2, #225	; 0xe1
 8000832:	0252      	lsls	r2, r2, #9
 8000834:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	0018      	movs	r0, r3
 800086a:	f002 fb95 	bl	8002f98 <HAL_UART_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000872:	f000 f887 	bl	8000984 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000068 	.word	0x20000068
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800088a:	240c      	movs	r4, #12
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2314      	movs	r3, #20
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f003 f8c1 	bl	8003a1c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0xf8>)
 800089c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_GPIO_Init+0xf8>)
 80008a0:	2104      	movs	r1, #4
 80008a2:	430a      	orrs	r2, r1
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0xf8>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	2204      	movs	r2, #4
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <MX_GPIO_Init+0xf8>)
 80008b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_GPIO_Init+0xf8>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_GPIO_Init+0xf8>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_GPIO_Init+0xf8>)
 80008cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_GPIO_Init+0xf8>)
 80008d0:	2102      	movs	r1, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0xf8>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	2202      	movs	r2, #2
 80008dc:	4013      	ands	r3, r2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	01db      	lsls	r3, r3, #7
 80008e6:	4826      	ldr	r0, [pc, #152]	; (8000980 <MX_GPIO_Init+0xfc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	0019      	movs	r1, r3
 80008ec:	f000 fe5e 	bl	80015ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_9, GPIO_PIN_RESET);
 80008f0:	2390      	movs	r3, #144	; 0x90
 80008f2:	0099      	lsls	r1, r3, #2
 80008f4:	23a0      	movs	r3, #160	; 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2200      	movs	r2, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fe56 	bl	80015ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	01d2      	lsls	r2, r2, #7
 8000906:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2201      	movs	r2, #1
 800090c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	193b      	adds	r3, r7, r4
 800091c:	4a18      	ldr	r2, [pc, #96]	; (8000980 <MX_GPIO_Init+0xfc>)
 800091e:	0019      	movs	r1, r3
 8000920:	0010      	movs	r0, r2
 8000922:	f000 fcdd 	bl	80012e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000926:	0021      	movs	r1, r4
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	0212      	lsls	r2, r2, #8
 800092e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	000c      	movs	r4, r1
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093e:	193b      	adds	r3, r7, r4
 8000940:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <MX_GPIO_Init+0xfc>)
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f000 fccb 	bl	80012e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA6 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2290      	movs	r2, #144	; 0x90
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2201      	movs	r2, #1
 8000958:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	187a      	adds	r2, r7, r1
 8000968:	23a0      	movs	r3, #160	; 0xa0
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fcb6 	bl	80012e0 <HAL_GPIO_Init>

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b009      	add	sp, #36	; 0x24
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	50000800 	.word	0x50000800

08000984 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <HAL_MspInit+0x24>)
 8000996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x24>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <HAL_MspInit+0x24>)
 80009a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_MspInit+0x24>)
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	0549      	lsls	r1, r1, #21
 80009aa:	430a      	orrs	r2, r1
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	240c      	movs	r4, #12
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f003 f826 	bl	8003a1c <memset>
  if(hadc->Instance==ADC1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <HAL_ADC_MspInit+0x70>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d122      	bne.n	8000a20 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_ADC_MspInit+0x74>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_ADC_MspInit+0x74>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0089      	lsls	r1, r1, #2
 80009e4:	430a      	orrs	r2, r1
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_ADC_MspInit+0x74>)
 80009ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_ADC_MspInit+0x74>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	430a      	orrs	r2, r1
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_ADC_MspInit+0x74>)
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	2201      	movs	r2, #1
 80009fa:	4013      	ands	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    PA0-CK_IN     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2293      	movs	r2, #147	; 0x93
 8000a04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2203      	movs	r2, #3
 8000a0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	193a      	adds	r2, r7, r4
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fc60 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b009      	add	sp, #36	; 0x24
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	40012400 	.word	0x40012400
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d10d      	bne.n	8000a60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_TIM_Base_MspInit+0x38>)
 8000a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_TIM_Base_MspInit+0x38>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	200f      	movs	r0, #15
 8000a56:	f000 fc11 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 fc23 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	; 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	2414      	movs	r4, #20
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f002 ffcc 	bl	8003a1c <memset>
  if(htim->Instance==TIM2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d144      	bne.n	8000b1a <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <HAL_TIM_MspPostInit+0xb8>)
 8000a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_TIM_MspPostInit+0xb8>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <HAL_TIM_MspPostInit+0xb8>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <HAL_TIM_MspPostInit+0xb8>)
 8000aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_TIM_MspPostInit+0xb8>)
 8000aae:	2102      	movs	r1, #2
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_TIM_MspPostInit+0xb8>)
 8000ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab8:	2202      	movs	r2, #2
 8000aba:	4013      	ands	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB1     ------> TIM2_CH4
    PA10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2284      	movs	r2, #132	; 0x84
 8000ac4:	00d2      	lsls	r2, r2, #3
 8000ac6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2202      	movs	r2, #2
 8000acc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2205      	movs	r2, #5
 8000ade:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	193a      	adds	r2, r7, r4
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fbf9 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aee:	0021      	movs	r1, r4
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2202      	movs	r2, #2
 8000af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2202      	movs	r2, #2
 8000afa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2205      	movs	r2, #5
 8000b0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <HAL_TIM_MspPostInit+0xbc>)
 8000b12:	0019      	movs	r1, r3
 8000b14:	0010      	movs	r0, r2
 8000b16:	f000 fbe3 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b00b      	add	sp, #44	; 0x2c
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40021000 	.word	0x40021000
 8000b28:	50000400 	.word	0x50000400

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	240c      	movs	r4, #12
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f002 ff6c 	bl	8003a1c <memset>
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a18      	ldr	r2, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d129      	bne.n	8000ba2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0289      	lsls	r1, r1, #10
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	430a      	orrs	r2, r1
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b74:	0021      	movs	r1, r4
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	220c      	movs	r2, #12
 8000b7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2202      	movs	r2, #2
 8000b80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2204      	movs	r2, #4
 8000b92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	187a      	adds	r2, r7, r1
 8000b96:	23a0      	movs	r3, #160	; 0xa0
 8000b98:	05db      	lsls	r3, r3, #23
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 fb9f 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b009      	add	sp, #36	; 0x24
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f8ac 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <TIM2_IRQHandler+0x14>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 fcce 	bl	800258c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000028 	.word	0x20000028

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c08:	4813      	ldr	r0, [pc, #76]	; (8000c58 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <LoopForever+0x6>)
    LDR R1, [R0]
 8000c0e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c10:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c12:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <LoopForever+0xa>)
    CMP R1, R2
 8000c14:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c16:	d105      	bne.n	8000c24 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c1a:	4913      	ldr	r1, [pc, #76]	; (8000c68 <LoopForever+0x12>)
    STR R1, [R0]
 8000c1c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c1e:	4813      	ldr	r0, [pc, #76]	; (8000c6c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c20:	4913      	ldr	r1, [pc, #76]	; (8000c70 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c22:	6001      	str	r1, [r0, #0]

08000c24 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	4813      	ldr	r0, [pc, #76]	; (8000c74 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c26:	4914      	ldr	r1, [pc, #80]	; (8000c78 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <LoopForever+0x26>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000c3c:	4c11      	ldr	r4, [pc, #68]	; (8000c84 <LoopForever+0x2e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 fec1 	bl	80039d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc23 	bl	800049c <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
   ldr   r0, =_estack
 8000c58:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000c5c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c60:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c64:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c68:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c6c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c70:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c7c:	08003ac8 	.word	0x08003ac8
  ldr r2, =_sbss
 8000c80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c84:	2000014c 	.word	0x2000014c

08000c88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_IRQHandler>
	...

08000c8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x3c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Init+0x3c>)
 8000c9e:	2140      	movs	r1, #64	; 0x40
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f811 	bl	8000ccc <HAL_InitTick>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e001      	b.n	8000cba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb6:	f7ff fe6b 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
}
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_InitTick+0x5c>)
 8000cd6:	681c      	ldr	r4, [r3, #0]
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_InitTick+0x60>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	0019      	movs	r1, r3
 8000cde:	23fa      	movs	r3, #250	; 0xfa
 8000ce0:	0098      	lsls	r0, r3, #2
 8000ce2:	f7ff fa11 	bl	8000108 <__udivsi3>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	0019      	movs	r1, r3
 8000cea:	0020      	movs	r0, r4
 8000cec:	f7ff fa0c 	bl	8000108 <__udivsi3>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fae7 	bl	80012c6 <HAL_SYSTICK_Config>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e00f      	b.n	8000d20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d80b      	bhi.n	8000d1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fab4 	bl	800127c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_InitTick+0x64>)
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b003      	add	sp, #12
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_IncTick+0x1c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x20>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	18d2      	adds	r2, r2, r3
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_IncTick+0x20>)
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000148 	.word	0x20000148

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <HAL_GetTick+0x10>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000148 	.word	0x20000148

08000d6c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e159      	b.n	8001032 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10a      	bne.n	8000d9c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2250      	movs	r2, #80	; 0x50
 8000d90:	2100      	movs	r1, #0
 8000d92:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff fe0e 	bl	80009b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da0:	2210      	movs	r2, #16
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b10      	cmp	r3, #16
 8000da6:	d005      	beq.n	8000db4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2204      	movs	r2, #4
 8000db0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000db2:	d00b      	beq.n	8000dcc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db8:	2210      	movs	r2, #16
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2250      	movs	r2, #80	; 0x50
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e132      	b.n	8001032 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd0:	4a9a      	ldr	r2, [pc, #616]	; (800103c <HAL_ADC_Init+0x2d0>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2203      	movs	r2, #3
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d108      	bne.n	8000dfc <HAL_ADC_Init+0x90>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d101      	bne.n	8000dfc <HAL_ADC_Init+0x90>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_ADC_Init+0x92>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d149      	bne.n	8000e96 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	23c0      	movs	r3, #192	; 0xc0
 8000e08:	061b      	lsls	r3, r3, #24
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d00b      	beq.n	8000e26 <HAL_ADC_Init+0xba>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d005      	beq.n	8000e26 <HAL_ADC_Init+0xba>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	061b      	lsls	r3, r3, #24
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d111      	bne.n	8000e4a <HAL_ADC_Init+0xde>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	0892      	lsrs	r2, r2, #2
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6919      	ldr	r1, [r3, #16]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	e014      	b.n	8000e74 <HAL_ADC_Init+0x108>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	0892      	lsrs	r2, r2, #2
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	4b79      	ldr	r3, [pc, #484]	; (8001040 <HAL_ADC_Init+0x2d4>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b78      	ldr	r3, [pc, #480]	; (8001040 <HAL_ADC_Init+0x2d4>)
 8000e60:	4978      	ldr	r1, [pc, #480]	; (8001044 <HAL_ADC_Init+0x2d8>)
 8000e62:	400a      	ands	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	4b76      	ldr	r3, [pc, #472]	; (8001040 <HAL_ADC_Init+0x2d4>)
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	4b74      	ldr	r3, [pc, #464]	; (8001040 <HAL_ADC_Init+0x2d4>)
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2118      	movs	r1, #24
 8000e80:	438a      	bics	r2, r1
 8000e82:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68d9      	ldr	r1, [r3, #12]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000e96:	4b6a      	ldr	r3, [pc, #424]	; (8001040 <HAL_ADC_Init+0x2d4>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b69      	ldr	r3, [pc, #420]	; (8001040 <HAL_ADC_Init+0x2d4>)
 8000e9c:	496a      	ldr	r1, [pc, #424]	; (8001048 <HAL_ADC_Init+0x2dc>)
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000ea2:	4b67      	ldr	r3, [pc, #412]	; (8001040 <HAL_ADC_Init+0x2d4>)
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	065a      	lsls	r2, r3, #25
 8000eac:	4b64      	ldr	r3, [pc, #400]	; (8001040 <HAL_ADC_Init+0x2d4>)
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	055b      	lsls	r3, r3, #21
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d108      	bne.n	8000ed2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	0549      	lsls	r1, r1, #21
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	495b      	ldr	r1, [pc, #364]	; (800104c <HAL_ADC_Init+0x2e0>)
 8000ede:	400a      	ands	r2, r1
 8000ee0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68d9      	ldr	r1, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_ADC_Init+0x18c>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e000      	b.n	8000efa <HAL_ADC_Init+0x18e>
 8000ef8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000efa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2020      	movs	r0, #32
 8000f00:	5c1b      	ldrb	r3, [r3, r0]
 8000f02:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f04:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	202c      	movs	r0, #44	; 0x2c
 8000f0a:	5c1b      	ldrb	r3, [r3, r0]
 8000f0c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f0e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f14:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000f1c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f24:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f32:	23c2      	movs	r3, #194	; 0xc2
 8000f34:	33ff      	adds	r3, #255	; 0xff
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d00b      	beq.n	8000f52 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68d9      	ldr	r1, [r3, #12]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2221      	movs	r2, #33	; 0x21
 8000f56:	5c9b      	ldrb	r3, [r3, r2]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d11a      	bne.n	8000f92 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2220      	movs	r2, #32
 8000f60:	5c9b      	ldrb	r3, [r3, r2]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d109      	bne.n	8000f7a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	0249      	lsls	r1, r1, #9
 8000f74:	430a      	orrs	r2, r1
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	e00b      	b.n	8000f92 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7e:	2220      	movs	r2, #32
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d11f      	bne.n	8000fda <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	492a      	ldr	r1, [pc, #168]	; (8001050 <HAL_ADC_Init+0x2e4>)
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6919      	ldr	r1, [r3, #16]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000fb8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000fbe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	e00e      	b.n	8000ff8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d107      	bne.n	8000ff8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2107      	movs	r1, #7
 8001004:	438a      	bics	r2, r1
 8001006:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6959      	ldr	r1, [r3, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001024:	2203      	movs	r2, #3
 8001026:	4393      	bics	r3, r2
 8001028:	2201      	movs	r2, #1
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	fffffefd 	.word	0xfffffefd
 8001040:	40012708 	.word	0x40012708
 8001044:	ffc3ffff 	.word	0xffc3ffff
 8001048:	fdffffff 	.word	0xfdffffff
 800104c:	fffe0219 	.word	0xfffe0219
 8001050:	fffffc03 	.word	0xfffffc03

08001054 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2250      	movs	r2, #80	; 0x50
 8001062:	5c9b      	ldrb	r3, [r3, r2]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_ADC_ConfigChannel+0x18>
 8001068:	2302      	movs	r3, #2
 800106a:	e050      	b.n	800110e <HAL_ADC_ConfigChannel+0xba>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2250      	movs	r2, #80	; 0x50
 8001070:	2101      	movs	r1, #1
 8001072:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2204      	movs	r2, #4
 800107c:	4013      	ands	r3, r2
 800107e:	d00b      	beq.n	8001098 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001084:	2220      	movs	r2, #32
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2250      	movs	r2, #80	; 0x50
 8001090:	2100      	movs	r1, #0
 8001092:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e03a      	b.n	800110e <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <HAL_ADC_ConfigChannel+0xc4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d018      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	035b      	lsls	r3, r3, #13
 80010ae:	0b5a      	lsrs	r2, r3, #13
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	4013      	ands	r3, r2
 80010c2:	d01f      	beq.n	8001104 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_ADC_ConfigChannel+0xc8>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_ADC_ConfigChannel+0xc8>)
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	03c9      	lsls	r1, r1, #15
 80010ce:	430a      	orrs	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e017      	b.n	8001104 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	035b      	lsls	r3, r3, #13
 80010e0:	0b5b      	lsrs	r3, r3, #13
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	400a      	ands	r2, r1
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	d005      	beq.n	8001104 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_ADC_ConfigChannel+0xc8>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_ADC_ConfigChannel+0xc8>)
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <HAL_ADC_ConfigChannel+0xcc>)
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2250      	movs	r2, #80	; 0x50
 8001108:	2100      	movs	r1, #0
 800110a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	00001001 	.word	0x00001001
 800111c:	40012708 	.word	0x40012708
 8001120:	ffbfffff 	.word	0xffbfffff

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	0002      	movs	r2, r0
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b7f      	cmp	r3, #127	; 0x7f
 8001136:	d809      	bhi.n	800114c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	001a      	movs	r2, r3
 800113e:	231f      	movs	r3, #31
 8001140:	401a      	ands	r2, r3
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_EnableIRQ+0x30>)
 8001144:	2101      	movs	r1, #1
 8001146:	4091      	lsls	r1, r2
 8001148:	000a      	movs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
  }
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	0002      	movs	r2, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b7f      	cmp	r3, #127	; 0x7f
 800116c:	d828      	bhi.n	80011c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116e:	4a2f      	ldr	r2, [pc, #188]	; (800122c <__NVIC_SetPriority+0xd4>)
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	33c0      	adds	r3, #192	; 0xc0
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	589b      	ldr	r3, [r3, r2]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	0011      	movs	r1, r2
 8001184:	2203      	movs	r2, #3
 8001186:	400a      	ands	r2, r1
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	21ff      	movs	r1, #255	; 0xff
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	401a      	ands	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	4003      	ands	r3, r0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	481f      	ldr	r0, [pc, #124]	; (800122c <__NVIC_SetPriority+0xd4>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	430a      	orrs	r2, r1
 80011b8:	33c0      	adds	r3, #192	; 0xc0
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011be:	e031      	b.n	8001224 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <__NVIC_SetPriority+0xd8>)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	0019      	movs	r1, r3
 80011c8:	230f      	movs	r3, #15
 80011ca:	400b      	ands	r3, r1
 80011cc:	3b08      	subs	r3, #8
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3306      	adds	r3, #6
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1dfa      	adds	r2, r7, #7
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	0011      	movs	r1, r2
 80011e0:	2203      	movs	r2, #3
 80011e2:	400a      	ands	r2, r1
 80011e4:	00d2      	lsls	r2, r2, #3
 80011e6:	21ff      	movs	r1, #255	; 0xff
 80011e8:	4091      	lsls	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	43d2      	mvns	r2, r2
 80011ee:	401a      	ands	r2, r3
 80011f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	019b      	lsls	r3, r3, #6
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	401a      	ands	r2, r3
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0018      	movs	r0, r3
 8001200:	2303      	movs	r3, #3
 8001202:	4003      	ands	r3, r0
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <__NVIC_SetPriority+0xd8>)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	001c      	movs	r4, r3
 8001210:	230f      	movs	r3, #15
 8001212:	4023      	ands	r3, r4
 8001214:	3b08      	subs	r3, #8
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	430a      	orrs	r2, r1
 800121a:	3306      	adds	r3, #6
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	18c3      	adds	r3, r0, r3
 8001220:	3304      	adds	r3, #4
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b003      	add	sp, #12
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	045b      	lsls	r3, r3, #17
 8001244:	429a      	cmp	r2, r3
 8001246:	d301      	bcc.n	800124c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001248:	2301      	movs	r3, #1
 800124a:	e010      	b.n	800126e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <SysTick_Config+0x44>)
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	3a01      	subs	r2, #1
 8001252:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	2103      	movs	r1, #3
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ff7c 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x44>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x44>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	210f      	movs	r1, #15
 8001288:	187b      	adds	r3, r7, r1
 800128a:	1c02      	adds	r2, r0, #0
 800128c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	187b      	adds	r3, r7, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	0011      	movs	r1, r2
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	0002      	movs	r2, r0
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ffaf 	bl	8001234 <SysTick_Config>
 80012d6:	0003      	movs	r3, r0
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f6:	e143      	b.n	8001580 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4091      	lsls	r1, r2
 8001302:	000a      	movs	r2, r1
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d100      	bne.n	8001310 <HAL_GPIO_Init+0x30>
 800130e:	e134      	b.n	800157a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	4013      	ands	r3, r2
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	409a      	lsls	r2, r3
 8001336:	0013      	movs	r3, r2
 8001338:	43da      	mvns	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	409a      	lsls	r2, r3
 800134a:	0013      	movs	r3, r2
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	2201      	movs	r2, #1
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2203      	movs	r2, #3
 8001390:	4013      	ands	r3, r2
 8001392:	2b03      	cmp	r3, #3
 8001394:	d017      	beq.n	80013c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	43da      	mvns	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d123      	bne.n	800141a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	58d3      	ldr	r3, [r2, r3]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2207      	movs	r2, #7
 80013e4:	4013      	ands	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	43da      	mvns	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2107      	movs	r1, #7
 80013fe:	400b      	ands	r3, r1
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	409a      	lsls	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	6939      	ldr	r1, [r7, #16]
 8001418:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	43da      	mvns	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2203      	movs	r2, #3
 8001438:	401a      	ands	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	23c0      	movs	r3, #192	; 0xc0
 8001454:	029b      	lsls	r3, r3, #10
 8001456:	4013      	ands	r3, r2
 8001458:	d100      	bne.n	800145c <HAL_GPIO_Init+0x17c>
 800145a:	e08e      	b.n	800157a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145c:	4b4e      	ldr	r3, [pc, #312]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 800145e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001460:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <HAL_GPIO_Init+0x2b8>)
 8001462:	2101      	movs	r1, #1
 8001464:	430a      	orrs	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001468:	4a4c      	ldr	r2, [pc, #304]	; (800159c <HAL_GPIO_Init+0x2bc>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	589b      	ldr	r3, [r3, r2]
 8001474:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2203      	movs	r2, #3
 800147a:	4013      	ands	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	429a      	cmp	r2, r3
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x1d2>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a41      	ldr	r2, [pc, #260]	; (80015a0 <HAL_GPIO_Init+0x2c0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x1ce>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a40      	ldr	r2, [pc, #256]	; (80015a4 <HAL_GPIO_Init+0x2c4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x1ca>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x1d4>
 80014aa:	2306      	movs	r3, #6
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x1d4>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x1d4>
 80014b2:	2300      	movs	r3, #0
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	2103      	movs	r1, #3
 80014b8:	400a      	ands	r2, r1
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	; (800159c <HAL_GPIO_Init+0x2bc>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43da      	mvns	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	4013      	ands	r3, r2
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43da      	mvns	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	035b      	lsls	r3, r3, #13
 800153e:	4013      	ands	r3, r2
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43da      	mvns	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	039b      	lsls	r3, r3, #14
 8001568:	4013      	ands	r3, r2
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_GPIO_Init+0x2c8>)
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	40da      	lsrs	r2, r3
 8001588:	1e13      	subs	r3, r2, #0
 800158a:	d000      	beq.n	800158e <HAL_GPIO_Init+0x2ae>
 800158c:	e6b4      	b.n	80012f8 <HAL_GPIO_Init+0x18>
  }
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b006      	add	sp, #24
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000
 80015a0:	50000400 	.word	0x50000400
 80015a4:	50000800 	.word	0x50000800
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	0008      	movs	r0, r1
 80015b6:	0011      	movs	r1, r2
 80015b8:	1cbb      	adds	r3, r7, #2
 80015ba:	1c02      	adds	r2, r0, #0
 80015bc:	801a      	strh	r2, [r3, #0]
 80015be:	1c7b      	adds	r3, r7, #1
 80015c0:	1c0a      	adds	r2, r1, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c4:	1c7b      	adds	r3, r7, #1
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015cc:	1cbb      	adds	r3, r7, #2
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80015d6:	1cbb      	adds	r3, r7, #2
 80015d8:	881a      	ldrh	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f000 fb6c 	bl	8001cd4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fc:	4bc8      	ldr	r3, [pc, #800]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	220c      	movs	r2, #12
 8001602:	4013      	ands	r3, r2
 8001604:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001606:	4bc6      	ldr	r3, [pc, #792]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	025b      	lsls	r3, r3, #9
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x36>
 800161c:	e07d      	b.n	800171a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b08      	cmp	r3, #8
 8001622:	d007      	beq.n	8001634 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d112      	bne.n	8001650 <HAL_RCC_OscConfig+0x68>
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	429a      	cmp	r2, r3
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4bba      	ldr	r3, [pc, #744]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	029b      	lsls	r3, r3, #10
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x5a>
 8001640:	e06a      	b.n	8001718 <HAL_RCC_OscConfig+0x130>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d166      	bne.n	8001718 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f000 fb42 	bl	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	025b      	lsls	r3, r3, #9
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x84>
 800165c:	4bb0      	ldr	r3, [pc, #704]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4baf      	ldr	r3, [pc, #700]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0249      	lsls	r1, r1, #9
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e027      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	23a0      	movs	r3, #160	; 0xa0
 8001672:	02db      	lsls	r3, r3, #11
 8001674:	429a      	cmp	r2, r3
 8001676:	d10e      	bne.n	8001696 <HAL_RCC_OscConfig+0xae>
 8001678:	4ba9      	ldr	r3, [pc, #676]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4ba8      	ldr	r3, [pc, #672]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	02c9      	lsls	r1, r1, #11
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	4ba6      	ldr	r3, [pc, #664]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4ba5      	ldr	r3, [pc, #660]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	0249      	lsls	r1, r1, #9
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e012      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 8001696:	4ba2      	ldr	r3, [pc, #648]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4ba1      	ldr	r3, [pc, #644]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800169c:	49a1      	ldr	r1, [pc, #644]	; (8001924 <HAL_RCC_OscConfig+0x33c>)
 800169e:	400a      	ands	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	4b9f      	ldr	r3, [pc, #636]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	025b      	lsls	r3, r3, #9
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4b9b      	ldr	r3, [pc, #620]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b9a      	ldr	r3, [pc, #616]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80016b6:	499c      	ldr	r1, [pc, #624]	; (8001928 <HAL_RCC_OscConfig+0x340>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb48 	bl	8000d58 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ce:	f7ff fb43 	bl	8000d58 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e2f9      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016e0:	4b8f      	ldr	r3, [pc, #572]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	029b      	lsls	r3, r3, #10
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0xe6>
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb33 	bl	8000d58 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fb2e 	bl	8000d58 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e2e4      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800170a:	4b85      	ldr	r3, [pc, #532]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x110>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d100      	bne.n	8001726 <HAL_RCC_OscConfig+0x13e>
 8001724:	e099      	b.n	800185a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	2220      	movs	r2, #32
 8001730:	4013      	ands	r3, r2
 8001732:	d009      	beq.n	8001748 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001734:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b79      	ldr	r3, [pc, #484]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800173a:	2120      	movs	r1, #32
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	2220      	movs	r2, #32
 8001744:	4393      	bics	r3, r2
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b04      	cmp	r3, #4
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d13e      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1ea>
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d13b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800175a:	4b71      	ldr	r3, [pc, #452]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2204      	movs	r2, #4
 8001760:	4013      	ands	r3, r2
 8001762:	d004      	beq.n	800176e <HAL_RCC_OscConfig+0x186>
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e2b2      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x344>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	021a      	lsls	r2, r3, #8
 800177e:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001780:	430a      	orrs	r2, r1
 8001782:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001784:	4b66      	ldr	r3, [pc, #408]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2209      	movs	r2, #9
 800178a:	4393      	bics	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001796:	f000 fbeb 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 800179a:	0001      	movs	r1, r0
 800179c:	4b60      	ldr	r3, [pc, #384]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	220f      	movs	r2, #15
 80017a4:	4013      	ands	r3, r2
 80017a6:	4a62      	ldr	r2, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x348>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	000a      	movs	r2, r1
 80017ac:	40da      	lsrs	r2, r3
 80017ae:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x34c>)
 80017b0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017b2:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x350>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2513      	movs	r5, #19
 80017b8:	197c      	adds	r4, r7, r5
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff fa86 	bl	8000ccc <HAL_InitTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d046      	beq.n	800185a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80017cc:	197b      	adds	r3, r7, r5
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	e280      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d027      	beq.n	8001828 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017d8:	4b51      	ldr	r3, [pc, #324]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2209      	movs	r2, #9
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fab5 	bl	8000d58 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fab0 	bl	8000d58 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e266      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001806:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2204      	movs	r2, #4
 800180c:	4013      	ands	r3, r2
 800180e:	d0f1      	beq.n	80017f4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a45      	ldr	r2, [pc, #276]	; (800192c <HAL_RCC_OscConfig+0x344>)
 8001816:	4013      	ands	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	021a      	lsls	r2, r3, #8
 8001820:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	e018      	b.n	800185a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001828:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800182e:	2101      	movs	r1, #1
 8001830:	438a      	bics	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fa90 	bl	8000d58 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fa8b 	bl	8000d58 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e241      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001850:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2204      	movs	r2, #4
 8001856:	4013      	ands	r3, r2
 8001858:	d1f1      	bne.n	800183e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2210      	movs	r2, #16
 8001860:	4013      	ands	r3, r2
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x27e>
 8001864:	e0a1      	b.n	80019aa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d140      	bne.n	80018ee <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d005      	beq.n	8001884 <HAL_RCC_OscConfig+0x29c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e227      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <HAL_RCC_OscConfig+0x354>)
 800188a:	4013      	ands	r3, r2
 800188c:	0019      	movs	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	0a19      	lsrs	r1, r3, #8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	061a      	lsls	r2, r3, #24
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	0b5b      	lsrs	r3, r3, #13
 80018b2:	3301      	adds	r3, #1
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	0212      	lsls	r2, r2, #8
 80018b8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	210f      	movs	r1, #15
 80018c2:	400b      	ands	r3, r1
 80018c4:	491a      	ldr	r1, [pc, #104]	; (8001930 <HAL_RCC_OscConfig+0x348>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_RCC_OscConfig+0x34c>)
 80018cc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_OscConfig+0x350>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2513      	movs	r5, #19
 80018d4:	197c      	adds	r4, r7, r5
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff f9f8 	bl	8000ccc <HAL_InitTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d060      	beq.n	80019aa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80018e8:	197b      	adds	r3, r7, r5
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	e1f2      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d03f      	beq.n	8001976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_OscConfig+0x338>)
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	0049      	lsls	r1, r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fa28 	bl	8000d58 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800190c:	e018      	b.n	8001940 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190e:	f7ff fa23 	bl	8000d58 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d911      	bls.n	8001940 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1d9      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
 8001920:	40021000 	.word	0x40021000
 8001924:	fffeffff 	.word	0xfffeffff
 8001928:	fffbffff 	.word	0xfffbffff
 800192c:	ffffe0ff 	.word	0xffffe0ff
 8001930:	08003a4c 	.word	0x08003a4c
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004
 800193c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001940:	4bc9      	ldr	r3, [pc, #804]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d0e0      	beq.n	800190e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800194c:	4bc6      	ldr	r3, [pc, #792]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4ac6      	ldr	r2, [pc, #792]	; (8001c6c <HAL_RCC_OscConfig+0x684>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	4bc3      	ldr	r3, [pc, #780]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 800195c:	430a      	orrs	r2, r1
 800195e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001960:	4bc1      	ldr	r3, [pc, #772]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	0a19      	lsrs	r1, r3, #8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	061a      	lsls	r2, r3, #24
 800196e:	4bbe      	ldr	r3, [pc, #760]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	e019      	b.n	80019aa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001976:	4bbc      	ldr	r3, [pc, #752]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4bbb      	ldr	r3, [pc, #748]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 800197c:	49bc      	ldr	r1, [pc, #752]	; (8001c70 <HAL_RCC_OscConfig+0x688>)
 800197e:	400a      	ands	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff f9e9 	bl	8000d58 <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198c:	f7ff f9e4 	bl	8000d58 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e19a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800199e:	4bb2      	ldr	r3, [pc, #712]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2208      	movs	r2, #8
 80019b0:	4013      	ands	r3, r2
 80019b2:	d036      	beq.n	8001a22 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d019      	beq.n	80019f0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019bc:	4baa      	ldr	r3, [pc, #680]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c0:	4ba9      	ldr	r3, [pc, #676]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	430a      	orrs	r2, r1
 80019c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff f9c6 	bl	8000d58 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff f9c1 	bl	8000d58 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e177      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019e4:	4ba0      	ldr	r3, [pc, #640]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d0f1      	beq.n	80019d2 <HAL_RCC_OscConfig+0x3ea>
 80019ee:	e018      	b.n	8001a22 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f0:	4b9d      	ldr	r3, [pc, #628]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	4b9c      	ldr	r3, [pc, #624]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	438a      	bics	r2, r1
 80019fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fc:	f7ff f9ac 	bl	8000d58 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff f9a7 	bl	8000d58 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e15d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a18:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d1f1      	bne.n	8001a06 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2204      	movs	r2, #4
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_OscConfig+0x446>
 8001a2c:	e0ae      	b.n	8001b8c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2023      	movs	r0, #35	; 0x23
 8001a30:	183b      	adds	r3, r7, r0
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	055b      	lsls	r3, r3, #21
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a46:	4b88      	ldr	r3, [pc, #544]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0549      	lsls	r1, r1, #21
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a50:	183b      	adds	r3, r7, r0
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b87      	ldr	r3, [pc, #540]	; (8001c74 <HAL_RCC_OscConfig+0x68c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d11a      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a62:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_RCC_OscConfig+0x68c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_RCC_OscConfig+0x68c>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0049      	lsls	r1, r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a70:	f7ff f972 	bl	8000d58 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff f96d 	bl	8000d58 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e123      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_OscConfig+0x68c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4cc>
 8001aa4:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	0049      	lsls	r1, r1, #1
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab2:	e031      	b.n	8001b18 <HAL_RCC_OscConfig+0x530>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10c      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x4ee>
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac0:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ac2:	496b      	ldr	r1, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x688>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ac8:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ace:	496a      	ldr	r1, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x690>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad4:	e020      	b.n	8001b18 <HAL_RCC_OscConfig+0x530>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	23a0      	movs	r3, #160	; 0xa0
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d10e      	bne.n	8001b00 <HAL_RCC_OscConfig+0x518>
 8001ae2:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae6:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	00c9      	lsls	r1, r1, #3
 8001aec:	430a      	orrs	r2, r1
 8001aee:	651a      	str	r2, [r3, #80]	; 0x50
 8001af0:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001af2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af4:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0049      	lsls	r1, r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	651a      	str	r2, [r3, #80]	; 0x50
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0x530>
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b06:	495a      	ldr	r1, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x688>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b12:	4959      	ldr	r1, [pc, #356]	; (8001c78 <HAL_RCC_OscConfig+0x690>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d015      	beq.n	8001b4c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff f91a 	bl	8000d58 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b28:	e009      	b.n	8001b3e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f915 	bl	8000d58 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <HAL_RCC_OscConfig+0x694>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0ca      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d0ef      	beq.n	8001b2a <HAL_RCC_OscConfig+0x542>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f904 	bl	8000d58 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b54:	e009      	b.n	8001b6a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff f8ff 	bl	8000d58 <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a46      	ldr	r2, [pc, #280]	; (8001c7c <HAL_RCC_OscConfig+0x694>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0b4      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d1ef      	bne.n	8001b56 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b76:	2323      	movs	r3, #35	; 0x23
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001b86:	493e      	ldr	r1, [pc, #248]	; (8001c80 <HAL_RCC_OscConfig+0x698>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d100      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5ae>
 8001b94:	e09d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5b6>
 8001b9c:	e076      	b.n	8001c8c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d145      	bne.n	8001c32 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bac:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_RCC_OscConfig+0x69c>)
 8001bae:	400a      	ands	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f8d1 	bl	8000d58 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f8cc 	bl	8000d58 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e082      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	049b      	lsls	r3, r3, #18
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	4a2a      	ldr	r2, [pc, #168]	; (8001c88 <HAL_RCC_OscConfig+0x6a0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	0449      	lsls	r1, r1, #17
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff f8a6 	bl	8000d58 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff f8a1 	bl	8000d58 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e057      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	049b      	lsls	r3, r3, #18
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x62a>
 8001c30:	e04f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c38:	4912      	ldr	r1, [pc, #72]	; (8001c84 <HAL_RCC_OscConfig+0x69c>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f88b 	bl	8000d58 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f886 	bl	8000d58 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e03c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_OscConfig+0x680>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	049b      	lsls	r3, r3, #18
 8001c62:	4013      	ands	r3, r2
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x660>
 8001c66:	e034      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6ea>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	ffff1fff 	.word	0xffff1fff
 8001c70:	fffffeff 	.word	0xfffffeff
 8001c74:	40007000 	.word	0x40007000
 8001c78:	fffffbff 	.word	0xfffffbff
 8001c7c:	00001388 	.word	0x00001388
 8001c80:	efffffff 	.word	0xefffffff
 8001c84:	feffffff 	.word	0xfeffffff
 8001c88:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_RCC_OscConfig+0x6f4>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d10f      	bne.n	8001cce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	23f0      	movs	r3, #240	; 0xf0
 8001cb2:	039b      	lsls	r3, r3, #14
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b00a      	add	sp, #40	; 0x28
 8001cda:	bdb0      	pop	{r4, r5, r7, pc}
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e128      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b96      	ldr	r3, [pc, #600]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d91e      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b93      	ldr	r3, [pc, #588]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	4b90      	ldr	r3, [pc, #576]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d14:	f7ff f820 	bl	8000d58 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1e:	f7ff f81b 	bl	8000d58 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a8a      	ldr	r2, [pc, #552]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e109      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b87      	ldr	r3, [pc, #540]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2201      	movs	r2, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4a:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	22f0      	movs	r2, #240	; 0xf0
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b7f      	ldr	r3, [pc, #508]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d100      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
 8001d68:	e089      	b.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d72:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d120      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0e1      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	049b      	lsls	r3, r3, #18
 8001d92:	4013      	ands	r3, r2
 8001d94:	d114      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0d5      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da2:	4b6d      	ldr	r3, [pc, #436]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2204      	movs	r2, #4
 8001da8:	4013      	ands	r3, r2
 8001daa:	d109      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0ca      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001db0:	4b69      	ldr	r3, [pc, #420]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0c2      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc0:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4b62      	ldr	r3, [pc, #392]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd4:	f7fe ffc0 	bl	8000d58 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d111      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7fe ffb7 	bl	8000d58 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0a5      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfa:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	220c      	movs	r2, #12
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d1ef      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x106>
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d111      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e10:	e009      	b.n	8001e26 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e12:	f7fe ffa1 	bl	8000d58 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e08f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e26:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d1ef      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x132>
 8001e32:	e024      	b.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d11b      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3c:	e009      	b.n	8001e52 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7fe ff8b 	bl	8000d58 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a42      	ldr	r2, [pc, #264]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e079      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	220c      	movs	r2, #12
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d1ef      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x15e>
 8001e5e:	e00e      	b.n	8001e7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7fe ff7a 	bl	8000d58 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	4a3a      	ldr	r2, [pc, #232]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e068      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2201      	movs	r2, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d21e      	bcs.n	8001eca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4393      	bics	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e9e:	f7fe ff5b 	bl	8000d58 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	e009      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea8:	f7fe ff56 	bl	8000d58 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e044      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d1ee      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_RCC_ClockConfig+0x27c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2208      	movs	r2, #8
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <HAL_RCC_ClockConfig+0x280>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00da      	lsls	r2, r3, #3
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f08:	f000 f832 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	220f      	movs	r2, #15
 8001f16:	4013      	ands	r3, r2
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x284>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	000a      	movs	r2, r1
 8001f1e:	40da      	lsrs	r2, r3
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_RCC_ClockConfig+0x288>)
 8001f22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_ClockConfig+0x28c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	250b      	movs	r5, #11
 8001f2a:	197c      	adds	r4, r7, r5
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7fe fecd 	bl	8000ccc <HAL_InitTick>
 8001f32:	0003      	movs	r3, r0
 8001f34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f36:	197b      	adds	r3, r7, r5
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f3e:	197b      	adds	r3, r7, r5
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b004      	add	sp, #16
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40022000 	.word	0x40022000
 8001f54:	00001388 	.word	0x00001388
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	fffff8ff 	.word	0xfffff8ff
 8001f60:	ffffc7ff 	.word	0xffffc7ff
 8001f64:	08003a4c 	.word	0x08003a4c
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b08e      	sub	sp, #56	; 0x38
 8001f74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f76:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7e:	230c      	movs	r3, #12
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d014      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001f86:	d900      	bls.n	8001f8a <HAL_RCC_GetSysClockFreq+0x1a>
 8001f88:	e07b      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x112>
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d002      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x24>
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x3a>
 8001f92:	e076      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2210      	movs	r2, #16
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f9e:	4b43      	ldr	r3, [pc, #268]	; (80020ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fa2:	e07c      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa8:	e079      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001faa:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fae:	e076      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb2:	0c9a      	lsrs	r2, r3, #18
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc0:	0d9a      	lsrs	r2, r3, #22
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	025b      	lsls	r3, r3, #9
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d01a      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	4a35      	ldr	r2, [pc, #212]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	69b8      	ldr	r0, [r7, #24]
 8001fe4:	69f9      	ldr	r1, [r7, #28]
 8001fe6:	f7fe f93b 	bl	8000260 <__aeabi_lmul>
 8001fea:	0002      	movs	r2, r0
 8001fec:	000b      	movs	r3, r1
 8001fee:	0010      	movs	r0, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f7fe f90f 	bl	8000220 <__aeabi_uldivmod>
 8002002:	0002      	movs	r2, r0
 8002004:	000b      	movs	r3, r1
 8002006:	0013      	movs	r3, r2
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	e037      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2210      	movs	r2, #16
 8002012:	4013      	ands	r3, r2
 8002014:	d01a      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4a23      	ldr	r2, [pc, #140]	; (80020ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002020:	2300      	movs	r3, #0
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	68f9      	ldr	r1, [r7, #12]
 8002026:	f7fe f91b 	bl	8000260 <__aeabi_lmul>
 800202a:	0002      	movs	r2, r0
 800202c:	000b      	movs	r3, r1
 800202e:	0010      	movs	r0, r2
 8002030:	0019      	movs	r1, r3
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f7fe f8ef 	bl	8000220 <__aeabi_uldivmod>
 8002042:	0002      	movs	r2, r0
 8002044:	000b      	movs	r3, r1
 8002046:	0013      	movs	r3, r2
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
 800204a:	e017      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	0018      	movs	r0, r3
 8002050:	2300      	movs	r3, #0
 8002052:	0019      	movs	r1, r3
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002056:	2300      	movs	r3, #0
 8002058:	f7fe f902 	bl	8000260 <__aeabi_lmul>
 800205c:	0002      	movs	r2, r0
 800205e:	000b      	movs	r3, r1
 8002060:	0010      	movs	r0, r2
 8002062:	0019      	movs	r1, r3
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	001c      	movs	r4, r3
 8002068:	2300      	movs	r3, #0
 800206a:	001d      	movs	r5, r3
 800206c:	0022      	movs	r2, r4
 800206e:	002b      	movs	r3, r5
 8002070:	f7fe f8d6 	bl	8000220 <__aeabi_uldivmod>
 8002074:	0002      	movs	r2, r0
 8002076:	000b      	movs	r3, r1
 8002078:	0013      	movs	r3, r2
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002080:	e00d      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	2207      	movs	r2, #7
 800208a:	4013      	ands	r3, r2
 800208c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	3301      	adds	r3, #1
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	0212      	lsls	r2, r2, #8
 8002096:	409a      	lsls	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800209c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b00e      	add	sp, #56	; 0x38
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	003d0900 	.word	0x003d0900
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200
 80020b8:	08003a64 	.word	0x08003a64

080020bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <HAL_RCC_GetHCLKFreq+0x10>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000000 	.word	0x20000000

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d4:	f7ff fff2 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 80020d8:	0001      	movs	r1, r0
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	2207      	movs	r2, #7
 80020e2:	4013      	ands	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	40d9      	lsrs	r1, r3
 80020ea:	000b      	movs	r3, r1
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08003a5c 	.word	0x08003a5c

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002100:	f7ff ffdc 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 8002104:	0001      	movs	r1, r0
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	0adb      	lsrs	r3, r3, #11
 800210c:	2207      	movs	r2, #7
 800210e:	4013      	ands	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	40d9      	lsrs	r1, r3
 8002116:	000b      	movs	r3, r1
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	08003a5c 	.word	0x08003a5c

08002128 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002130:	2017      	movs	r0, #23
 8002132:	183b      	adds	r3, r7, r0
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	4013      	ands	r3, r2
 8002140:	d100      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002142:	e0c2      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002144:	4b81      	ldr	r3, [pc, #516]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	4013      	ands	r3, r2
 800214e:	d109      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b7e      	ldr	r3, [pc, #504]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002154:	4b7d      	ldr	r3, [pc, #500]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	0549      	lsls	r1, r1, #21
 800215a:	430a      	orrs	r2, r1
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800215e:	183b      	adds	r3, r7, r0
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b7a      	ldr	r3, [pc, #488]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4013      	ands	r3, r2
 800216e:	d11a      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002170:	4b77      	ldr	r3, [pc, #476]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b76      	ldr	r3, [pc, #472]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	0049      	lsls	r1, r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7fe fdeb 	bl	8000d58 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	e008      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002188:	f7fe fde6 	bl	8000d58 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0d4      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b6d      	ldr	r3, [pc, #436]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021a6:	4b69      	ldr	r3, [pc, #420]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	23c0      	movs	r3, #192	; 0xc0
 80021ac:	039b      	lsls	r3, r3, #14
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	039b      	lsls	r3, r3, #14
 80021ba:	4013      	ands	r3, r2
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d013      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	401a      	ands	r2, r3
 80021cc:	23c0      	movs	r3, #192	; 0xc0
 80021ce:	029b      	lsls	r3, r3, #10
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d10a      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021d4:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	029b      	lsls	r3, r3, #10
 80021dc:	401a      	ands	r2, r3
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d101      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0ac      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021ea:	4b58      	ldr	r3, [pc, #352]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80021ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ee:	23c0      	movs	r3, #192	; 0xc0
 80021f0:	029b      	lsls	r3, r3, #10
 80021f2:	4013      	ands	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d03b      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	23c0      	movs	r3, #192	; 0xc0
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	4013      	ands	r3, r2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d033      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2220      	movs	r2, #32
 8002212:	4013      	ands	r3, r2
 8002214:	d02e      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002220:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002224:	4b49      	ldr	r3, [pc, #292]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0309      	lsls	r1, r1, #12
 800222a:	430a      	orrs	r2, r1
 800222c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002234:	4948      	ldr	r1, [pc, #288]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002236:	400a      	ands	r2, r1
 8002238:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4013      	ands	r3, r2
 8002248:	d014      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe fd85 	bl	8000d58 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002252:	e009      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fd80 	bl	8000d58 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e06d      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800226a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d0ef      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	23c0      	movs	r3, #192	; 0xc0
 800227a:	029b      	lsls	r3, r3, #10
 800227c:	401a      	ands	r2, r3
 800227e:	23c0      	movs	r3, #192	; 0xc0
 8002280:	029b      	lsls	r3, r3, #10
 8002282:	429a      	cmp	r2, r3
 8002284:	d10c      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a35      	ldr	r2, [pc, #212]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800228c:	4013      	ands	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	039b      	lsls	r3, r3, #14
 8002298:	401a      	ands	r2, r3
 800229a:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	23c0      	movs	r3, #192	; 0xc0
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	401a      	ands	r2, r3
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022b4:	2317      	movs	r3, #23
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022c4:	4927      	ldr	r1, [pc, #156]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2202      	movs	r2, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	220c      	movs	r2, #12
 80022da:	4393      	bics	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002302:	430a      	orrs	r2, r1
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2208      	movs	r2, #8
 800230c:	4013      	ands	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002320:	430a      	orrs	r2, r1
 8002322:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	4013      	ands	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002334:	4013      	ands	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800233e:	430a      	orrs	r2, r1
 8002340:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b006      	add	sp, #24
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
 8002354:	fffcffff 	.word	0xfffcffff
 8002358:	fff7ffff 	.word	0xfff7ffff
 800235c:	00001388 	.word	0x00001388
 8002360:	ffcfffff 	.word	0xffcfffff
 8002364:	efffffff 	.word	0xefffffff
 8002368:	fffff3ff 	.word	0xfffff3ff
 800236c:	ffffcfff 	.word	0xffffcfff
 8002370:	fff3ffff 	.word	0xfff3ffff

08002374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e032      	b.n	80023ec <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2239      	movs	r2, #57	; 0x39
 800238a:	5c9b      	ldrb	r3, [r3, r2]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2238      	movs	r2, #56	; 0x38
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f7fe fb47 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2239      	movs	r2, #57	; 0x39
 80023a6:	2102      	movs	r1, #2
 80023a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	0019      	movs	r1, r3
 80023b4:	0010      	movs	r0, r2
 80023b6:	f000 fb93 	bl	8002ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223e      	movs	r2, #62	; 0x3e
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	223a      	movs	r2, #58	; 0x3a
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223b      	movs	r2, #59	; 0x3b
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	223c      	movs	r2, #60	; 0x3c
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	223d      	movs	r2, #61	; 0x3d
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2239      	movs	r2, #57	; 0x39
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b002      	add	sp, #8
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e032      	b.n	800246c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2239      	movs	r2, #57	; 0x39
 800240a:	5c9b      	ldrb	r3, [r3, r2]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2238      	movs	r2, #56	; 0x38
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f829 	bl	8002474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2239      	movs	r2, #57	; 0x39
 8002426:	2102      	movs	r1, #2
 8002428:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	0019      	movs	r1, r3
 8002434:	0010      	movs	r0, r2
 8002436:	f000 fb53 	bl	8002ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	223e      	movs	r2, #62	; 0x3e
 800243e:	2101      	movs	r1, #1
 8002440:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	223a      	movs	r2, #58	; 0x3a
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	223b      	movs	r2, #59	; 0x3b
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	223c      	movs	r2, #60	; 0x3c
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223d      	movs	r2, #61	; 0x3d
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2239      	movs	r2, #57	; 0x39
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d108      	bne.n	80024a6 <HAL_TIM_PWM_Start+0x22>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	223a      	movs	r2, #58	; 0x3a
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	4193      	sbcs	r3, r2
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	e01f      	b.n	80024e6 <HAL_TIM_PWM_Start+0x62>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d108      	bne.n	80024be <HAL_TIM_PWM_Start+0x3a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	223b      	movs	r2, #59	; 0x3b
 80024b0:	5c9b      	ldrb	r3, [r3, r2]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	1e5a      	subs	r2, r3, #1
 80024b8:	4193      	sbcs	r3, r2
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e013      	b.n	80024e6 <HAL_TIM_PWM_Start+0x62>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d108      	bne.n	80024d6 <HAL_TIM_PWM_Start+0x52>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	223c      	movs	r2, #60	; 0x3c
 80024c8:	5c9b      	ldrb	r3, [r3, r2]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	1e5a      	subs	r2, r3, #1
 80024d0:	4193      	sbcs	r3, r2
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	e007      	b.n	80024e6 <HAL_TIM_PWM_Start+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	223d      	movs	r2, #61	; 0x3d
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	4193      	sbcs	r3, r2
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e048      	b.n	8002580 <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <HAL_TIM_PWM_Start+0x7a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	223a      	movs	r2, #58	; 0x3a
 80024f8:	2102      	movs	r1, #2
 80024fa:	5499      	strb	r1, [r3, r2]
 80024fc:	e013      	b.n	8002526 <HAL_TIM_PWM_Start+0xa2>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d104      	bne.n	800250e <HAL_TIM_PWM_Start+0x8a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	223b      	movs	r2, #59	; 0x3b
 8002508:	2102      	movs	r1, #2
 800250a:	5499      	strb	r1, [r3, r2]
 800250c:	e00b      	b.n	8002526 <HAL_TIM_PWM_Start+0xa2>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d104      	bne.n	800251e <HAL_TIM_PWM_Start+0x9a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	223c      	movs	r2, #60	; 0x3c
 8002518:	2102      	movs	r1, #2
 800251a:	5499      	strb	r1, [r3, r2]
 800251c:	e003      	b.n	8002526 <HAL_TIM_PWM_Start+0xa2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	223d      	movs	r2, #61	; 0x3d
 8002522:	2102      	movs	r1, #2
 8002524:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	0018      	movs	r0, r3
 8002530:	f000 fcbe 	bl	8002eb0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	05db      	lsls	r3, r3, #23
 800253c:	429a      	cmp	r2, r3
 800253e:	d004      	beq.n	800254a <HAL_TIM_PWM_Start+0xc6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_TIM_PWM_Start+0x104>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d111      	bne.n	800256e <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2207      	movs	r2, #7
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b06      	cmp	r3, #6
 800255a:	d010      	beq.n	800257e <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256c:	e007      	b.n	800257e <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b004      	add	sp, #16
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40010800 	.word	0x40010800

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2202      	movs	r2, #2
 800259c:	4013      	ands	r3, r2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d124      	bne.n	80025ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11d      	bne.n	80025ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2203      	movs	r2, #3
 80025b6:	4252      	negs	r2, r2
 80025b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2203      	movs	r2, #3
 80025c8:	4013      	ands	r3, r2
 80025ca:	d004      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 fa6e 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e007      	b.n	80025e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 fa61 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fa6d 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2204      	movs	r2, #4
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d125      	bne.n	8002646 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2204      	movs	r2, #4
 8002602:	4013      	ands	r3, r2
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11e      	bne.n	8002646 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2205      	movs	r2, #5
 800260e:	4252      	negs	r2, r2
 8002610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	23c0      	movs	r3, #192	; 0xc0
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fa41 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 800262e:	e007      	b.n	8002640 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fa34 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0018      	movs	r0, r3
 800263c:	f000 fa40 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2208      	movs	r2, #8
 800264e:	4013      	ands	r3, r2
 8002650:	2b08      	cmp	r3, #8
 8002652:	d124      	bne.n	800269e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2208      	movs	r2, #8
 800265c:	4013      	ands	r3, r2
 800265e:	2b08      	cmp	r3, #8
 8002660:	d11d      	bne.n	800269e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2209      	movs	r2, #9
 8002668:	4252      	negs	r2, r2
 800266a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2204      	movs	r2, #4
 8002670:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2203      	movs	r2, #3
 800267a:	4013      	ands	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	0018      	movs	r0, r3
 8002682:	f000 fa15 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 8002686:	e007      	b.n	8002698 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 fa08 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fa14 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2210      	movs	r2, #16
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d125      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2210      	movs	r2, #16
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d11e      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2211      	movs	r2, #17
 80026c0:	4252      	negs	r2, r2
 80026c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2208      	movs	r2, #8
 80026c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	23c0      	movs	r3, #192	; 0xc0
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 f9e8 	bl	8002ab0 <HAL_TIM_IC_CaptureCallback>
 80026e0:	e007      	b.n	80026f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 f9db 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 f9e7 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10f      	bne.n	8002726 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	4013      	ands	r3, r2
 8002710:	2b01      	cmp	r3, #1
 8002712:	d108      	bne.n	8002726 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2202      	movs	r2, #2
 800271a:	4252      	negs	r2, r2
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 f9b5 	bl	8002a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	4013      	ands	r3, r2
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d10f      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	4013      	ands	r3, r2
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d108      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2241      	movs	r2, #65	; 0x41
 8002748:	4252      	negs	r2, r2
 800274a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	0018      	movs	r0, r3
 8002750:	f000 f9be 	bl	8002ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2317      	movs	r3, #23
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2238      	movs	r2, #56	; 0x38
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_TIM_PWM_ConfigChannel+0x22>
 800277a:	2302      	movs	r3, #2
 800277c:	e0ad      	b.n	80028da <HAL_TIM_PWM_ConfigChannel+0x17e>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2238      	movs	r2, #56	; 0x38
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d100      	bne.n	800278e <HAL_TIM_PWM_ConfigChannel+0x32>
 800278c:	e076      	b.n	800287c <HAL_TIM_PWM_ConfigChannel+0x120>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b0c      	cmp	r3, #12
 8002792:	d900      	bls.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002794:	e095      	b.n	80028c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d04e      	beq.n	800283a <HAL_TIM_PWM_ConfigChannel+0xde>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d900      	bls.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80027a2:	e08e      	b.n	80028c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d021      	beq.n	80027f4 <HAL_TIM_PWM_ConfigChannel+0x98>
 80027b0:	e087      	b.n	80028c2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	0011      	movs	r1, r2
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 f9da 	bl	8002b74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2108      	movs	r1, #8
 80027cc:	430a      	orrs	r2, r1
 80027ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2104      	movs	r1, #4
 80027dc:	438a      	bics	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6999      	ldr	r1, [r3, #24]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	619a      	str	r2, [r3, #24]
      break;
 80027f2:	e06b      	b.n	80028cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	0011      	movs	r1, r2
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 f9f5 	bl	8002bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0109      	lsls	r1, r1, #4
 8002810:	430a      	orrs	r2, r1
 8002812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4931      	ldr	r1, [pc, #196]	; (80028e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002820:	400a      	ands	r2, r1
 8002822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6999      	ldr	r1, [r3, #24]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	021a      	lsls	r2, r3, #8
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	619a      	str	r2, [r3, #24]
      break;
 8002838:	e048      	b.n	80028cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	0011      	movs	r1, r2
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fa14 	bl	8002c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2108      	movs	r1, #8
 8002854:	430a      	orrs	r2, r1
 8002856:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2104      	movs	r1, #4
 8002864:	438a      	bics	r2, r1
 8002866:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69d9      	ldr	r1, [r3, #28]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	61da      	str	r2, [r3, #28]
      break;
 800287a:	e027      	b.n	80028cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f000 fa33 	bl	8002cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	0109      	lsls	r1, r1, #4
 8002898:	430a      	orrs	r2, r1
 800289a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	490f      	ldr	r1, [pc, #60]	; (80028e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69d9      	ldr	r1, [r3, #28]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	61da      	str	r2, [r3, #28]
      break;
 80028c0:	e004      	b.n	80028cc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80028c2:	2317      	movs	r3, #23
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
      break;
 80028ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2238      	movs	r2, #56	; 0x38
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]

  return status;
 80028d4:	2317      	movs	r3, #23
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	781b      	ldrb	r3, [r3, #0]
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	fffffbff 	.word	0xfffffbff

080028e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	230f      	movs	r3, #15
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2238      	movs	r2, #56	; 0x38
 80028fe:	5c9b      	ldrb	r3, [r3, r2]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIM_ConfigClockSource+0x20>
 8002904:	2302      	movs	r3, #2
 8002906:	e0bc      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x19a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2238      	movs	r2, #56	; 0x38
 800290c:	2101      	movs	r1, #1
 800290e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2239      	movs	r2, #57	; 0x39
 8002914:	2102      	movs	r1, #2
 8002916:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2277      	movs	r2, #119	; 0x77
 8002924:	4393      	bics	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_TIM_ConfigClockSource+0x1a4>)
 800292c:	4013      	ands	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	0192      	lsls	r2, r2, #6
 8002940:	4293      	cmp	r3, r2
 8002942:	d040      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xde>
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	0192      	lsls	r2, r2, #6
 8002948:	4293      	cmp	r3, r2
 800294a:	d900      	bls.n	800294e <HAL_TIM_ConfigClockSource+0x66>
 800294c:	e088      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	0152      	lsls	r2, r2, #5
 8002952:	4293      	cmp	r3, r2
 8002954:	d100      	bne.n	8002958 <HAL_TIM_ConfigClockSource+0x70>
 8002956:	e088      	b.n	8002a6a <HAL_TIM_ConfigClockSource+0x182>
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	0152      	lsls	r2, r2, #5
 800295c:	4293      	cmp	r3, r2
 800295e:	d900      	bls.n	8002962 <HAL_TIM_ConfigClockSource+0x7a>
 8002960:	e07e      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
 8002962:	2b70      	cmp	r3, #112	; 0x70
 8002964:	d018      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0xb0>
 8002966:	d900      	bls.n	800296a <HAL_TIM_ConfigClockSource+0x82>
 8002968:	e07a      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
 800296a:	2b60      	cmp	r3, #96	; 0x60
 800296c:	d04f      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x126>
 800296e:	d900      	bls.n	8002972 <HAL_TIM_ConfigClockSource+0x8a>
 8002970:	e076      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
 8002972:	2b50      	cmp	r3, #80	; 0x50
 8002974:	d03b      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x106>
 8002976:	d900      	bls.n	800297a <HAL_TIM_ConfigClockSource+0x92>
 8002978:	e072      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
 800297a:	2b40      	cmp	r3, #64	; 0x40
 800297c:	d057      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x146>
 800297e:	d900      	bls.n	8002982 <HAL_TIM_ConfigClockSource+0x9a>
 8002980:	e06e      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
 8002982:	2b30      	cmp	r3, #48	; 0x30
 8002984:	d063      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x166>
 8002986:	d86b      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
 8002988:	2b20      	cmp	r3, #32
 800298a:	d060      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x166>
 800298c:	d868      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d05d      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x166>
 8002992:	2b10      	cmp	r3, #16
 8002994:	d05b      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x166>
 8002996:	e063      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f000 fa62 	bl	8002e70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2277      	movs	r2, #119	; 0x77
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	609a      	str	r2, [r3, #8]
      break;
 80029c4:	e052      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f000 fa4b 	bl	8002e70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	01c9      	lsls	r1, r1, #7
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
      break;
 80029ec:	e03e      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	001a      	movs	r2, r3
 80029fc:	f000 f9be 	bl	8002d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2150      	movs	r1, #80	; 0x50
 8002a06:	0018      	movs	r0, r3
 8002a08:	f000 fa18 	bl	8002e3c <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e02e      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	001a      	movs	r2, r3
 8002a1c:	f000 f9dc 	bl	8002dd8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2160      	movs	r1, #96	; 0x60
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fa08 	bl	8002e3c <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e01e      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	f000 f99e 	bl	8002d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2140      	movs	r1, #64	; 0x40
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 f9f8 	bl	8002e3c <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e00e      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0019      	movs	r1, r3
 8002a58:	0010      	movs	r0, r2
 8002a5a:	f000 f9ef 	bl	8002e3c <TIM_ITRx_SetConfig>
      break;
 8002a5e:	e005      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a60:	230f      	movs	r3, #15
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
      break;
 8002a68:	e000      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a6a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2239      	movs	r2, #57	; 0x39
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2238      	movs	r2, #56	; 0x38
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

  return status;
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	781b      	ldrb	r3, [r3, #0]
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	ffff00ff 	.word	0xffff00ff

08002a90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b002      	add	sp, #8
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	05db      	lsls	r3, r3, #23
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d003      	beq.n	8002b02 <TIM_Base_SetConfig+0x22>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <TIM_Base_SetConfig+0x8c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2270      	movs	r2, #112	; 0x70
 8002b06:	4393      	bics	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	05db      	lsls	r3, r3, #23
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d003      	beq.n	8002b26 <TIM_Base_SetConfig+0x46>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <TIM_Base_SetConfig+0x8c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d108      	bne.n	8002b38 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <TIM_Base_SetConfig+0x90>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	001a      	movs	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	615a      	str	r2, [r3, #20]
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40010800 	.word	0x40010800
 8002b70:	fffffcff 	.word	0xfffffcff

08002b74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4393      	bics	r3, r2
 8002b86:	001a      	movs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2270      	movs	r2, #112	; 0x70
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	4393      	bics	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	621a      	str	r2, [r3, #32]
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b006      	add	sp, #24
 8002bea:	bd80      	pop	{r7, pc}

08002bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	2210      	movs	r2, #16
 8002bfc:	4393      	bics	r3, r2
 8002bfe:	001a      	movs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <TIM_OC2_SetConfig+0x7c>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <TIM_OC2_SetConfig+0x80>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2220      	movs	r2, #32
 8002c36:	4393      	bics	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	621a      	str	r2, [r3, #32]
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b006      	add	sp, #24
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	ffff8fff 	.word	0xffff8fff
 8002c6c:	fffffcff 	.word	0xfffffcff

08002c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <TIM_OC3_SetConfig+0x78>)
 8002c80:	401a      	ands	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2270      	movs	r2, #112	; 0x70
 8002c9c:	4393      	bics	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <TIM_OC3_SetConfig+0x7c>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	fffffeff 	.word	0xfffffeff
 8002cec:	fffffdff 	.word	0xfffffdff

08002cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <TIM_OC4_SetConfig+0x7c>)
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <TIM_OC4_SetConfig+0x80>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <TIM_OC4_SetConfig+0x84>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <TIM_OC4_SetConfig+0x88>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	031b      	lsls	r3, r3, #12
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b006      	add	sp, #24
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	ffffefff 	.word	0xffffefff
 8002d70:	ffff8fff 	.word	0xffff8fff
 8002d74:	fffffcff 	.word	0xfffffcff
 8002d78:	ffffdfff 	.word	0xffffdfff

08002d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4393      	bics	r3, r2
 8002d96:	001a      	movs	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	22f0      	movs	r2, #240	; 0xf0
 8002da6:	4393      	bics	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	220a      	movs	r2, #10
 8002db8:	4393      	bics	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	621a      	str	r2, [r3, #32]
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b006      	add	sp, #24
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	2210      	movs	r2, #16
 8002dea:	4393      	bics	r3, r2
 8002dec:	001a      	movs	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <TIM_TI2_ConfigInputStage+0x60>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	031b      	lsls	r3, r3, #12
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	22a0      	movs	r2, #160	; 0xa0
 8002e14:	4393      	bics	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b006      	add	sp, #24
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	ffff0fff 	.word	0xffff0fff

08002e3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2270      	movs	r2, #112	; 0x70
 8002e50:	4393      	bics	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <TIM_ETR_SetConfig+0x3c>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	021a      	lsls	r2, r3, #8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b006      	add	sp, #24
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	ffff00ff 	.word	0xffff00ff

08002eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	221f      	movs	r2, #31
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	43d2      	mvns	r2, r2
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	211f      	movs	r1, #31
 8002ee0:	400b      	ands	r3, r1
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4099      	lsls	r1, r3
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2238      	movs	r2, #56	; 0x38
 8002f06:	5c9b      	ldrb	r3, [r3, r2]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e03d      	b.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2238      	movs	r2, #56	; 0x38
 8002f14:	2101      	movs	r1, #1
 8002f16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2239      	movs	r2, #57	; 0x39
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2270      	movs	r2, #112	; 0x70
 8002f34:	4393      	bics	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d004      	beq.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10c      	bne.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	4393      	bics	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2239      	movs	r2, #57	; 0x39
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2238      	movs	r2, #56	; 0x38
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40010800 	.word	0x40010800

08002f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e044      	b.n	8003034 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2274      	movs	r2, #116	; 0x74
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7fd fdb5 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2224      	movs	r2, #36	; 0x24
 8002fc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 f8d8 	bl	8003190 <UART_SetConfig>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e024      	b.n	8003034 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 fb2d 	bl	8003654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	490d      	ldr	r1, [pc, #52]	; (800303c <HAL_UART_Init+0xa4>)
 8003006:	400a      	ands	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	212a      	movs	r1, #42	; 0x2a
 8003016:	438a      	bics	r2, r1
 8003018:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 fbc5 	bl	80037bc <UART_CheckIdleState>
 8003032:	0003      	movs	r3, r0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}
 800303c:	ffffb7ff 	.word	0xffffb7ff

08003040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	1dbb      	adds	r3, r7, #6
 800304e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003054:	2b20      	cmp	r3, #32
 8003056:	d000      	beq.n	800305a <HAL_UART_Transmit+0x1a>
 8003058:	e095      	b.n	8003186 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_UART_Transmit+0x28>
 8003060:	1dbb      	adds	r3, r7, #6
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e08d      	b.n	8003188 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	015b      	lsls	r3, r3, #5
 8003074:	429a      	cmp	r2, r3
 8003076:	d109      	bne.n	800308c <HAL_UART_Transmit+0x4c>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2201      	movs	r2, #1
 8003084:	4013      	ands	r3, r2
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e07d      	b.n	8003188 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2274      	movs	r2, #116	; 0x74
 8003090:	5c9b      	ldrb	r3, [r3, r2]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_UART_Transmit+0x5a>
 8003096:	2302      	movs	r3, #2
 8003098:	e076      	b.n	8003188 <HAL_UART_Transmit+0x148>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2274      	movs	r2, #116	; 0x74
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	2100      	movs	r1, #0
 80030a8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	; 0x21
 80030ae:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b0:	f7fd fe52 	bl	8000d58 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1dba      	adds	r2, r7, #6
 80030bc:	2150      	movs	r1, #80	; 0x50
 80030be:	8812      	ldrh	r2, [r2, #0]
 80030c0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1dba      	adds	r2, r7, #6
 80030c6:	2152      	movs	r1, #82	; 0x52
 80030c8:	8812      	ldrh	r2, [r2, #0]
 80030ca:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	015b      	lsls	r3, r3, #5
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d108      	bne.n	80030ea <HAL_UART_Transmit+0xaa>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e003      	b.n	80030f2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2274      	movs	r2, #116	; 0x74
 80030f6:	2100      	movs	r1, #0
 80030f8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80030fa:	e02c      	b.n	8003156 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	0013      	movs	r3, r2
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	f000 fb9f 	bl	800384c <UART_WaitOnFlagUntilTimeout>
 800310e:	1e03      	subs	r3, r0, #0
 8003110:	d001      	beq.n	8003116 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e038      	b.n	8003188 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	001a      	movs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	05d2      	lsls	r2, r2, #23
 8003128:	0dd2      	lsrs	r2, r2, #23
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	3302      	adds	r3, #2
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e007      	b.n	8003144 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2252      	movs	r2, #82	; 0x52
 8003148:	5a9b      	ldrh	r3, [r3, r2]
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b299      	uxth	r1, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2252      	movs	r2, #82	; 0x52
 8003154:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2252      	movs	r2, #82	; 0x52
 800315a:	5a9b      	ldrh	r3, [r3, r2]
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1cc      	bne.n	80030fc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	0013      	movs	r3, r2
 800316c:	2200      	movs	r2, #0
 800316e:	2140      	movs	r1, #64	; 0x40
 8003170:	f000 fb6c 	bl	800384c <UART_WaitOnFlagUntilTimeout>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d001      	beq.n	800317c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e005      	b.n	8003188 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	0018      	movs	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	b008      	add	sp, #32
 800318e:	bd80      	pop	{r7, pc}

08003190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003190:	b5b0      	push	{r4, r5, r7, lr}
 8003192:	b08e      	sub	sp, #56	; 0x38
 8003194:	af00      	add	r7, sp, #0
 8003196:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003198:	231a      	movs	r3, #26
 800319a:	2218      	movs	r2, #24
 800319c:	4694      	mov	ip, r2
 800319e:	44bc      	add	ip, r7
 80031a0:	4463      	add	r3, ip
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4abc      	ldr	r2, [pc, #752]	; (80034b8 <UART_SetConfig+0x328>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4ab8      	ldr	r2, [pc, #736]	; (80034bc <UART_SetConfig+0x32c>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4ab2      	ldr	r2, [pc, #712]	; (80034c0 <UART_SetConfig+0x330>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003202:	4313      	orrs	r3, r2
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4aad      	ldr	r2, [pc, #692]	; (80034c4 <UART_SetConfig+0x334>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4aa9      	ldr	r2, [pc, #676]	; (80034c8 <UART_SetConfig+0x338>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d136      	bne.n	8003294 <UART_SetConfig+0x104>
 8003226:	4ba9      	ldr	r3, [pc, #676]	; (80034cc <UART_SetConfig+0x33c>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	220c      	movs	r2, #12
 800322c:	4013      	ands	r3, r2
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d020      	beq.n	8003274 <UART_SetConfig+0xe4>
 8003232:	d827      	bhi.n	8003284 <UART_SetConfig+0xf4>
 8003234:	2b08      	cmp	r3, #8
 8003236:	d00d      	beq.n	8003254 <UART_SetConfig+0xc4>
 8003238:	d824      	bhi.n	8003284 <UART_SetConfig+0xf4>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <UART_SetConfig+0xb4>
 800323e:	2b04      	cmp	r3, #4
 8003240:	d010      	beq.n	8003264 <UART_SetConfig+0xd4>
 8003242:	e01f      	b.n	8003284 <UART_SetConfig+0xf4>
 8003244:	231b      	movs	r3, #27
 8003246:	2218      	movs	r2, #24
 8003248:	4694      	mov	ip, r2
 800324a:	44bc      	add	ip, r7
 800324c:	4463      	add	r3, ip
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e06f      	b.n	8003334 <UART_SetConfig+0x1a4>
 8003254:	231b      	movs	r3, #27
 8003256:	2218      	movs	r2, #24
 8003258:	4694      	mov	ip, r2
 800325a:	44bc      	add	ip, r7
 800325c:	4463      	add	r3, ip
 800325e:	2202      	movs	r2, #2
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e067      	b.n	8003334 <UART_SetConfig+0x1a4>
 8003264:	231b      	movs	r3, #27
 8003266:	2218      	movs	r2, #24
 8003268:	4694      	mov	ip, r2
 800326a:	44bc      	add	ip, r7
 800326c:	4463      	add	r3, ip
 800326e:	2204      	movs	r2, #4
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e05f      	b.n	8003334 <UART_SetConfig+0x1a4>
 8003274:	231b      	movs	r3, #27
 8003276:	2218      	movs	r2, #24
 8003278:	4694      	mov	ip, r2
 800327a:	44bc      	add	ip, r7
 800327c:	4463      	add	r3, ip
 800327e:	2208      	movs	r2, #8
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e057      	b.n	8003334 <UART_SetConfig+0x1a4>
 8003284:	231b      	movs	r3, #27
 8003286:	2218      	movs	r2, #24
 8003288:	4694      	mov	ip, r2
 800328a:	44bc      	add	ip, r7
 800328c:	4463      	add	r3, ip
 800328e:	2210      	movs	r2, #16
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e04f      	b.n	8003334 <UART_SetConfig+0x1a4>
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a89      	ldr	r2, [pc, #548]	; (80034c0 <UART_SetConfig+0x330>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d143      	bne.n	8003326 <UART_SetConfig+0x196>
 800329e:	4b8b      	ldr	r3, [pc, #556]	; (80034cc <UART_SetConfig+0x33c>)
 80032a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032a2:	23c0      	movs	r3, #192	; 0xc0
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4013      	ands	r3, r2
 80032a8:	22c0      	movs	r2, #192	; 0xc0
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d02a      	beq.n	8003306 <UART_SetConfig+0x176>
 80032b0:	22c0      	movs	r2, #192	; 0xc0
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d82e      	bhi.n	8003316 <UART_SetConfig+0x186>
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	4293      	cmp	r3, r2
 80032be:	d012      	beq.n	80032e6 <UART_SetConfig+0x156>
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d826      	bhi.n	8003316 <UART_SetConfig+0x186>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <UART_SetConfig+0x146>
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	00d2      	lsls	r2, r2, #3
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d010      	beq.n	80032f6 <UART_SetConfig+0x166>
 80032d4:	e01f      	b.n	8003316 <UART_SetConfig+0x186>
 80032d6:	231b      	movs	r3, #27
 80032d8:	2218      	movs	r2, #24
 80032da:	4694      	mov	ip, r2
 80032dc:	44bc      	add	ip, r7
 80032de:	4463      	add	r3, ip
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e026      	b.n	8003334 <UART_SetConfig+0x1a4>
 80032e6:	231b      	movs	r3, #27
 80032e8:	2218      	movs	r2, #24
 80032ea:	4694      	mov	ip, r2
 80032ec:	44bc      	add	ip, r7
 80032ee:	4463      	add	r3, ip
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e01e      	b.n	8003334 <UART_SetConfig+0x1a4>
 80032f6:	231b      	movs	r3, #27
 80032f8:	2218      	movs	r2, #24
 80032fa:	4694      	mov	ip, r2
 80032fc:	44bc      	add	ip, r7
 80032fe:	4463      	add	r3, ip
 8003300:	2204      	movs	r2, #4
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e016      	b.n	8003334 <UART_SetConfig+0x1a4>
 8003306:	231b      	movs	r3, #27
 8003308:	2218      	movs	r2, #24
 800330a:	4694      	mov	ip, r2
 800330c:	44bc      	add	ip, r7
 800330e:	4463      	add	r3, ip
 8003310:	2208      	movs	r2, #8
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e00e      	b.n	8003334 <UART_SetConfig+0x1a4>
 8003316:	231b      	movs	r3, #27
 8003318:	2218      	movs	r2, #24
 800331a:	4694      	mov	ip, r2
 800331c:	44bc      	add	ip, r7
 800331e:	4463      	add	r3, ip
 8003320:	2210      	movs	r2, #16
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e006      	b.n	8003334 <UART_SetConfig+0x1a4>
 8003326:	231b      	movs	r3, #27
 8003328:	2218      	movs	r2, #24
 800332a:	4694      	mov	ip, r2
 800332c:	44bc      	add	ip, r7
 800332e:	4463      	add	r3, ip
 8003330:	2210      	movs	r2, #16
 8003332:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <UART_SetConfig+0x330>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d000      	beq.n	8003340 <UART_SetConfig+0x1b0>
 800333e:	e088      	b.n	8003452 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003340:	231b      	movs	r3, #27
 8003342:	2218      	movs	r2, #24
 8003344:	4694      	mov	ip, r2
 8003346:	44bc      	add	ip, r7
 8003348:	4463      	add	r3, ip
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d01d      	beq.n	800338c <UART_SetConfig+0x1fc>
 8003350:	dc20      	bgt.n	8003394 <UART_SetConfig+0x204>
 8003352:	2b04      	cmp	r3, #4
 8003354:	d015      	beq.n	8003382 <UART_SetConfig+0x1f2>
 8003356:	dc1d      	bgt.n	8003394 <UART_SetConfig+0x204>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <UART_SetConfig+0x1d2>
 800335c:	2b02      	cmp	r3, #2
 800335e:	d005      	beq.n	800336c <UART_SetConfig+0x1dc>
 8003360:	e018      	b.n	8003394 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003362:	f7fe feb5 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003366:	0003      	movs	r3, r0
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800336a:	e01d      	b.n	80033a8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800336c:	4b57      	ldr	r3, [pc, #348]	; (80034cc <UART_SetConfig+0x33c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2210      	movs	r2, #16
 8003372:	4013      	ands	r3, r2
 8003374:	d002      	beq.n	800337c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003376:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <UART_SetConfig+0x340>)
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800337a:	e015      	b.n	80033a8 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 800337c:	4b55      	ldr	r3, [pc, #340]	; (80034d4 <UART_SetConfig+0x344>)
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003380:	e012      	b.n	80033a8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003382:	f7fe fdf5 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8003386:	0003      	movs	r3, r0
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800338a:	e00d      	b.n	80033a8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003392:	e009      	b.n	80033a8 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003398:	231a      	movs	r3, #26
 800339a:	2218      	movs	r2, #24
 800339c:	4694      	mov	ip, r2
 800339e:	44bc      	add	ip, r7
 80033a0:	4463      	add	r3, ip
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
        break;
 80033a6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d100      	bne.n	80033b0 <UART_SetConfig+0x220>
 80033ae:	e139      	b.n	8003624 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	0013      	movs	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d305      	bcc.n	80033cc <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d907      	bls.n	80033dc <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80033cc:	231a      	movs	r3, #26
 80033ce:	2218      	movs	r2, #24
 80033d0:	4694      	mov	ip, r2
 80033d2:	44bc      	add	ip, r7
 80033d4:	4463      	add	r3, ip
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e123      	b.n	8003624 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	6939      	ldr	r1, [r7, #16]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	000b      	movs	r3, r1
 80033ea:	0e1b      	lsrs	r3, r3, #24
 80033ec:	0010      	movs	r0, r2
 80033ee:	0205      	lsls	r5, r0, #8
 80033f0:	431d      	orrs	r5, r3
 80033f2:	000b      	movs	r3, r1
 80033f4:	021c      	lsls	r4, r3, #8
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68b8      	ldr	r0, [r7, #8]
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	1900      	adds	r0, r0, r4
 8003408:	4169      	adcs	r1, r5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	2300      	movs	r3, #0
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f7fc ff02 	bl	8000220 <__aeabi_uldivmod>
 800341c:	0002      	movs	r2, r0
 800341e:	000b      	movs	r3, r1
 8003420:	0013      	movs	r3, r2
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003426:	23c0      	movs	r3, #192	; 0xc0
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	429a      	cmp	r2, r3
 800342c:	d309      	bcc.n	8003442 <UART_SetConfig+0x2b2>
 800342e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	035b      	lsls	r3, r3, #13
 8003434:	429a      	cmp	r2, r3
 8003436:	d204      	bcs.n	8003442 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343e:	60da      	str	r2, [r3, #12]
 8003440:	e0f0      	b.n	8003624 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003442:	231a      	movs	r3, #26
 8003444:	2218      	movs	r2, #24
 8003446:	4694      	mov	ip, r2
 8003448:	44bc      	add	ip, r7
 800344a:	4463      	add	r3, ip
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e0e8      	b.n	8003624 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	429a      	cmp	r2, r3
 800345c:	d000      	beq.n	8003460 <UART_SetConfig+0x2d0>
 800345e:	e087      	b.n	8003570 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003460:	231b      	movs	r3, #27
 8003462:	2218      	movs	r2, #24
 8003464:	4694      	mov	ip, r2
 8003466:	44bc      	add	ip, r7
 8003468:	4463      	add	r3, ip
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d835      	bhi.n	80034dc <UART_SetConfig+0x34c>
 8003470:	009a      	lsls	r2, r3, #2
 8003472:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <UART_SetConfig+0x348>)
 8003474:	18d3      	adds	r3, r2, r3
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800347a:	f7fe fe29 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 800347e:	0003      	movs	r3, r0
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003482:	e035      	b.n	80034f0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7fe fe3a 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003488:	0003      	movs	r3, r0
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800348c:	e030      	b.n	80034f0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <UART_SetConfig+0x33c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2210      	movs	r2, #16
 8003494:	4013      	ands	r3, r2
 8003496:	d002      	beq.n	800349e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <UART_SetConfig+0x340>)
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800349c:	e028      	b.n	80034f0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <UART_SetConfig+0x344>)
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034a2:	e025      	b.n	80034f0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a4:	f7fe fd64 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80034a8:	0003      	movs	r3, r0
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034ac:	e020      	b.n	80034f0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034b4:	e01c      	b.n	80034f0 <UART_SetConfig+0x360>
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	efff69f3 	.word	0xefff69f3
 80034bc:	ffffcfff 	.word	0xffffcfff
 80034c0:	40004800 	.word	0x40004800
 80034c4:	fffff4ff 	.word	0xfffff4ff
 80034c8:	40004400 	.word	0x40004400
 80034cc:	40021000 	.word	0x40021000
 80034d0:	003d0900 	.word	0x003d0900
 80034d4:	00f42400 	.word	0x00f42400
 80034d8:	08003a70 	.word	0x08003a70
      default:
        pclk = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034e0:	231a      	movs	r3, #26
 80034e2:	2218      	movs	r2, #24
 80034e4:	4694      	mov	ip, r2
 80034e6:	44bc      	add	ip, r7
 80034e8:	4463      	add	r3, ip
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
        break;
 80034ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d100      	bne.n	80034f8 <UART_SetConfig+0x368>
 80034f6:	e095      	b.n	8003624 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	005a      	lsls	r2, r3, #1
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	18d2      	adds	r2, r2, r3
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0019      	movs	r1, r3
 800350a:	0010      	movs	r0, r2
 800350c:	f7fc fdfc 	bl	8000108 <__udivsi3>
 8003510:	0003      	movs	r3, r0
 8003512:	b29b      	uxth	r3, r3
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d921      	bls.n	8003560 <UART_SetConfig+0x3d0>
 800351c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	025b      	lsls	r3, r3, #9
 8003522:	429a      	cmp	r2, r3
 8003524:	d21c      	bcs.n	8003560 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	b29a      	uxth	r2, r3
 800352a:	200e      	movs	r0, #14
 800352c:	2418      	movs	r4, #24
 800352e:	193b      	adds	r3, r7, r4
 8003530:	181b      	adds	r3, r3, r0
 8003532:	210f      	movs	r1, #15
 8003534:	438a      	bics	r2, r1
 8003536:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	b29b      	uxth	r3, r3
 800353e:	2207      	movs	r2, #7
 8003540:	4013      	ands	r3, r2
 8003542:	b299      	uxth	r1, r3
 8003544:	193b      	adds	r3, r7, r4
 8003546:	181b      	adds	r3, r3, r0
 8003548:	193a      	adds	r2, r7, r4
 800354a:	1812      	adds	r2, r2, r0
 800354c:	8812      	ldrh	r2, [r2, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	193a      	adds	r2, r7, r4
 8003558:	1812      	adds	r2, r2, r0
 800355a:	8812      	ldrh	r2, [r2, #0]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	e061      	b.n	8003624 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003560:	231a      	movs	r3, #26
 8003562:	2218      	movs	r2, #24
 8003564:	4694      	mov	ip, r2
 8003566:	44bc      	add	ip, r7
 8003568:	4463      	add	r3, ip
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e059      	b.n	8003624 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003570:	231b      	movs	r3, #27
 8003572:	2218      	movs	r2, #24
 8003574:	4694      	mov	ip, r2
 8003576:	44bc      	add	ip, r7
 8003578:	4463      	add	r3, ip
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d822      	bhi.n	80035c6 <UART_SetConfig+0x436>
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	4b30      	ldr	r3, [pc, #192]	; (8003644 <UART_SetConfig+0x4b4>)
 8003584:	18d3      	adds	r3, r2, r3
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358a:	f7fe fda1 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 800358e:	0003      	movs	r3, r0
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003592:	e022      	b.n	80035da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003594:	f7fe fdb2 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003598:	0003      	movs	r3, r0
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800359c:	e01d      	b.n	80035da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <UART_SetConfig+0x4b8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2210      	movs	r2, #16
 80035a4:	4013      	ands	r3, r2
 80035a6:	d002      	beq.n	80035ae <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035a8:	4b28      	ldr	r3, [pc, #160]	; (800364c <UART_SetConfig+0x4bc>)
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035ac:	e015      	b.n	80035da <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80035ae:	4b28      	ldr	r3, [pc, #160]	; (8003650 <UART_SetConfig+0x4c0>)
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035b2:	e012      	b.n	80035da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b4:	f7fe fcdc 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80035b8:	0003      	movs	r3, r0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035bc:	e00d      	b.n	80035da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035c4:	e009      	b.n	80035da <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035ca:	231a      	movs	r3, #26
 80035cc:	2218      	movs	r2, #24
 80035ce:	4694      	mov	ip, r2
 80035d0:	44bc      	add	ip, r7
 80035d2:	4463      	add	r3, ip
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
        break;
 80035d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d021      	beq.n	8003624 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	085a      	lsrs	r2, r3, #1
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	18d2      	adds	r2, r2, r3
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0019      	movs	r1, r3
 80035f0:	0010      	movs	r0, r2
 80035f2:	f7fc fd89 	bl	8000108 <__udivsi3>
 80035f6:	0003      	movs	r3, r0
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	d909      	bls.n	8003616 <UART_SetConfig+0x486>
 8003602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	025b      	lsls	r3, r3, #9
 8003608:	429a      	cmp	r2, r3
 800360a:	d204      	bcs.n	8003616 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	e006      	b.n	8003624 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003616:	231a      	movs	r3, #26
 8003618:	2218      	movs	r2, #24
 800361a:	4694      	mov	ip, r2
 800361c:	44bc      	add	ip, r7
 800361e:	4463      	add	r3, ip
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2200      	movs	r2, #0
 8003628:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2200      	movs	r2, #0
 800362e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003630:	231a      	movs	r3, #26
 8003632:	2218      	movs	r2, #24
 8003634:	4694      	mov	ip, r2
 8003636:	44bc      	add	ip, r7
 8003638:	4463      	add	r3, ip
 800363a:	781b      	ldrb	r3, [r3, #0]
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b00e      	add	sp, #56	; 0x38
 8003642:	bdb0      	pop	{r4, r5, r7, pc}
 8003644:	08003a94 	.word	0x08003a94
 8003648:	40021000 	.word	0x40021000
 800364c:	003d0900 	.word	0x003d0900
 8003650:	00f42400 	.word	0x00f42400

08003654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2201      	movs	r2, #1
 8003662:	4013      	ands	r3, r2
 8003664:	d00b      	beq.n	800367e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4a4a      	ldr	r2, [pc, #296]	; (8003798 <UART_AdvFeatureConfig+0x144>)
 800366e:	4013      	ands	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2202      	movs	r2, #2
 8003684:	4013      	ands	r3, r2
 8003686:	d00b      	beq.n	80036a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a43      	ldr	r2, [pc, #268]	; (800379c <UART_AdvFeatureConfig+0x148>)
 8003690:	4013      	ands	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2204      	movs	r2, #4
 80036a6:	4013      	ands	r3, r2
 80036a8:	d00b      	beq.n	80036c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a3b      	ldr	r2, [pc, #236]	; (80037a0 <UART_AdvFeatureConfig+0x14c>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	0019      	movs	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2208      	movs	r2, #8
 80036c8:	4013      	ands	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4a34      	ldr	r2, [pc, #208]	; (80037a4 <UART_AdvFeatureConfig+0x150>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	0019      	movs	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2210      	movs	r2, #16
 80036ea:	4013      	ands	r3, r2
 80036ec:	d00b      	beq.n	8003706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <UART_AdvFeatureConfig+0x154>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2220      	movs	r2, #32
 800370c:	4013      	ands	r3, r2
 800370e:	d00b      	beq.n	8003728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4a25      	ldr	r2, [pc, #148]	; (80037ac <UART_AdvFeatureConfig+0x158>)
 8003718:	4013      	ands	r3, r2
 800371a:	0019      	movs	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2240      	movs	r2, #64	; 0x40
 800372e:	4013      	ands	r3, r2
 8003730:	d01d      	beq.n	800376e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a1d      	ldr	r2, [pc, #116]	; (80037b0 <UART_AdvFeatureConfig+0x15c>)
 800373a:	4013      	ands	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	035b      	lsls	r3, r3, #13
 8003752:	429a      	cmp	r2, r3
 8003754:	d10b      	bne.n	800376e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <UART_AdvFeatureConfig+0x160>)
 800375e:	4013      	ands	r3, r2
 8003760:	0019      	movs	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	4013      	ands	r3, r2
 8003776:	d00b      	beq.n	8003790 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <UART_AdvFeatureConfig+0x164>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  }
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b002      	add	sp, #8
 8003796:	bd80      	pop	{r7, pc}
 8003798:	fffdffff 	.word	0xfffdffff
 800379c:	fffeffff 	.word	0xfffeffff
 80037a0:	fffbffff 	.word	0xfffbffff
 80037a4:	ffff7fff 	.word	0xffff7fff
 80037a8:	ffffefff 	.word	0xffffefff
 80037ac:	ffffdfff 	.word	0xffffdfff
 80037b0:	ffefffff 	.word	0xffefffff
 80037b4:	ff9fffff 	.word	0xff9fffff
 80037b8:	fff7ffff 	.word	0xfff7ffff

080037bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	2100      	movs	r1, #0
 80037ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037cc:	f7fd fac4 	bl	8000d58 <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2208      	movs	r2, #8
 80037dc:	4013      	ands	r3, r2
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d10c      	bne.n	80037fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	0391      	lsls	r1, r2, #14
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4a17      	ldr	r2, [pc, #92]	; (8003848 <UART_CheckIdleState+0x8c>)
 80037ec:	9200      	str	r2, [sp, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f000 f82c 	bl	800384c <UART_WaitOnFlagUntilTimeout>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e021      	b.n	8003840 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2204      	movs	r2, #4
 8003804:	4013      	ands	r3, r2
 8003806:	2b04      	cmp	r3, #4
 8003808:	d10c      	bne.n	8003824 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	03d1      	lsls	r1, r2, #15
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <UART_CheckIdleState+0x8c>)
 8003814:	9200      	str	r2, [sp, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	f000 f818 	bl	800384c <UART_WaitOnFlagUntilTimeout>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d001      	beq.n	8003824 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e00d      	b.n	8003840 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2274      	movs	r2, #116	; 0x74
 800383a:	2100      	movs	r1, #0
 800383c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b004      	add	sp, #16
 8003846:	bd80      	pop	{r7, pc}
 8003848:	01ffffff 	.word	0x01ffffff

0800384c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b094      	sub	sp, #80	; 0x50
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	1dfb      	adds	r3, r7, #7
 800385a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385c:	e0a3      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003860:	3301      	adds	r3, #1
 8003862:	d100      	bne.n	8003866 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003864:	e09f      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fd fa77 	bl	8000d58 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <UART_WaitOnFlagUntilTimeout+0x30>
 8003876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003878:	2b00      	cmp	r3, #0
 800387a:	d13d      	bne.n	80038f8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387c:	f3ef 8310 	mrs	r3, PRIMASK
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
 8003886:	2301      	movs	r3, #1
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	f383 8810 	msr	PRIMASK, r3
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	494c      	ldr	r1, [pc, #304]	; (80039d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800389e:	400a      	ands	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	f383 8810 	msr	PRIMASK, r3
}
 80038ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ae:	f3ef 8310 	mrs	r3, PRIMASK
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40
 80038b8:	2301      	movs	r3, #1
 80038ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038be:	f383 8810 	msr	PRIMASK, r3
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2101      	movs	r1, #1
 80038d0:	438a      	bics	r2, r1
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038da:	f383 8810 	msr	PRIMASK, r3
}
 80038de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2274      	movs	r2, #116	; 0x74
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e067      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2204      	movs	r2, #4
 8003900:	4013      	ands	r3, r2
 8003902:	d050      	beq.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	401a      	ands	r2, r3
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	429a      	cmp	r2, r3
 8003916:	d146      	bne.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	0112      	lsls	r2, r2, #4
 8003920:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003922:	f3ef 8310 	mrs	r3, PRIMASK
 8003926:	613b      	str	r3, [r7, #16]
  return(result);
 8003928:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800392a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800392c:	2301      	movs	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f383 8810 	msr	PRIMASK, r3
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4923      	ldr	r1, [pc, #140]	; (80039d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003944:	400a      	ands	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f383 8810 	msr	PRIMASK, r3
}
 8003952:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003954:	f3ef 8310 	mrs	r3, PRIMASK
 8003958:	61fb      	str	r3, [r7, #28]
  return(result);
 800395a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	64bb      	str	r3, [r7, #72]	; 0x48
 800395e:	2301      	movs	r3, #1
 8003960:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f383 8810 	msr	PRIMASK, r3
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2101      	movs	r1, #1
 8003976:	438a      	bics	r2, r1
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	f383 8810 	msr	PRIMASK, r3
}
 8003984:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	2120      	movs	r1, #32
 8003998:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2274      	movs	r2, #116	; 0x74
 800399e:	2100      	movs	r1, #0
 80039a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e010      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	425a      	negs	r2, r3
 80039b6:	4153      	adcs	r3, r2
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	001a      	movs	r2, r3
 80039bc:	1dfb      	adds	r3, r7, #7
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d100      	bne.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80039c4:	e74b      	b.n	800385e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b014      	add	sp, #80	; 0x50
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	fffffe5f 	.word	0xfffffe5f

080039d4 <__libc_init_array>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	2600      	movs	r6, #0
 80039d8:	4d0c      	ldr	r5, [pc, #48]	; (8003a0c <__libc_init_array+0x38>)
 80039da:	4c0d      	ldr	r4, [pc, #52]	; (8003a10 <__libc_init_array+0x3c>)
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	42a6      	cmp	r6, r4
 80039e2:	d109      	bne.n	80039f8 <__libc_init_array+0x24>
 80039e4:	2600      	movs	r6, #0
 80039e6:	f000 f821 	bl	8003a2c <_init>
 80039ea:	4d0a      	ldr	r5, [pc, #40]	; (8003a14 <__libc_init_array+0x40>)
 80039ec:	4c0a      	ldr	r4, [pc, #40]	; (8003a18 <__libc_init_array+0x44>)
 80039ee:	1b64      	subs	r4, r4, r5
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d105      	bne.n	8003a02 <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	00b3      	lsls	r3, r6, #2
 80039fa:	58eb      	ldr	r3, [r5, r3]
 80039fc:	4798      	blx	r3
 80039fe:	3601      	adds	r6, #1
 8003a00:	e7ee      	b.n	80039e0 <__libc_init_array+0xc>
 8003a02:	00b3      	lsls	r3, r6, #2
 8003a04:	58eb      	ldr	r3, [r5, r3]
 8003a06:	4798      	blx	r3
 8003a08:	3601      	adds	r6, #1
 8003a0a:	e7f2      	b.n	80039f2 <__libc_init_array+0x1e>
 8003a0c:	08003ac0 	.word	0x08003ac0
 8003a10:	08003ac0 	.word	0x08003ac0
 8003a14:	08003ac0 	.word	0x08003ac0
 8003a18:	08003ac4 	.word	0x08003ac4

08003a1c <memset>:
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	1882      	adds	r2, r0, r2
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d100      	bne.n	8003a26 <memset+0xa>
 8003a24:	4770      	bx	lr
 8003a26:	7019      	strb	r1, [r3, #0]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	e7f9      	b.n	8003a20 <memset+0x4>

08003a2c <_init>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr

08003a38 <_fini>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr
